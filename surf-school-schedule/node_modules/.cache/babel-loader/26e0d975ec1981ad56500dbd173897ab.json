{"ast":null,"code":"var _jsxFileName = \"/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Student/StudentSettle.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faWallet, faEdit, faTrash, faCalendarPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport StudentLessonsList from './StudentLessonsList';\nimport { connect } from 'react-redux';\nimport { deleteLesson, fetchAllLessonsForStudent, searchLessons, updateLesson } from './../../services/index';\nimport './../../style/Style.css';\n\nclass StudentSettle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lessons: [],\n      currentPage: 1,\n      lessonsPerPage: 5,\n      searchedLesson: '',\n      sortToggle: false\n    };\n  }\n\n  componentDidMount() {\n    //  const idStudent = +this.props.match.params.id;\n    this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    setTimeout(() => {\n      this.checkIfLessonInThePast();\n    }, 1000);\n  } //change status of lessons that have their date in the past (24 h back) and were not given into not given\n  // checkIfLessonInThePast() {\n  //     let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n  //     let length = this.props.lesson.lessons.length;\n  //     let renderFlag = false;\n  //     for (let i = 0; i < length; ++i) {\n  //         let temp = new Date(this.props.lesson.lessons[i].date);\n  //         if (this.props.lesson.lessons[i].status === \"To_Give\" && temp < yesterday) {\n  //             this.lessonStatusChange(this.props.lesson.lessons[i], 3)\n  //             //flag so that component is not unnecessarily rendered \n  //             if (!renderFlag)\n  //                 renderFlag = true;\n  //         }\n  //     }\n  //     if (renderFlag)\n  //         this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  // };\n  // changePage = event => {\n  //     let target = parseInt(event.target.value);\n  //     if (this.props.lesson.searchedLesson) {\n  //         this.searchLesson(target)\n  //     } else {\n  //         let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n  //         this.props.fetchAllLessonsForStudent(+this.props.match.params.id, target, this.state.lessonsPerPage);\n  //     }\n  //     this.setState({\n  //         [event.target.name]: target\n  //     });\n  // };\n  // firstPage = () => {\n  //     let firstPage = 1;\n  //     if (this.props.lesson.currentPage > firstPage) {\n  //         this.props.lesson.currentPage = 1;\n  //         if (this.props.lesson.searchedLesson) {\n  //             this.searchLesson(this.props.lesson.currentPage)\n  //         } else {\n  //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n  //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  //         }\n  //     }\n  // };\n  // prevPage = () => {\n  //     if (this.props.lesson.currentPage > 1) {\n  //         --this.props.lesson.currentPage;\n  //         if (this.props.lesson.searchedLesson) {\n  //             this.searchLesson(this.props.lesson.currentPage)\n  //         } else {\n  //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n  //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  //         }\n  //     }\n  // };\n  // lastPage = () => {\n  //     let lessonsLength = this.state.lessons.length;\n  //     let lastPage = Math.ceil(this.props.totalElements / this.state.lessonsPerPage);\n  //     if (this.props.lesson.currentPage < lastPage) {\n  //         this.props.lesson.currentPage = lastPage;\n  //         if (this.props.lesson.searchedLesson) {\n  //             this.searchLesson(this.props.lesson.currentPage)\n  //         } else {\n  //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  //         }\n  //     }\n  // };\n  // nextPage = () => {\n  //     if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.lessonsPerPage)) {\n  //         ++this.props.lesson.currentPage;\n  //         if (this.props.lesson.searchedLesson) {\n  //             this.searchLesson(this.props.lesson.currentPage)\n  //         } else {\n  //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n  //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  //         }\n  //     }\n  // };\n  // searchChange = event => {\n  //     this.props.lesson.searchedLesson = event.target.value;\n  //     this.forceUpdate();\n  // };\n  // cancelSearch = () => {\n  //     this.props.lesson.searchedLesson = '';\n  //     this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  //     this.forceUpdate();\n  // };\n  // lessonStatusChange = (lesson, newStatus) => {\n  //     lesson.status = newStatus;\n  //     this.props.updateLesson(lesson);\n  //     this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n  // }\n\n\n  render() {\n    const searchedLesson = this.props.lesson.searchedLesson;\n    const totalPages = this.props.lesson.totalPages;\n    const totalElements = this.props.lesson.totalElements;\n    const lesson = this.props.lesson;\n    const lessons = this.props.lessons;\n    const currentPage = this.props.lesson.currentPage;\n    const pageNumCss = {\n      width: \"45px\",\n      border: \"1px solid #F8F8FF\",\n      color: \"#F8F8FF\",\n      textAlign: \"center\",\n      fontWeight: \"bold\"\n    };\n    const searchBoxCss = {\n      width: \"100px\",\n      border: \"1px solid #17A2B8\",\n      color: \"#17A2B8\",\n      textAlign: \"center\",\n      fontWeight: \"bold\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(StudentLessonsList, {\n      studentID: +this.props.match.params.id,\n      lessons: lessons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    lessons: state.lesson.lessons,\n    lesson: state.lesson.lesson,\n    student: state.student.student\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllLessonsForStudent: (studentId, currentPage, size) => dispatch(fetchAllLessonsForStudent(studentId, currentPage, size)),\n    deleteLesson: lessonId => dispatch(deleteLesson(lessonId)),\n    searchLessons: (searchedLesson, currentPage, sizePage) => dispatch(searchLessons(searchedLesson, currentPage, sizePage)),\n    updateLesson: lesson => dispatch(updateLesson(lesson))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentSettle);","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Student/StudentSettle.js"],"names":["React","axios","Link","Card","Table","ButtonGroup","Button","InputGroup","FormControl","FontAwesomeIcon","faUsers","faWallet","faEdit","faTrash","faCalendarPlus","faStepBackward","faFastBackward","faStepForward","faFastForward","faSearch","faTimes","faCheckSquare","SuccessToast","StudentLessonsList","connect","deleteLesson","fetchAllLessonsForStudent","searchLessons","updateLesson","StudentSettle","Component","constructor","props","state","lessons","currentPage","lessonsPerPage","searchedLesson","sortToggle","componentDidMount","match","params","id","lesson","setTimeout","checkIfLessonInThePast","render","totalPages","totalElements","pageNumCss","width","border","color","textAlign","fontWeight","searchBoxCss","mapStateToProps","student","mapDispatchToProps","dispatch","studentId","size","lessonId","sizePage"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faWallet, faEdit, faTrash, faCalendarPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport StudentLessonsList from './StudentLessonsList';\nimport { connect } from 'react-redux';\nimport { deleteLesson, fetchAllLessonsForStudent, searchLessons, updateLesson } from './../../services/index';\n\nimport './../../style/Style.css';\n\n\nclass StudentSettle extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lessons: [],\n            currentPage: 1,\n            lessonsPerPage: 5,\n            searchedLesson: '',\n            sortToggle: false\n        };\n    }\n\n    componentDidMount() {\n        //  const idStudent = +this.props.match.params.id;\n\n        this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n        setTimeout(() => {\n            this.checkIfLessonInThePast();\n        }, 1000)\n    }\n\n\n    //change status of lessons that have their date in the past (24 h back) and were not given into not given\n    // checkIfLessonInThePast() {\n    //     let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n\n    //     let length = this.props.lesson.lessons.length;\n    //     let renderFlag = false;\n    //     for (let i = 0; i < length; ++i) {\n    //         let temp = new Date(this.props.lesson.lessons[i].date);\n    //         if (this.props.lesson.lessons[i].status === \"To_Give\" && temp < yesterday) {\n    //             this.lessonStatusChange(this.props.lesson.lessons[i], 3)\n    //             //flag so that component is not unnecessarily rendered \n    //             if (!renderFlag)\n    //                 renderFlag = true;\n    //         }\n    //     }\n    //     if (renderFlag)\n    //         this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    // };\n\n    // changePage = event => {\n    //     let target = parseInt(event.target.value);\n    //     if (this.props.lesson.searchedLesson) {\n    //         this.searchLesson(target)\n    //     } else {\n    //         let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //         this.props.fetchAllLessonsForStudent(+this.props.match.params.id, target, this.state.lessonsPerPage);\n    //     }\n    //     this.setState({\n    //         [event.target.name]: target\n    //     });\n\n    // };\n\n    // firstPage = () => {\n    //     let firstPage = 1;\n\n    //     if (this.props.lesson.currentPage > firstPage) {\n    //         this.props.lesson.currentPage = 1;\n    //         if (this.props.lesson.searchedLesson) {\n    //             this.searchLesson(this.props.lesson.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    //         }\n    //     }\n    // };\n\n    // prevPage = () => {\n    //     if (this.props.lesson.currentPage > 1) {\n    //         --this.props.lesson.currentPage;\n    //         if (this.props.lesson.searchedLesson) {\n    //             this.searchLesson(this.props.lesson.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    //         }\n    //     }\n    // };\n\n    // lastPage = () => {\n    //     let lessonsLength = this.state.lessons.length;\n    //     let lastPage = Math.ceil(this.props.totalElements / this.state.lessonsPerPage);\n    //     if (this.props.lesson.currentPage < lastPage) {\n    //         this.props.lesson.currentPage = lastPage;\n    //         if (this.props.lesson.searchedLesson) {\n    //             this.searchLesson(this.props.lesson.currentPage)\n    //         } else {\n    //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    //         }\n    //     }\n    // };\n\n    // nextPage = () => {\n    //     if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.lessonsPerPage)) {\n    //         ++this.props.lesson.currentPage;\n\n    //         if (this.props.lesson.searchedLesson) {\n    //             this.searchLesson(this.props.lesson.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    //         }\n    //     }\n    // };\n\n    // searchChange = event => {\n    //     this.props.lesson.searchedLesson = event.target.value;\n    //     this.forceUpdate();\n    // };\n\n    // cancelSearch = () => {\n    //     this.props.lesson.searchedLesson = '';\n    //     this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    //     this.forceUpdate();\n    // };\n\n\n    // lessonStatusChange = (lesson, newStatus) => {\n    //     lesson.status = newStatus;\n    //     this.props.updateLesson(lesson);\n    //     this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    // }\n\n\n\n    render() {\n        const searchedLesson = this.props.lesson.searchedLesson;\n        const totalPages = this.props.lesson.totalPages;\n        const totalElements = this.props.lesson.totalElements;\n        const lesson = this.props.lesson;\n        const lessons = this.props.lessons;\n        const currentPage = this.props.lesson.currentPage;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            \n            <div>\n                <StudentLessonsList studentID={+this.props.match.params.id} lessons={lessons}/>\n\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        lessons: state.lesson.lessons,\n        lesson: state.lesson.lesson,\n        student: state.student.student\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllLessonsForStudent: (studentId, currentPage, size) => dispatch(fetchAllLessonsForStudent(studentId, currentPage, size)),\n        deleteLesson: (lessonId) => dispatch(deleteLesson(lessonId)),\n        searchLessons: (searchedLesson, currentPage, sizePage) => dispatch(searchLessons(searchedLesson, currentPage, sizePage)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentSettle);"]},"metadata":{},"sourceType":"module"}