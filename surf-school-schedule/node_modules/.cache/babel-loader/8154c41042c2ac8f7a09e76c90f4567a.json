{"ast":null,"code":"import { SAVE_STUDENT_REQUEST, FETCH_STUDENT_REQUEST, UPDATE_STUDENT_REQUEST, DELETE_STUDENT_REQUEST, STUDENT_SUCCESS, STUDENT_FAILURE, FETCH_ALL_STUDENTS_REQUEST, FETCH_ALL_STUDENTS_SUCCESS, FETCH_SEARCH_STUDENTS_REQUEST } from \"./studentTypes\";\nimport axios from 'axios';\nexport const fetchAllStudents = (currentPage, size, sortDir) => {\n  --currentPage;\n  return dispatch => {\n    // dispatch(fetchAllStudentsRequest());???????????????????????????\n    axios.get(\"http://localhost:8080/student-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir).then(response => {\n      dispatch(fetchAllStudentsSuccess(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n    }).catch(error => {\n      dispatch(studentFailure(error.message));\n    });\n  };\n};\n\nconst fetchAllStudentsRequest = () => {\n  return {\n    type: FETCH_ALL_STUDENTS_REQUEST\n  };\n};\n\nexport const saveStudent = student => {\n  return dispatch => {\n    axios.post(\"http://localhost:8080/student-api/list\", student).then(response => {\n      dispatch(saveStudentRequest(student));\n    }).catch(error => {\n      console.log(error);\n      dispatch(studentFailure(error));\n    });\n  };\n};\n\nconst saveStudentRequest = student => {\n  return {\n    type: SAVE_STUDENT_REQUEST,\n    newItem: student\n  };\n};\n\nconst fetchStudentRequest = updatedStudent => {\n  return {\n    type: FETCH_STUDENT_REQUEST,\n    updatedStudent: updatedStudent\n  };\n};\n\nexport const fetchStudent = studentId => {\n  return dispatch => {\n    axios.get(\"http://localhost:8080/student-api/\" + studentId).then(response => {\n      dispatch(fetchStudentRequest(response.data)); //dispatch(studentSuccess(response.data.content));\n    }).catch(error => {\n      dispatch(studentFailure(error));\n    });\n  };\n};\n\nconst updateStudentRequest = student => {\n  return {\n    type: UPDATE_STUDENT_REQUEST,\n    updatedStudent: student\n  };\n};\n\nexport const updateStudent = student => {\n  //console.log(student);\n  student.NrHoursWeek = 0;\n  student.NrHoursFull = 0;\n  student.WeekWage = 0; //console.log(student);\n\n  return dispatch => {\n    axios.put(\"http://localhost:8080/student-api/\" + student.id, student).then(response => {\n      dispatch(updateStudentRequest(student)); // dispatch(studentSuccess(response.data));\n    }).catch(error => {\n      console.log(error);\n      dispatch(studentFailure(error));\n    });\n  };\n};\n\nconst deleteStudentRequest = studentId => {\n  return {\n    type: DELETE_STUDENT_REQUEST,\n    studentId: studentId\n  };\n};\n\nexport const deleteStudent = studentId => {\n  return dispatch => {\n    axios.delete(\"http://localhost:8080/student-api/list/\" + studentId).then(response => {\n      dispatch(deleteStudentRequest(studentId)); //console.log(response);\n\n      dispatch(studentSuccess(response.data));\n    }).catch(error => {\n      dispatch(studentFailure(error));\n    });\n  };\n};\n\nconst studentSuccess = student => {\n  return {\n    type: STUDENT_SUCCESS,\n    payload: student\n  };\n};\n\nconst studentFailure = error => {\n  return {\n    type: STUDENT_FAILURE,\n    payload: error\n  };\n};\n\nconst fetchAllStudentsSuccess = (students, totalPages, totalElements, sortDirection) => {\n  return {\n    type: FETCH_ALL_STUDENTS_SUCCESS,\n    payload: students,\n    totalPages: totalPages,\n    totalElements: totalElements,\n    sortDirection: sortDirection\n  };\n};\n\nexport const searchStudents = (searchedValue, currentPage, studentsPerPage) => {\n  --currentPage;\n  return dispatch => {\n    axios.get(\"http://localhost:8080/student-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + studentsPerPage).then(response => {\n      dispatch(searchStudentsRequest(response.data.content));\n    }).catch(error => {\n      dispatch(studentFailure(error.message));\n    });\n  };\n};\n\nconst searchStudentsRequest = students => {\n  return {\n    type: FETCH_SEARCH_STUDENTS_REQUEST,\n    students: students\n  };\n};","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/services/student/studentActions.js"],"names":["SAVE_STUDENT_REQUEST","FETCH_STUDENT_REQUEST","UPDATE_STUDENT_REQUEST","DELETE_STUDENT_REQUEST","STUDENT_SUCCESS","STUDENT_FAILURE","FETCH_ALL_STUDENTS_REQUEST","FETCH_ALL_STUDENTS_SUCCESS","FETCH_SEARCH_STUDENTS_REQUEST","axios","fetchAllStudents","currentPage","size","sortDir","dispatch","get","then","response","fetchAllStudentsSuccess","data","content","totalPages","totalElements","catch","error","studentFailure","message","fetchAllStudentsRequest","type","saveStudent","student","post","saveStudentRequest","console","log","newItem","fetchStudentRequest","updatedStudent","fetchStudent","studentId","updateStudentRequest","updateStudent","NrHoursWeek","NrHoursFull","WeekWage","put","id","deleteStudentRequest","deleteStudent","delete","studentSuccess","payload","students","sortDirection","searchStudents","searchedValue","studentsPerPage","searchStudentsRequest"],"mappings":"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","sourcesContent":["import {\n    SAVE_STUDENT_REQUEST, FETCH_STUDENT_REQUEST, UPDATE_STUDENT_REQUEST,\n    DELETE_STUDENT_REQUEST, STUDENT_SUCCESS, STUDENT_FAILURE,\n    FETCH_ALL_STUDENTS_REQUEST, FETCH_ALL_STUDENTS_SUCCESS,\n    FETCH_SEARCH_STUDENTS_REQUEST\n} from \"./studentTypes\";\nimport axios from 'axios';\n\nexport const fetchAllStudents = (currentPage, size, sortDir) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllStudentsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/student-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir)\n            .then(response => {\n                dispatch(fetchAllStudentsSuccess(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllStudentsRequest = () => {\n    return {\n        type: FETCH_ALL_STUDENTS_REQUEST\n    };\n};\n\nexport const saveStudent = student => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/student-api/list\", student)\n            .then(response => {\n                dispatch(saveStudentRequest(student));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst saveStudentRequest = student => {\n    return {\n        type: SAVE_STUDENT_REQUEST,\n        newItem: student\n    };\n};\n\nconst fetchStudentRequest = updatedStudent => {\n    return {\n        type: FETCH_STUDENT_REQUEST,\n        updatedStudent: updatedStudent\n    };\n};\n\nexport const fetchStudent = studentId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/student-api/\" + studentId)\n            .then(response => {\n                dispatch(fetchStudentRequest(response.data));\n                //dispatch(studentSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst updateStudentRequest = student => {\n    return {\n        type: UPDATE_STUDENT_REQUEST,\n        updatedStudent: student\n    };\n};\n\nexport const updateStudent = student => {\n    //console.log(student);\n    student.NrHoursWeek = 0;\n    student.NrHoursFull = 0;\n    student.WeekWage = 0;\n    //console.log(student);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/student-api/\" + student.id, student)\n            .then(response => {\n                dispatch(updateStudentRequest(student));\n\n                // dispatch(studentSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst deleteStudentRequest = studentId => {\n    return {\n        type: DELETE_STUDENT_REQUEST,\n        studentId: studentId\n    };\n};\n\nexport const deleteStudent = studentId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/student-api/list/\" + studentId)\n            .then(response => {\n                dispatch(deleteStudentRequest(studentId));\n                //console.log(response);\n                dispatch(studentSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\n\nconst studentSuccess = student => {\n    return {\n        type: STUDENT_SUCCESS,\n        payload: student\n    };\n};\n\nconst studentFailure = error => {\n    return {\n        type: STUDENT_FAILURE,\n        payload: error\n    };\n};\n\nconst fetchAllStudentsSuccess = (students, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_STUDENTS_SUCCESS,\n        payload: students,\n        totalPages: totalPages,\n        totalElements: totalElements,\n        sortDirection: sortDirection\n    };\n};\n\nexport const searchStudents = (searchedValue, currentPage, studentsPerPage) => {\n    --currentPage;\n    return dispatch => {\n        axios.get(\"http://localhost:8080/student-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + studentsPerPage)\n            .then(response => {\n                dispatch(searchStudentsRequest(response.data.content));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error.message));\n            });\n    };\n};\n\n\nconst searchStudentsRequest = students => {\n    return {\n        type: FETCH_SEARCH_STUDENTS_REQUEST,\n        students: students\n    };\n};\n\n\n"]},"metadata":{},"sourceType":"module"}