{"ast":null,"code":"var _jsxFileName = \"/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/LessonForm.js\";\nimport React from 'react';\nimport { Form, Card, Col, Button, Modal } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      id: '',\n      date: 'Select Date',\n      time: 'Select Hour',\n      nrStudents: 'Select Nr of Students',\n      status: 0,\n      howLong: 'Select How Long',\n      students: [],\n      instructors: [],\n      dates: [],\n      times: [],\n      nrStudTable: [],\n      howLongTable: [],\n      instructor: {\n        id: '',\n        lastName: 'Select Instructor',\n        firstName: '',\n        NrHoursWeek: 0,\n        NrHoursFull: 0,\n        WeekWage: 0\n      },\n      student: {\n        id: '',\n        lastName: 'Select Student',\n        firstName: '',\n        idCardNr: '',\n        telNr: '',\n        paymentStatus: 0,\n        lessonHours: 0,\n        unpaidLessons: 0,\n        moneyOwing: 0,\n        moneyInAdvance: ''\n      }\n    };\n\n    this.filterTimesArray = () => {\n      axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date).then(response => {\n        if (response.data != null) {\n          //save when the lessons start \n          let timesTab = response.data.content;\n          timesTab = timesTab.map(t => t.time); //save how long they take\n\n          let howLongTab = response.data.content;\n          howLongTab = howLongTab.map(h => h.howLong); //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n\n          for (let i = 0; i < howLongTab.length; ++i) {\n            if (howLongTab[i] > 1) {\n              var pieces = timesTab[i].split(':');\n\n              for (var j = 1; j < howLongTab[i]; ++j) {\n                ++pieces[0];\n                var tempHour = pieces[0] + \":00\";\n                timesTab = timesTab.concat(tempHour);\n              }\n            }\n          }\n\n          this.state.times = [];\n          this.state.times.push('Select Hour');\n          this.state.times = this.state.times.concat(this.arrayWithHours());\n          this.setState({\n            times: this.state.times.filter(e => !timesTab.includes(e))\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error: \" + error);\n      });\n    };\n\n    this.findAllStudents = addedStudent => {\n      this.props.fetchAllStudents(1, 999999999, \"asc\", addedStudent);\n    };\n\n    this.findAllInstructors = addSelect => {\n      this.props.fetchAllInstructors(1, 999999999, \"asc\", addSelect);\n    };\n\n    this.findLessonById = idLesson => {\n      axios.get(\"http://localhost:8080/lesson-api/\" + idLesson).then(response => {\n        if (response.data != null) {\n          this.props.student.students.unshift(response.data.student);\n          this.props.instructor.instructors.unshift(response.data.instructor);\n          this.setState({\n            id: response.data.id,\n            instructor: response.data.instructor,\n            student: response.data.student,\n            date: response.data.date,\n            time: response.data.time,\n            howLong: response.data.howLong,\n            nrStudents: response.data.nrStudents,\n            status: response.data.status\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error: \" + error);\n      });\n    };\n\n    this.isValid = () => {\n      if (this.state.student.lastName === 'Select Student' || this.state.nrStudents === 'Select Nr of Students' || this.state.howLong === 'Select How Long') {\n        this.setState({\n          \"showInvalidMessage\": true,\n          \"method\": \"post\"\n        });\n        setTimeout(() => this.setState({\n          \"showInvalidMessage\": false\n        }), 3000);\n        return false;\n      } else return true;\n    };\n\n    this.submitLesson = () => {\n      if (!this.isValid()) {\n        return;\n      }\n\n      const lesson = {\n        instructor: this.props.instructor,\n        student: JSON.parse(this.state.student),\n        date: this.props.date,\n        time: this.props.lessonHour,\n        howLong: this.state.howLong,\n        nrStudents: this.state.nrStudents,\n        status: this.state.status\n      };\n      this.props.saveLesson(lesson);\n      setTimeout(() => {\n        if (!this.props.lesson.error) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          this.resetForm();\n          setTimeout(() => this.props.handleClose(null, this.props.instrIndex, this.props.lessonIndex, true, lesson), 1000);\n        } else {\n          this.setState({\n            \"showCantCreateLessonMessage\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"showCantCreateLessonMessage\": false\n          }), 3000);\n          this.props.lesson.error = '';\n        }\n      }, 1000);\n    };\n\n    this.updateLesson = () => {\n      if (!this.isValid()) {\n        return;\n      }\n\n      if (typeof this.state.instructor === \"object\") this.state.instructor = JSON.stringify(this.state.instructor);\n      if (typeof this.state.student === \"object\") this.state.student = JSON.stringify(this.state.student);\n      const lesson = {\n        id: this.state.id,\n        instructor: JSON.parse(this.state.instructor),\n        student: JSON.parse(this.state.student),\n        date: this.state.date,\n        time: this.state.time,\n        howLong: this.state.howLong,\n        nrStudents: this.state.nrStudents,\n        status: this.state.status\n      };\n      this.props.updateLesson(lesson);\n      this.forceUpdate();\n      setTimeout(() => {\n        if (!this.props.lesson.error) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          this.resetForm();\n          setTimeout(() => this.props.handleClose(null, null, null, null, null, true), 1000);\n        } else {\n          this.setState({\n            \"showCantCreateLessonMessage\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"showCantCreateLessonMessage\": false\n          }), 3000);\n          this.props.lesson.error = '';\n        }\n      }, 2000);\n    };\n\n    this.resetForm = () => {\n      let selectStudent = {\n        id: -1,\n        lastName: 'Select Student',\n        firstName: '',\n        idCardNr: '',\n        telNr: '',\n        paymentStatus: 0,\n        lessonHours: 0,\n        unpaidLessons: 0,\n        moneyOwing: 0,\n        moneyInAdvance: ''\n      };\n      this.findAllStudents(selectStudent);\n      this.setState({\n        \"student\": this.initialState.student,\n        \"howLong\": this.initialState.howLong,\n        \"nrStudents\": this.initialState.nrStudents\n      });\n    };\n\n    this.lessonChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.lessonChangeInstructor = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      this.state.instructor = event.target.value;\n      if (typeof this.state.instructor === \"string\") this.state.instructor = JSON.parse(this.state.instructor);\n      this.filterTimesArray();\n    };\n\n    this.onShowHandle = () => {\n      if (this.props.editedLesson) {\n        this.setState({\n          id: this.props.editedLesson.id,\n          student: this.props.editedLesson.student,\n          howLong: this.props.editedLesson.howLong,\n          nrStudents: this.props.editedLesson.nrStudents,\n          instructor: this.props.editedLesson.instructor,\n          date: this.props.editedLesson.date,\n          time: this.props.editedLesson.time,\n          status: this.props.editedLesson.status\n        });\n        this.findAllStudents(this.props.editedLesson.student); //musze dac booleana\n\n        this.props.student.students[0] = this.props.editedLesson.student;\n      }\n    };\n\n    this.resetAndCloseForm = () => {\n      this.resetForm();\n      this.props.handleClose(false\n      /*, null, null, null, null, true*/\n      );\n    };\n\n    this.state = this.initialState;\n    this.state.show = false;\n    this.state.showInvalidMessage = false;\n    this.state.showCantCreateLessonMessage = false;\n    this.state.method = 'post';\n    this.lessonChange = this.lessonChange.bind(this);\n    this.submitLesson = this.submitLesson.bind(this);\n  }\n\n  componentDidMount() {\n    let selectStudent = {\n      id: -1,\n      lastName: 'Select Student',\n      firstName: '',\n      idCardNr: '',\n      telNr: '',\n      paymentStatus: 0,\n      lessonHours: 0,\n      unpaidLessons: 0,\n      moneyOwing: 0,\n      moneyInAdvance: ''\n    };\n    this.findAllStudents(selectStudent);\n    this.setArrays();\n  }\n\n  arrayWithHours() {\n    var arr = [],\n        i,\n        j;\n\n    for (i = 9; i < 21; i++) {\n      arr.push(i + \":00\");\n    }\n\n    return arr;\n  }\n\n  addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  getDateArray(start, end) {\n    var arr = new Array();\n    var dt = new Date(start);\n\n    while (dt < end) {\n      var dd = dt.getDate();\n      var mm = dt.getMonth() + 1;\n      var yyyy = dt.getFullYear();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n\n      var fullDate = mm + '-' + dd + '-' + yyyy;\n      arr.push(fullDate);\n      dt.setDate(dt.getDate() + 1);\n    }\n\n    return arr;\n  }\n\n  getNrStudArray() {\n    var arr = new Array();\n\n    for (var i = 1; i < 6; ++i) {\n      arr.push(i);\n    }\n\n    return arr;\n  }\n\n  getHowLongArray() {\n    var arr = new Array();\n\n    for (var i = 1; i < 4; ++i) {\n      arr.push(i);\n    }\n\n    return arr;\n  }\n\n  setArrays() {\n    this.state.dates.push('Select Date');\n    this.state.times.push('Select Hour');\n    this.state.howLongTable.push('Select How Long');\n    this.state.nrStudTable.push('Select Nr of Students');\n    this.setState({\n      dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 7))),\n      times: this.state.times.concat(this.arrayWithHours()),\n      howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n      nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n    });\n\n    if (this.state.id) {\n      this.filterTimesArray();\n    }\n  } //leave only free hours - when instructor does not have other lessons\n  //this doesn't check if student has other lessons\n\n\n  render() {\n    const {\n      student,\n      time,\n      howLong,\n      nrStudents\n    } = this.state;\n    const instructors = this.props.instructor.instructors;\n    const students = this.props.student.students;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      show: this.props.showForm,\n      onHide: () => this.resetAndCloseForm(),\n      onShow: () => this.onShowHandle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"border border-light bg-dark text-white\",\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.show ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SuccessToast, {\n      show: this.state.show,\n      message: this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\",\n      type: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.showInvalidMessage ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SuccessToast, {\n      show: this.state.showInvalidMessage,\n      message: \"Fill out the required fields.\",\n      type: \"dangerNoSuccess\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.showCantCreateLessonMessage ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SuccessToast, {\n      show: this.state.showCantCreateLessonMessage,\n      message: \"Can't create such lesson - conflict with other lesson\",\n      type: \"dangerNoSuccess\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: this.props.editedLesson ? faEdit : faPlusSquare,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 29\n      }\n    }), \" \", this.props.editedLesson ? \"Update Lesson\" : \"Add New Lesson\")), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"border border-light bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      onReset: this.resetLesson,\n      onSubmit: this.props.editedLesson ? this.updateLesson : this.submitLesson,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 37\n      }\n    }, \"Instructor\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 37\n      }\n    }, this.props.instructor.firstName + \" \" + this.props.instructor.lastName), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 37\n      }\n    }, \"Date\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 37\n      }\n    }, this.props.date), /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 37\n      }\n    }, \"Time\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 37\n      }\n    }, this.props.lessonHour), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridStudent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 41\n      }\n    }, \"Student\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      name: \"student\",\n      value: student,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 41\n      }\n    }, students.filter((item, index, self) => index === self.findIndex(e => e.id === item.id)).map(student => /*#__PURE__*/React.createElement(\"option\", {\n      key: student.id,\n      value: JSON.stringify(student),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 53\n      }\n    }, student.lastName + \" \" + student.firstName)))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridHowLong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 45\n      }\n    }, \"How Long [h]\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"howLong\",\n      value: howLong,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 45\n      }\n    }, this.state.howLongTable.map(howLong => /*#__PURE__*/React.createElement(\"option\", {\n      key: howLong,\n      value: howLong,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 53\n      }\n    }, howLong)))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridNrStudents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 45\n      }\n    }, \"Nr Of Students\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"nrStudents\",\n      value: nrStudents,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 45\n      }\n    }, this.state.nrStudTable.map(nrStudents => /*#__PURE__*/React.createElement(\"option\", {\n      key: nrStudents,\n      value: nrStudents,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 53\n      }\n    }, nrStudents))))))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      className: \"border border-light bg-light text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"info\",\n      type: \"submit\",\n      onClick: this.props.editedLesson ? () => this.updateLesson() : () => this.submitLesson(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 33\n      }\n    }), \" \", this.props.editedLesson ? \"Update\" : \"Submit\"), '      ', !this.props.editedLesson ? /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"secondary\",\n      type: \"reset\",\n      onClick: () => this.resetForm(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 37\n      }\n    }), \"  Reset\") : \" \"), '      ', /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"border border-dark bg-light\",\n      type: \"button\",\n      onClick: () => this.resetAndCloseForm(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 33\n      }\n    }), \"  Return\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    //savedStudentObject: state.student,\n    //      studentObject: state.student,\n    //  updatedStudent: state.student.student\n    lesson: state.lesson,\n    student: state.student\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllStudents: (currentPage, size, sortDir, addedStudent) => dispatch(fetchAllStudents(currentPage, size, sortDir, addedStudent)),\n    fetchAllInstructors: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllInstructors(currentPage, size, sortDir, addSelect)),\n    saveLesson: lesson => dispatch(saveLesson(lesson)),\n    fetchLesson: lessonId => dispatch(fetchLesson(lessonId)),\n    updateLesson: lesson => dispatch(updateLesson(lesson))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/LessonForm.js"],"names":["React","Form","Card","Col","Button","Modal","faSave","faUndo","faArrowLeft","faEdit","faPlusSquare","faLanguage","FontAwesomeIcon","Link","axios","moment","SuccessToast","Instructor","Student","connect","saveLesson","fetchLesson","updateLesson","fetchAllInstructors","fetchAllStudents","Lesson","Component","constructor","props","initialState","id","date","time","nrStudents","status","howLong","students","instructors","dates","times","nrStudTable","howLongTable","instructor","lastName","firstName","NrHoursWeek","NrHoursFull","WeekWage","student","idCardNr","telNr","paymentStatus","lessonHours","unpaidLessons","moneyOwing","moneyInAdvance","filterTimesArray","get","state","then","response","data","timesTab","content","map","t","howLongTab","h","i","length","pieces","split","j","tempHour","concat","push","arrayWithHours","setState","filter","e","includes","catch","error","console","findAllStudents","addedStudent","findAllInstructors","addSelect","findLessonById","idLesson","unshift","isValid","setTimeout","submitLesson","lesson","JSON","parse","lessonHour","resetForm","handleClose","instrIndex","lessonIndex","stringify","forceUpdate","selectStudent","lessonChange","event","target","name","value","lessonChangeInstructor","onShowHandle","editedLesson","resetAndCloseForm","show","showInvalidMessage","showCantCreateLessonMessage","method","bind","componentDidMount","setArrays","arr","addDays","days","result","Date","setDate","getDate","getDateArray","start","end","Array","dt","dd","mm","getMonth","yyyy","getFullYear","fullDate","getNrStudArray","getHowLongArray","render","showForm","resetLesson","item","index","self","findIndex","mapStateToProps","mapDispatchToProps","dispatch","currentPage","size","sortDir","lessonId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Card, Col, Button, Modal } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\n\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n        this.state.showCantCreateLessonMessage = false;\n        this.state.method = 'post';\n        this.lessonChange = this.lessonChange.bind(this);\n        this.submitLesson = this.submitLesson.bind(this);\n\n    }\n\n    initialState = {\n        id: '', date: 'Select Date', time: 'Select Hour', nrStudents: 'Select Nr of Students', status: 0, howLong: 'Select How Long',\n        students: [], instructors: [], dates: [], times: [], nrStudTable: [], howLongTable: [],\n        instructor: {\n            id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n        },\n        student: {\n            id: '', lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        }\n    }\n\n    componentDidMount() {\n        let selectStudent = {\n            id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        };\n        this.findAllStudents(selectStudent);\n        this.setArrays();\n    };\n\n\n    arrayWithHours() {\n        var arr = [], i, j;\n        for (i = 9; i < 21; i++) {\n            arr.push(i + \":00\");\n        }\n        return arr;\n    };\n\n    addDays(date, days) {\n        var result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    getDateArray(start, end) {\n        var arr = new Array();\n        var dt = new Date(start);\n        while (dt < end) {\n            var dd = dt.getDate();\n            var mm = dt.getMonth() + 1;\n            var yyyy = dt.getFullYear();\n            if (dd < 10) {\n                dd = '0' + dd;\n            }\n            if (mm < 10) {\n                mm = '0' + mm;\n            }\n            var fullDate = mm + '-' + dd + '-' + yyyy;\n            arr.push(fullDate);\n            dt.setDate(dt.getDate() + 1);\n        }\n        return arr;\n    }\n\n    getNrStudArray() {\n        var arr = new Array();\n        for (var i = 1; i < 6; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    getHowLongArray() {\n        var arr = new Array();\n        for (var i = 1; i < 4; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    setArrays() {\n        this.state.dates.push('Select Date');\n        this.state.times.push('Select Hour');\n        this.state.howLongTable.push('Select How Long');\n        this.state.nrStudTable.push('Select Nr of Students');\n        this.setState({\n            dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 7))),\n            times: this.state.times.concat(this.arrayWithHours()),\n            howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n            nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n        });\n        if (this.state.id) {\n            this.filterTimesArray();\n        }\n    }\n\n    //leave only free hours - when instructor does not have other lessons\n    //this doesn't check if student has other lessons\n    filterTimesArray = () => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date)\n            .then(response => {\n                if (response.data != null) {\n                    //save when the lessons start \n                    let timesTab = response.data.content;\n                    timesTab = timesTab.map(t => t.time);\n\n                    //save how long they take\n                    let howLongTab = response.data.content;\n                    howLongTab = howLongTab.map(h => h.howLong);\n\n                    //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n                    for (let i = 0; i < howLongTab.length; ++i) {\n                        if (howLongTab[i] > 1) {\n                            var pieces = timesTab[i].split(':');\n\n                            for (var j = 1; j < howLongTab[i]; ++j) {\n                                ++pieces[0];\n                                var tempHour = pieces[0] + \":00\";\n                                timesTab = timesTab.concat(tempHour)\n                            }\n                        }\n                    }\n\n                    this.state.times = [];\n                    this.state.times.push('Select Hour');\n                    this.state.times = this.state.times.concat(this.arrayWithHours());\n\n                    this.setState({\n                        times: this.state.times.filter(e => !timesTab.includes(e))\n                    });\n\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n\n    }\n\n\n    findAllStudents = (addedStudent) => {\n        this.props.fetchAllStudents(1, 999999999, \"asc\", addedStudent);\n    }\n\n\n\n    findAllInstructors = (addSelect) => {\n        this.props.fetchAllInstructors(1, 999999999, \"asc\", addSelect);\n\n    };\n\n\n    findLessonById = (idLesson) => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + idLesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.props.student.students.unshift(response.data.student);\n                    this.props.instructor.instructors.unshift(response.data.instructor);\n                    this.setState({\n                        id: response.data.id,\n                        instructor: response.data.instructor,\n                        student: response.data.student,\n                        date: response.data.date,\n                        time: response.data.time,\n                        howLong: response.data.howLong,\n                        nrStudents: response.data.nrStudents,\n                        status: response.data.status,\n                    });\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n\n    isValid = () => {\n        if (this.state.student.lastName === 'Select Student' ||\n            this.state.nrStudents === 'Select Nr of Students' ||\n            this.state.howLong === 'Select How Long') {\n            this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n            setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            return false;\n        }\n        else\n            return true;\n    }\n\n    submitLesson = () => {\n        if (!this.isValid()) {\n            return;\n        }\n\n        const lesson = {\n            instructor: this.props.instructor,\n            student: JSON.parse(this.state.student),\n            date: this.props.date,\n            time: this.props.lessonHour,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        this.props.saveLesson(lesson);\n        setTimeout(() => {\n            if (!this.props.lesson.error) {\n                this.setState({\n                    \"show\": true,\n                    \"method\": \"post\"\n                });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                this.resetForm();\n                setTimeout(() => this.props.handleClose(null, this.props.instrIndex, this.props.lessonIndex, true, lesson), 1000);\n            } else {\n                this.setState({ \"showCantCreateLessonMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showCantCreateLessonMessage\": false }), 3000);\n                this.props.lesson.error = '';\n            }\n        }, 1000);\n    };\n\n\n    updateLesson = () => {\n        if (!this.isValid()) {\n            return;\n        }\n        if (typeof (this.state.instructor) === \"object\")\n            this.state.instructor = JSON.stringify(this.state.instructor);\n\n        if (typeof (this.state.student) === \"object\")\n            this.state.student = JSON.stringify(this.state.student);\n\n        const lesson = {\n            id: this.state.id,\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        this.props.updateLesson(lesson);\n        this.forceUpdate();\n        setTimeout(() => {\n\n            if (!this.props.lesson.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                this.resetForm();\n                setTimeout(() => this.props.handleClose(null, null, null, null, null, true), 1000);\n            } else {\n                this.setState({ \"showCantCreateLessonMessage\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"showCantCreateLessonMessage\": false }), 3000);\n                this.props.lesson.error = '';\n            }\n        }, 2000);\n    }\n\n    resetForm = () => {\n        let selectStudent = {\n            id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        };\n        this.findAllStudents(selectStudent);\n        this.setState({\n            \"student\": this.initialState.student,\n            \"howLong\": this.initialState.howLong,\n            \"nrStudents\": this.initialState.nrStudents\n        });\n    };\n\n    lessonChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    };\n\n    lessonChangeInstructor = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n        this.state.instructor = event.target.value;\n        if (typeof (this.state.instructor) === \"string\")\n            this.state.instructor = JSON.parse(this.state.instructor);\n\n        this.filterTimesArray();\n\n    }\n\n    onShowHandle = () => {\n\n        if (this.props.editedLesson) {\n            this.setState({\n                id: this.props.editedLesson.id,\n                student: this.props.editedLesson.student,\n                howLong: this.props.editedLesson.howLong,\n                nrStudents: this.props.editedLesson.nrStudents,\n                instructor: this.props.editedLesson.instructor,\n                date: this.props.editedLesson.date,\n                time: this.props.editedLesson.time,\n                status: this.props.editedLesson.status,\n            });\n            this.findAllStudents(this.props.editedLesson.student);//musze dac booleana\n            this.props.student.students[0] = this.props.editedLesson.student;\n\n        }\n    }\n\n    resetAndCloseForm = () => {\n        this.resetForm();\n        this.props.handleClose(false/*, null, null, null, null, true*/);\n    }\n\n    render() {\n        const { student, time, howLong, nrStudents } = this.state;\n        const instructors = this.props.instructor.instructors;\n        const students = this.props.student.students;\n\n        return (\n            <>\n                <Modal show={this.props.showForm}\n                    onHide={() => this.resetAndCloseForm()}\n                    onShow={() => this.onShowHandle()}\n                >\n                    <Modal.Header className={\"border border-light bg-dark text-white\"} closeButton>\n                        <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\"} type=\"success\" />\n                        </div>\n                        <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.showInvalidMessage} message={\"Fill out the required fields.\"} type=\"dangerNoSuccess\" />\n                        </div>\n                        <div style={{ \"display\": this.state.showCantCreateLessonMessage ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.showCantCreateLessonMessage} message={\"Can't create such lesson - conflict with other lesson\"} type=\"dangerNoSuccess\" />\n                        </div>\n                        <Modal.Title>\n                            <FontAwesomeIcon icon={this.props.editedLesson ? faEdit : faPlusSquare} /> {this.props.editedLesson ? \"Update Lesson\" : \"Add New Lesson\"}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className={\"border border-light bg-dark text-white\"}>\n                        <Card className={\"border border-dark bg-dark text-white\"}>\n                            <Form onReset={this.resetLesson} onSubmit={this.props.editedLesson ? this.updateLesson : this.submitLesson}>\n                                <Card.Body>\n                                    <h6>Instructor</h6>\n                                    <h5>{this.props.instructor.firstName + \" \" + this.props.instructor.lastName}</h5>\n\n                                    <h6>Date</h6>\n                                    <h5>{this.props.date}</h5>\n\n                                    <h6>Time</h6>\n                                    <h5>{this.props.lessonHour}</h5>\n\n\n\n                                    <Form.Group as={Col} controlId=\"formGridStudent\">\n                                        <Form.Label>Student</Form.Label>\n                                        <Form.Control required as=\"select\"\n                                            name=\"student\"\n                                            value={student}\n                                            onChange={this.lessonChange}\n                                            className={\"bg-dark text-white\"} >\n                                            {students.filter((item, index, self) =>\n                                                index === self.findIndex((e) => (\n                                                    e.id === item.id)\n                                                ))\n                                                .map(student =>\n                                                    <option key={student.id} value={JSON.stringify(student)}>\n                                                        {student.lastName + \" \" + student.firstName}\n                                                    </option>\n                                                )}\n                                        </Form.Control>\n                                    </Form.Group>\n\n\n\n                                    <Form.Row>\n                                        <Form.Group as={Col} controlId=\"formGridHowLong\">\n                                            <Form.Label>How Long [h]</Form.Label>\n                                            <Form.Control required as=\"select\"\n                                                autoComplete=\"off\"\n                                                name=\"howLong\"\n                                                value={howLong}\n                                                onChange={this.lessonChange}\n                                                className={\"bg-dark text-white\"}>\n                                                {this.state.howLongTable.map(howLong =>\n                                                    <option key={howLong} value={howLong}>\n                                                        {howLong}\n                                                    </option>\n                                                )}\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col} controlId=\"formGridNrStudents\">\n                                            <Form.Label>Nr Of Students</Form.Label>\n                                            <Form.Control required as=\"select\"\n                                                autoComplete=\"off\"\n                                                name=\"nrStudents\"\n                                                value={nrStudents}\n                                                onChange={this.lessonChange}\n                                                className={\"bg-dark text-white\"} >\n                                                {this.state.nrStudTable.map(nrStudents =>\n                                                    <option key={nrStudents} value={nrStudents}>\n                                                        {nrStudents}\n                                                    </option>\n                                                )}\n                                            </Form.Control>\n                                        </Form.Group>\n                                    </Form.Row>\n\n                                </Card.Body>\n\n\n                            </Form >\n                        </Card >\n                    </Modal.Body>\n                    <Modal.Footer className={\"border border-light bg-light text-white\"}>\n                        <div>\n                            <Button size=\"sm\" variant=\"info\" type=\"submit\" onClick={this.props.editedLesson ? () => this.updateLesson() : () => this.submitLesson()}>\n                                <FontAwesomeIcon icon={faSave} /> {this.props.editedLesson ? \"Update\" : \"Submit\"}\n                            </Button>\n                            {'      '}\n                            {!this.props.editedLesson ?\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\" onClick={() => this.resetForm()}>\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button> : \" \"\n                            }\n                        </div>\n                        {'      '}\n                        <div>\n                            <Button size=\"sm\" variant=\"border border-dark bg-light\" type=\"button\" onClick={() => this.resetAndCloseForm()}>\n                                <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                        </div>\n\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n        student: state.student\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllStudents: (currentPage, size, sortDir, addedStudent) => dispatch(fetchAllStudents(currentPage, size, sortDir, addedStudent)),\n        fetchAllInstructors: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllInstructors(currentPage, size, sortDir, addSelect)),\n        saveLesson: (lesson) => dispatch(saveLesson(lesson)),\n        fetchLesson: (lessonId) => dispatch(fetchLesson(lessonId)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);"]},"metadata":{},"sourceType":"module"}