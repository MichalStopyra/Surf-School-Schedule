{"ast":null,"code":"var _jsxFileName = \"/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Lesson.js\";\nimport React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      id: '',\n      date: 'Select Date',\n      time: 'Select Hour',\n      nrStudents: 'Select Nr of Students',\n      status: 0,\n      howLong: 'Select How Long',\n      students: [],\n      instructors: [],\n      dates: [],\n      times: [],\n      nrStudTable: [],\n      howLongTable: [] //    / instructor: {\n      //         id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n      //     },\n      //     student: {\n      //         id: '', lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n      //     }\n\n    };\n\n    this.filterTimesArray = () => {\n      axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date).then(response => {\n        if (response.data != null) {\n          //save when the lessons start \n          let timesTab = response.data.content;\n          timesTab = timesTab.map(t => t.time); //save how long they take\n\n          let howLongTab = response.data.content;\n          howLongTab = howLongTab.map(h => h.howLong); //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n\n          for (let i = 0; i < howLongTab.length; ++i) {\n            if (howLongTab[i] > 1) {\n              var pieces = timesTab[i].split(':');\n\n              for (var j = 1; j < howLongTab[i]; ++j) {\n                ++pieces[0];\n                var tempHour = pieces[0] + \":00\";\n                timesTab = timesTab.concat(tempHour);\n              }\n            }\n          }\n\n          this.state.times = [];\n          this.state.times.push('Select Hour');\n          this.state.times = this.state.times.concat(this.arrayWithHours());\n          this.setState({\n            times: this.state.times.filter(e => !timesTab.includes(e))\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error: \" + error);\n      });\n    };\n\n    this.findAllStudents = () => {\n      this.props.fetchAllStudents.bind(this, 1, 999999999, \"asc\");\n    };\n\n    this.findAllInstructors = () => {\n      // axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=paymentStatus&sortDir=desc\")\n      //     .then(response => response.data)\n      //     .then((data) => {\n      //         if (!this.state.instructors.length)\n      //             this.state.instructors.push(this.state.instructor);\n      //         // this.state.instructors.push(\"Select Instructor\");\n      //         this.setState({\n      //             instructors: this.state.instructors.concat(data.content)\n      //         });\n      //         if (this.state.id)\n      //             this.setState({\n      //                 instructors: this.state.instructors.filter(instructor => instructor.id !== this.state.instructors[0].id)\n      //             });\n      //     });\n      this.props.fetchAllInstructors(1, 999999999, \"asc\");\n    };\n\n    this.findLessonById = idLesson => {\n      axios.get(\"http://localhost:8080/lesson-api/\" + idLesson).then(response => {\n        if (response.data != null) {\n          this.setState({\n            id: response.data.id,\n            instructor: response.data.instructor,\n            student: response.data.student,\n            date: response.data.date,\n            time: response.data.time,\n            howLong: response.data.howLong,\n            nrStudents: response.data.nrStudents,\n            status: response.data.status\n          });\n        }\n      }).catch(error => {\n        console.error(\"Error: \" + error);\n      });\n    };\n\n    this.returnToList = () => {\n      return this.props.history.push(\"/lessons\");\n    };\n\n    this.isValid = () => {\n      if (this.state.student.lastName === 'Select Student' || this.state.instructor.lastName === 'Select Instructor' || this.state.date === 'Select Date' || this.state.time === 'Select Hour' || this.state.nrStudents === 'Select Nr of Students' || this.state.howLong === 'Select How Long') {\n        this.setState({\n          \"showInvalidMessage\": true,\n          \"method\": \"post\"\n        });\n        setTimeout(() => this.setState({\n          \"showInvalidMessage\": false\n        }), 3000);\n        return false;\n      } else return true;\n    };\n\n    this.submitLesson = event => {\n      event.preventDefault();\n\n      if (!this.isValid()) {\n        return;\n      }\n\n      const lesson = {\n        instructor: JSON.parse(this.state.instructor),\n        student: JSON.parse(this.state.student),\n        date: this.state.date,\n        time: this.state.time,\n        howLong: this.state.howLong,\n        nrStudents: this.state.nrStudents,\n        status: this.state.status\n      };\n      axios.post(\"http://localhost:8080/lesson-api/list\", lesson).then(response => {\n        if (response.data != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"post\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          setTimeout(() => this.returnToList(), 1000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      });\n      this.setState(this.initialState);\n    };\n\n    this.updateLesson = event => {\n      event.preventDefault();\n\n      if (!this.isValid()) {\n        return;\n      }\n\n      if (typeof this.state.instructor === \"object\") this.state.instructor = JSON.stringify(this.state.instructor);\n      if (typeof this.state.student === \"object\") this.state.student = JSON.stringify(this.state.student);\n      const lesson = {\n        id: this.state.id,\n        instructor: JSON.parse(this.state.instructor),\n        student: JSON.parse(this.state.student),\n        date: this.state.date,\n        time: this.state.time,\n        howLong: this.state.howLong,\n        nrStudents: this.state.nrStudents,\n        status: this.state.status\n      };\n      axios.put(\"http://localhost:8080/lesson-api/\" + this.state.id, lesson).then(response => {\n        if (response.data != null) {\n          this.setState({\n            \"show\": true,\n            \"method\": \"put\"\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          setTimeout(() => this.returnToList(), 1000);\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      });\n      this.setState(this.initialState);\n    };\n\n    this.resetLesson = () => {\n      this.setState(() => this.initialState);\n      this.findAllInstructors();\n      this.findAllStudents();\n      this.setArrays();\n    };\n\n    this.lessonChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.lessonChangeInstructor = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n      this.state.instructor = event.target.value;\n      if (typeof this.state.instructor === \"string\") this.state.instructor = JSON.parse(this.state.instructor);\n      this.filterTimesArray();\n    };\n\n    this.state = this.initialState;\n    this.state.show = false;\n    this.state.showInvalidMessage = false;\n    this.state.method = 'post';\n    this.lessonChange = this.lessonChange.bind(this);\n    this.submitLesson = this.submitLesson.bind(this);\n  }\n\n  componentDidMount() {\n    const idLesson = +this.props.match.params.id;\n\n    if (idLesson) {\n      this.findLessonById(idLesson);\n    }\n\n    this.findAllStudents();\n    this.findAllInstructors();\n    this.setArrays();\n  }\n\n  arrayWithHours() {\n    var arr = [],\n        i,\n        j;\n\n    for (i = 9; i < 21; i++) {\n      arr.push(i + \":00\");\n    }\n\n    return arr;\n  }\n\n  addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  getDateArray(start, end) {\n    var arr = new Array();\n    var dt = new Date(start);\n\n    while (dt < end) {\n      var dd = dt.getDate();\n      var mm = dt.getMonth() + 1;\n      var yyyy = dt.getFullYear();\n\n      if (dd < 10) {\n        dd = '0' + dd;\n      }\n\n      if (mm < 10) {\n        mm = '0' + mm;\n      }\n\n      var fullDate = mm + '-' + dd + '-' + yyyy;\n      arr.push(fullDate);\n      dt.setDate(dt.getDate() + 1);\n    }\n\n    return arr;\n  }\n\n  getNrStudArray() {\n    var arr = new Array();\n\n    for (var i = 1; i < 6; ++i) {\n      arr.push(i);\n    }\n\n    return arr;\n  }\n\n  getHowLongArray() {\n    var arr = new Array();\n\n    for (var i = 1; i < 4; ++i) {\n      arr.push(i);\n    }\n\n    return arr;\n  }\n\n  setArrays() {\n    this.state.dates.push('Select Date');\n    this.state.times.push('Select Hour');\n    this.state.howLongTable.push('Select How Long');\n    this.state.nrStudTable.push('Select Nr of Students');\n    this.setState({\n      dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 7))),\n      times: this.state.times.concat(this.arrayWithHours()),\n      howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n      nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n    });\n\n    if (this.state.id) {\n      this.filterTimesArray();\n    }\n  } //leave only free hours - when instructor does not have other lessons\n  //this doesn't check if student has other lessons\n\n\n  render() {\n    const {\n      /*student, instructor,*/\n      date,\n      time,\n      howLong,\n      nrStudents\n    } = this.state;\n    const instructor = this.props.instructor;\n    const student = this.props.student;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.show ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SuccessToast, {\n      show: this.state.show,\n      message: this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\",\n      type: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"display\": this.state.showInvalidMessage ? \"block\" : \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(SuccessToast, {\n      show: this.state.showInvalidMessage,\n      message: \"Fill out the required fields.\",\n      type: \"dangerNoSuccess\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: this.state.id ? faEdit : faPlusSquare,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 25\n      }\n    }), \" \", this.state.id ? \"Update Lesson\" : \"Add New Lesson\"), /*#__PURE__*/React.createElement(Form, {\n      onReset: this.resetLesson,\n      onSubmit: this.state.id ? this.updateLesson : this.submitLesson,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridStudent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 37\n      }\n    }, \"Student\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      name: \"student\",\n      value: student,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 37\n      }\n    }, this.state.students.map(student => /*#__PURE__*/React.createElement(\"option\", {\n      key: student.id,\n      value: JSON.stringify(student),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 45\n      }\n    }, student.lastName + \" \" + student.firstName)))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridInstructor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 37\n      }\n    }, \"Instructor\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"instructor\",\n      value: instructor,\n      onChange: this.lessonChangeInstructor,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 37\n      }\n    }, this.state.instructors.filter((item, index) => this.state.instructors.indexOf(item) === index).map(instructor => /*#__PURE__*/React.createElement(\"option\", {\n      key: instructor.id,\n      value: JSON.stringify(instructor),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 49\n      }\n    }, instructor.lastName + \" \" + instructor.firstName))))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridDate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 37\n      }\n    }, \"Date [dd-mm-yyyy]\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"date\",\n      value: date,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      placeholder: \"Select Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 37\n      }\n    }, this.state.dates.map(date => /*#__PURE__*/React.createElement(\"option\", {\n      key: date,\n      value: date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 45\n      }\n    }, date)))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridTime\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 37\n      }\n    }, \"Time\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"time\",\n      value: time,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 37\n      }\n    }, this.state.times.map(time => /*#__PURE__*/React.createElement(\"option\", {\n      key: time,\n      value: time,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 45\n      }\n    }, time))))), /*#__PURE__*/React.createElement(Form.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridHowLong\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 37\n      }\n    }, \"How Long [h]\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"howLong\",\n      value: howLong,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 37\n      }\n    }, this.state.howLongTable.map(howLong => /*#__PURE__*/React.createElement(\"option\", {\n      key: howLong,\n      value: howLong,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 45\n      }\n    }, howLong)))), /*#__PURE__*/React.createElement(Form.Group, {\n      as: Col,\n      controlId: \"formGridNrStudents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 37\n      }\n    }, \"Nr Of Students\"), /*#__PURE__*/React.createElement(Form.Control, {\n      required: true,\n      as: \"select\",\n      autoComplete: \"off\",\n      name: \"nrStudents\",\n      value: nrStudents,\n      onChange: this.lessonChange,\n      className: \"bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 37\n      }\n    }, this.state.nrStudTable.map(nrStudents => /*#__PURE__*/React.createElement(\"option\", {\n      key: nrStudents,\n      value: nrStudents,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 45\n      }\n    }, nrStudents)))))), /*#__PURE__*/React.createElement(Card.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 37\n      }\n    }), \" \", this.state.id ? \"Update\" : \"Submit\"), '      ', /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"secondary\",\n      type: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 37\n      }\n    }), \"  Reset\")), '      ', /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: \"sm\",\n      variant: \"light\",\n      type: \"button\",\n      onClick: this.returnToList.bind(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faArrowLeft,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 37\n      }\n    }), \"  Return\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    //savedStudentObject: state.student,\n    //      studentObject: state.student,\n    //  updatedStudent: state.student.student\n    lesson: state.lesson,\n    instructor: state.instructor,\n    student: state.student\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchAllStudents: (currentPage, size, sortDir) => dispatch(fetchAllStudents(currentPage, size, sortDir)),\n    fetchAllInstructors: (currentPage, size, sortDir) => dispatch(fetchAllInstructors(currentPage, size, sortDir)),\n    saveLesson: lesson => dispatch(saveLesson(lesson)),\n    fetchLesson: lessonId => dispatch(fetchLesson(lessonId)),\n    updateLesson: lesson => dispatch(updateLesson(lesson))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Lesson.js"],"names":["React","Form","Card","Col","Button","faSave","faUndo","faArrowLeft","faEdit","faPlusSquare","faLanguage","FontAwesomeIcon","Link","axios","moment","SuccessToast","Instructor","Student","connect","saveLesson","fetchLesson","updateLesson","fetchAllInstructors","fetchAllStudents","Lesson","Component","constructor","props","initialState","id","date","time","nrStudents","status","howLong","students","instructors","dates","times","nrStudTable","howLongTable","filterTimesArray","get","state","instructor","then","response","data","timesTab","content","map","t","howLongTab","h","i","length","pieces","split","j","tempHour","concat","push","arrayWithHours","setState","filter","e","includes","catch","error","console","findAllStudents","bind","findAllInstructors","findLessonById","idLesson","student","returnToList","history","isValid","lastName","setTimeout","submitLesson","event","preventDefault","lesson","JSON","parse","post","stringify","put","resetLesson","setArrays","lessonChange","target","name","value","lessonChangeInstructor","show","showInvalidMessage","method","componentDidMount","match","params","arr","addDays","days","result","Date","setDate","getDate","getDateArray","start","end","Array","dt","dd","mm","getMonth","yyyy","getFullYear","fullDate","getNrStudArray","getHowLongArray","render","firstName","item","index","indexOf","mapStateToProps","mapDispatchToProps","dispatch","currentPage","size","sortDir","lessonId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\n\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n\n        this.state.method = 'post';\n        this.lessonChange = this.lessonChange.bind(this);\n        this.submitLesson = this.submitLesson.bind(this);\n\n    }\n\n    initialState = {\n        id: '', date: 'Select Date', time: 'Select Hour', nrStudents: 'Select Nr of Students', status: 0, howLong: 'Select How Long',\n        students: [], instructors: [], dates: [], times: [], nrStudTable: [], howLongTable: []\n    //    / instructor: {\n    //         id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n    //     },\n    //     student: {\n    //         id: '', lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n    //     }\n    }\n\n    componentDidMount() {\n        const idLesson = +this.props.match.params.id;\n\n        if (idLesson) {\n            this.findLessonById(idLesson);\n        }\n\n        this.findAllStudents();\n        this.findAllInstructors();\n\n        this.setArrays();\n    };\n\n\n    arrayWithHours() {\n        var arr = [], i, j;\n        for (i = 9; i < 21; i++) {\n            arr.push(i + \":00\");\n        }\n        return arr;\n    };\n\n    addDays(date, days) {\n        var result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    getDateArray(start, end) {\n        var arr = new Array();\n        var dt = new Date(start);\n        while (dt < end) {\n            var dd = dt.getDate();\n            var mm = dt.getMonth() + 1;\n            var yyyy = dt.getFullYear();\n            if (dd < 10) {\n                dd = '0' + dd;\n            }\n            if (mm < 10) {\n                mm = '0' + mm;\n            }\n            var fullDate = mm + '-' + dd + '-' + yyyy;\n            arr.push(fullDate);\n            dt.setDate(dt.getDate() + 1);\n        }\n        return arr;\n    }\n\n    getNrStudArray() {\n        var arr = new Array();\n        for (var i = 1; i < 6; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    getHowLongArray() {\n        var arr = new Array();\n        for (var i = 1; i < 4; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    setArrays() {\n        this.state.dates.push('Select Date');\n        this.state.times.push('Select Hour');\n        this.state.howLongTable.push('Select How Long');\n        this.state.nrStudTable.push('Select Nr of Students');\n        this.setState({\n            dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 7))),\n            times: this.state.times.concat(this.arrayWithHours()),\n            howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n            nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n        });\n        if (this.state.id) {\n            this.filterTimesArray();\n        }\n    }\n\n    //leave only free hours - when instructor does not have other lessons\n    //this doesn't check if student has other lessons\n    filterTimesArray = () => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date)\n            .then(response => {\n                if (response.data != null) {\n                    //save when the lessons start \n                    let timesTab = response.data.content;\n                    timesTab = timesTab.map(t => t.time);\n\n                    //save how long they take\n                    let howLongTab = response.data.content;\n                    howLongTab = howLongTab.map(h => h.howLong);\n\n                    //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n                    for (let i = 0; i < howLongTab.length; ++i) {\n                        if (howLongTab[i] > 1) {\n                            var pieces = timesTab[i].split(':');\n\n                            for (var j = 1; j < howLongTab[i]; ++j) {\n                                ++pieces[0];\n                                var tempHour = pieces[0] + \":00\";\n                                timesTab = timesTab.concat(tempHour)\n                            }\n                        }\n                    }\n\n                    this.state.times = [];\n                    this.state.times.push('Select Hour');\n                    this.state.times = this.state.times.concat(this.arrayWithHours());\n\n                    this.setState({\n                        times: this.state.times.filter(e => !timesTab.includes(e))\n                    });\n\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n\n    }\n\n    // findAllStudents = () => {\n    //     axios.get(\"http://localhost:8080/student-api/list?page=0&size=999999999&sortBy=paymentStatus&sortDir=desc\")\n    //         .then(response => response.data)\n    //         .then((data) => {\n\n    //             if (!this.state.students.length)\n    //                 this.state.students.push(this.initialState.student);\n    //             this.setState({\n    //                 students: this.state.students.concat(data.content)\n    //             });\n\n    //             if (this.state.id)\n    //                 this.setState({\n    //                     students: this.state.students.filter(student => student.id !== this.state.students[0].id)\n    //                 });\n\n    //         });\n\n    // };\n\n    findAllStudents = () => {\n        this.props.fetchAllStudents.bind(this,1,999999999, \"asc\");\n    }\n\n\n\n    findAllInstructors = () => {\n        // axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=paymentStatus&sortDir=desc\")\n        //     .then(response => response.data)\n        //     .then((data) => {\n        //         if (!this.state.instructors.length)\n        //             this.state.instructors.push(this.state.instructor);\n        //         // this.state.instructors.push(\"Select Instructor\");\n\n        //         this.setState({\n        //             instructors: this.state.instructors.concat(data.content)\n        //         });\n\n        //         if (this.state.id)\n        //             this.setState({\n        //                 instructors: this.state.instructors.filter(instructor => instructor.id !== this.state.instructors[0].id)\n        //             });\n\n        //     });\n        this.props.fetchAllInstructors(1,999999999, \"asc\");\n    };\n\n\n    findLessonById = (idLesson) => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + idLesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({\n                        id: response.data.id,\n                        instructor: response.data.instructor,\n                        student: response.data.student,\n                        date: response.data.date,\n                        time: response.data.time,\n                        howLong: response.data.howLong,\n                        nrStudents: response.data.nrStudents,\n                        status: response.data.status,\n                    });\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n    returnToList = () => {\n        return this.props.history.push(\"/lessons\");\n    };\n\n    isValid = () => {\n        if (this.state.student.lastName === 'Select Student' ||\n            this.state.instructor.lastName === 'Select Instructor' ||\n            this.state.date === 'Select Date' ||\n            this.state.time === 'Select Hour' ||\n            this.state.nrStudents === 'Select Nr of Students' ||\n            this.state.howLong === 'Select How Long') {\n            this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n            setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            return false;\n        }\n        else\n            return true;\n    }\n\n    submitLesson = event => {\n        event.preventDefault();\n        if (!this.isValid()) {\n            return;\n        }\n\n        const lesson = {\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        axios.post(\"http://localhost:8080/lesson-api/list\", lesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({ \"show\": true, \"method\": \"post\" });\n                    setTimeout(() => this.setState({ \"show\": false }), 3000);\n                    setTimeout(() => this.returnToList(), 1000);\n                } else {\n                    this.setState({ \"show\": false });\n                }\n            });\n        this.setState(this.initialState);\n\n    };\n\n    updateLesson = event => {\n        event.preventDefault();\n        if (!this.isValid()) {\n            return;\n        }\n        if (typeof (this.state.instructor) === \"object\")\n            this.state.instructor = JSON.stringify(this.state.instructor);\n\n        if (typeof (this.state.student) === \"object\")\n            this.state.student = JSON.stringify(this.state.student);\n\n        const lesson = {\n            id: this.state.id,\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        axios.put(\"http://localhost:8080/lesson-api/\" + this.state.id, lesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({ \"show\": true, \"method\": \"put\" });\n                    setTimeout(() => this.setState({ \"show\": false }), 3000);\n                    setTimeout(() => this.returnToList(), 1000);\n                } else {\n                    this.setState({ \"show\": false });\n                }\n            });\n        this.setState(this.initialState);\n    }\n\n    resetLesson = () => {\n        this.setState(() => this.initialState);\n        this.findAllInstructors();\n        this.findAllStudents();\n        this.setArrays();\n    };\n\n    lessonChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    };\n\n    lessonChangeInstructor = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n        this.state.instructor = event.target.value;\n        if (typeof (this.state.instructor) === \"string\")\n            this.state.instructor = JSON.parse(this.state.instructor);\n\n        this.filterTimesArray();\n\n    }\n\n    render() {\n        const { /*student, instructor,*/ date, time, howLong, nrStudents } = this.state;\n        const instructor = this.props.instructor;\n        const student = this.props.student;\n\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\"} type=\"success\" />\n                </div>\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Fill out the required fields.\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Lesson\" : \"Add New Lesson\"}\n                    </Card.Header>\n                    <Form onReset={this.resetLesson} onSubmit={this.state.id ? this.updateLesson : this.submitLesson}>\n                        <Card.Body>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridStudent\">\n                                    <Form.Label>Student</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        name=\"student\"\n                                        value={student}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.students.map(student =>\n                                            <option key={student.id} value={JSON.stringify(student)}>\n                                                {student.lastName + \" \" + student.firstName}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridInstructor\">\n                                    <Form.Label>Instructor</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"instructor\"\n                                        value={instructor}\n                                        onChange={this.lessonChangeInstructor}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.instructors.filter((item, index) => this.state.instructors.indexOf(item) === index)\n                                            .map(instructor =>\n                                                <option key={instructor.id} value={JSON.stringify(instructor)}>\n                                                    {instructor.lastName + \" \" + instructor.firstName}\n\n                                                </option>\n                                            )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridDate\">\n                                    <Form.Label>Date [dd-mm-yyyy]</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"date\"\n                                        value={date}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"}\n                                        placeholder=\"Select Date\">\n                                        {this.state.dates.map(date =>\n                                            <option key={date} value={date}>\n                                                {date}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridTime\">\n                                    <Form.Label>Time</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"time\"\n                                        value={time}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.times.map(time =>\n                                            <option key={time} value={time}>\n                                                {time}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridHowLong\">\n                                    <Form.Label>How Long [h]</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"howLong\"\n                                        value={howLong}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"}>\n                                        {this.state.howLongTable.map(howLong =>\n                                            <option key={howLong} value={howLong}>\n                                                {howLong}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridNrStudents\">\n                                    <Form.Label>Nr Of Students</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"nrStudents\"\n                                        value={nrStudents}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.nrStudTable.map(nrStudents =>\n                                            <option key={nrStudents} value={nrStudents}>\n                                                {nrStudents}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"primary\" type=\"submit\">\n                                    <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Submit\"}\n                                </Button>\n                                {'      '}\n\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button>\n                            </div>\n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={this.returnToList.bind()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n        instructor: state.instructor,\n        student: state.student\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllStudents: (currentPage, size, sortDir) => dispatch(fetchAllStudents(currentPage, size, sortDir)),\n        fetchAllInstructors: (currentPage, size, sortDir) => dispatch(fetchAllInstructors(currentPage, size, sortDir)),\n        saveLesson: (lesson) => dispatch(saveLesson(lesson)),\n        fetchLesson: (lessonId) => dispatch(fetchLesson(lessonId)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);"]},"metadata":{},"sourceType":"module"}