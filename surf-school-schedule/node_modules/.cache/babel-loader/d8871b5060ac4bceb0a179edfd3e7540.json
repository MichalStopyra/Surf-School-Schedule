{"ast":null,"code":"import { SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST, DELETE_INSTRUCTOR_REQUEST, INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE, FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS, FETCH_SEARCH_INSTRUCTORS_REQUEST } from \"./instructorTypes\";\nimport axios from 'axios';\nexport const fetchAllInstructors = (currentPage, size, sortDir, addSelect) => {\n  --currentPage;\n  return dispatch => {\n    // dispatch(fetchAllInstructorsRequest());???????????????????????????\n    axios.get(\"http://localhost:8080/instructor-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir).then(response => {\n      if (addSelect) response.data.content.unshift({\n        id: '',\n        lastName: 'Select Instructor',\n        firstName: '',\n        NrHoursWeek: 0,\n        NrHoursFull: 0,\n        WeekWage: 0\n      });\n      dispatch(fetchAllInstructorsSuccess(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n    }).catch(error => {\n      dispatch(instructorFailure(error.message));\n    });\n  };\n};\n\nconst fetchAllInstructorsRequest = () => {\n  return {\n    type: FETCH_ALL_INSTRUCTORS_REQUEST\n  };\n};\n\nexport const saveInstructor = instructor => {\n  return dispatch => {\n    axios.post(\"http://localhost:8080/instructor-api/list\", instructor).then(response => {\n      //  dispatch(instructorSuccess(response.data));\n      dispatch(saveInstructorRequest(instructor));\n    }).catch(error => {\n      console.log(error);\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst saveInstructorRequest = instructor => {\n  return {\n    type: SAVE_INSTRUCTOR_REQUEST,\n    newItem: instructor\n  };\n};\n\nconst fetchInstructorRequest = updatedInstructor => {\n  return {\n    type: FETCH_INSTRUCTOR_REQUEST,\n    updatedInstructor: updatedInstructor\n  };\n};\n\nexport const fetchInstructor = instructorId => {\n  return dispatch => {\n    axios.get(\"http://localhost:8080/instructor-api/\" + instructorId).then(response => {\n      dispatch(fetchInstructorRequest(response.data)); //dispatch(instructorSuccess(response.data.content));\n    }).catch(error => {\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst updateInstructorRequest = instructor => {\n  return {\n    type: UPDATE_INSTRUCTOR_REQUEST,\n    updatedInstructor: instructor\n  };\n};\n\nexport const updateInstructor = instructor => {\n  //console.log(instructor);\n  instructor.NrHoursWeek = 0;\n  instructor.NrHoursFull = 0; //instructor.WeekWage = 0;\n  //console.log(instructor);\n\n  return dispatch => {\n    axios.put(\"http://localhost:8080/instructor-api/\" + instructor.id, instructor).then(response => {\n      dispatch(updateInstructorRequest(instructor)); // dispatch(instructorSuccess(response.data));\n    }).catch(error => {\n      console.log(error);\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst deleteInstructorRequest = instructorId => {\n  return {\n    type: DELETE_INSTRUCTOR_REQUEST,\n    instructorId: instructorId\n  };\n};\n\nexport const deleteInstructor = instructorId => {\n  return dispatch => {\n    axios.delete(\"http://localhost:8080/instructor-api/list/\" + instructorId).then(response => {\n      dispatch(deleteInstructorRequest(instructorId)); //console.log(response);\n\n      dispatch(instructorSuccess(response.data));\n    }).catch(error => {\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst instructorSuccess = instructor => {\n  return {\n    type: INSTRUCTOR_SUCCESS,\n    payload: instructor\n  };\n};\n\nconst instructorFailure = error => {\n  return {\n    type: INSTRUCTOR_FAILURE,\n    payload: error\n  };\n};\n\nconst fetchAllInstructorsSuccess = (instructors, totalPages, totalElements, sortDirection) => {\n  return {\n    type: FETCH_ALL_INSTRUCTORS_SUCCESS,\n    payload: instructors,\n    totalPages: totalPages,\n    totalElements: totalElements,\n    sortDirection: sortDirection\n  };\n};\n\nexport const searchInstructors = (searchedValue, currentPage, instructorsPerPage) => {\n  --currentPage;\n  return dispatch => {\n    axios.get(\"http://localhost:8080/instructor-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + instructorsPerPage).then(response => {\n      dispatch(searchInstructorsRequest(response.data.content));\n    }).catch(error => {\n      dispatch(instructorFailure(error.message));\n    });\n  };\n};\n\nconst searchInstructorsRequest = instructors => {\n  return {\n    type: FETCH_SEARCH_INSTRUCTORS_REQUEST,\n    instructors: instructors\n  };\n};","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/services/instructor/instructorActions.js"],"names":["SAVE_INSTRUCTOR_REQUEST","FETCH_INSTRUCTOR_REQUEST","UPDATE_INSTRUCTOR_REQUEST","DELETE_INSTRUCTOR_REQUEST","INSTRUCTOR_SUCCESS","INSTRUCTOR_FAILURE","FETCH_ALL_INSTRUCTORS_REQUEST","FETCH_ALL_INSTRUCTORS_SUCCESS","FETCH_SEARCH_INSTRUCTORS_REQUEST","axios","fetchAllInstructors","currentPage","size","sortDir","addSelect","dispatch","get","then","response","data","content","unshift","id","lastName","firstName","NrHoursWeek","NrHoursFull","WeekWage","fetchAllInstructorsSuccess","totalPages","totalElements","catch","error","instructorFailure","message","fetchAllInstructorsRequest","type","saveInstructor","instructor","post","saveInstructorRequest","console","log","newItem","fetchInstructorRequest","updatedInstructor","fetchInstructor","instructorId","updateInstructorRequest","updateInstructor","put","deleteInstructorRequest","deleteInstructor","delete","instructorSuccess","payload","instructors","sortDirection","searchInstructors","searchedValue","instructorsPerPage","searchInstructorsRequest"],"mappings":"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","sourcesContent":["import {\n    SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST,\n    DELETE_INSTRUCTOR_REQUEST, INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE,\n    FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS,\n    FETCH_SEARCH_INSTRUCTORS_REQUEST\n} from \"./instructorTypes\";\nimport axios from 'axios';\n\nexport const fetchAllInstructors = (currentPage, size, sortDir, addSelect) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllInstructorsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/instructor-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir)\n            .then(response => {\n                if (addSelect)\n                response.data.content.unshift({\n                             id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n                         });\n                dispatch(fetchAllInstructorsSuccess(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllInstructorsRequest = () => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_REQUEST\n    };\n};\n\nexport const saveInstructor = instructor => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/instructor-api/list\", instructor)\n            .then(response => {\n                //  dispatch(instructorSuccess(response.data));\n                dispatch(saveInstructorRequest(instructor));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst saveInstructorRequest = instructor => {\n    return {\n        type: SAVE_INSTRUCTOR_REQUEST,\n        newItem: instructor\n    };\n};\n\nconst fetchInstructorRequest = updatedInstructor => {\n    return {\n        type: FETCH_INSTRUCTOR_REQUEST,\n        updatedInstructor: updatedInstructor\n    };\n};\n\nexport const fetchInstructor = instructorId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/instructor-api/\" + instructorId)\n            .then(response => {\n                dispatch(fetchInstructorRequest(response.data));\n                //dispatch(instructorSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst updateInstructorRequest = instructor => {\n    return {\n        type: UPDATE_INSTRUCTOR_REQUEST,\n        updatedInstructor: instructor\n    };\n};\n\nexport const updateInstructor = instructor => {\n    //console.log(instructor);\n    instructor.NrHoursWeek = 0;\n    instructor.NrHoursFull = 0;\n    //instructor.WeekWage = 0;\n    //console.log(instructor);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/instructor-api/\" + instructor.id, instructor)\n            .then(response => {\n                dispatch(updateInstructorRequest(instructor));\n\n                // dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst deleteInstructorRequest = instructorId => {\n    return {\n        type: DELETE_INSTRUCTOR_REQUEST,\n        instructorId: instructorId\n    };\n};\n\nexport const deleteInstructor = instructorId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/instructor-api/list/\" + instructorId)\n            .then(response => {\n                dispatch(deleteInstructorRequest(instructorId));\n                //console.log(response);\n                dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\n\nconst instructorSuccess = instructor => {\n    return {\n        type: INSTRUCTOR_SUCCESS,\n        payload: instructor\n    };\n};\n\nconst instructorFailure = error => {\n    return {\n        type: INSTRUCTOR_FAILURE,\n        payload: error\n    };\n};\n\nconst fetchAllInstructorsSuccess = (instructors, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_SUCCESS,\n        payload: instructors,\n        totalPages: totalPages,\n        totalElements: totalElements,\n        sortDirection: sortDirection\n    };\n};\n\nexport const searchInstructors = (searchedValue, currentPage, instructorsPerPage) => {\n    --currentPage;\n    return dispatch => {\n        axios.get(\"http://localhost:8080/instructor-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + instructorsPerPage)\n            .then(response => {\n                dispatch(searchInstructorsRequest(response.data.content));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error.message));\n            });\n    };\n};\n\n\nconst searchInstructorsRequest = instructors => {\n    return {\n        type: FETCH_SEARCH_INSTRUCTORS_REQUEST,\n        instructors: instructors\n    };\n};\n\n\n"]},"metadata":{},"sourceType":"module"}