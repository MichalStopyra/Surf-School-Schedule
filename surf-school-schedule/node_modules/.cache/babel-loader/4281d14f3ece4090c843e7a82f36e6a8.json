{"ast":null,"code":"var _jsxFileName = \"/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Schedule.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport Popover from '../Popover';\nimport InstructorDay from './InstructorDay';\nimport LessonForm from './LessonForm';\nimport './../../style/Style.css';\nimport { connect } from 'react-redux';\nimport { updateLesson, deleteLesson } from '../../services/index';\n\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.changePage = event => {\n      let target = parseInt(event.target.value);\n\n      if (this.state.searchedLesson) {\n        this.searchLesson(target);\n      } else {\n        this.findAllLessons(target);\n      }\n\n      this.setState({\n        [event.target.name]: target\n      });\n    };\n\n    this.prevPage = () => {\n      let prevPage = this.state.currentPage - 1;\n\n      if (this.state.currentPage > 1) {\n        if (this.state.searchedLesson) {\n          this.searchLesson(prevPage);\n        } else {\n          this.findAllLessons(prevPage);\n        }\n      }\n    };\n\n    this.nextPage = () => {\n      let nextPage = this.state.currentPage + 1;\n\n      if (this.state.currentPage < Math.ceil(this.state.totalElements / this.state.lessonsPerPage)) {\n        if (this.state.searchedLesson) {\n          this.searchLesson(nextPage);\n        } else {\n          this.findAllLessons(nextPage);\n        }\n      }\n    };\n\n    this.lessonStatusChange = (lesson, newStatus) => {\n      if (!lesson) return;\n      lesson.status = newStatus;\n      console.log(lesson);\n      this.props.updateLesson(lesson);\n    };\n\n    this.deleteLesson = (lesson, index) => {\n      if (!lesson) return;\n      let i = this.state.instructorDay[index].lessonsThisDay.indexOf(lesson);\n      console.log(this.props);\n      this.props.deleteLesson(lesson.id);\n      console.log(this.props);\n      let tempTab = this.state.instructorDay;\n\n      for (let j = 0; j < lesson.howLong; ++j) tempTab[index].lessonsThisDay[i + j] = null;\n\n      this.setState({\n        instructorDay: tempTab\n      });\n    };\n\n    this.changeShowForm = (instructor, instrIndex, lessonIndex, refresh, lesson) => {\n      if (this.state.showForm) {\n        this.setState({\n          \"showForm\": !this.state.showForm\n        });\n\n        if (refresh) {\n          //added lesson doesn't have id so i need to get it from data base\n          axios.get(\"http://localhost:8080/lesson-api/\" + lesson.instructor.id + \"/\" + lesson.date + \"?page=0&size=1&sortBy=id&sortDir=desc\").then(response => {\n            lesson.id = response.data.content[0].id;\n          }).catch(error => {\n            console.error(\"error: \" + error);\n          });\n          let tempTab = this.state.instructorDay;\n\n          for (let j = 0; j < lesson.howLong; ++j) tempTab[instrIndex].lessonsThisDay[lessonIndex + j] = lesson;\n\n          this.setState({\n            instructorDay: tempTab\n          }); //this.findAllInstructorsAndSchedules(this.state.date);\n        }\n\n        return;\n      } else {\n        this.setState({\n          \"showForm\": !this.state.showForm,\n          \"instructor\": instructor,\n          \"lessonHour\": lessonIndex + 9 + \":00\",\n          \"lessonIndex\": lessonIndex,\n          \"instrIndex\": instrIndex\n        });\n      }\n    };\n\n    this.editLesson = editedLesson => {\n      if (editedLesson) {\n        this.setState({\n          \"editLesson\": editedLesson // \"showForm\": true\n\n        });\n        setTimeout(() => {\n          this.setState({\n            //\"editLesson\": editedLesson,\n            \"showForm\": true\n          });\n        }, 1000);\n      }\n    };\n\n    let today = new Date();\n    this.state = {\n      date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear(),\n      instructor: 'khjghgxchgvjh',\n      lessonHour: '',\n      instructors: [],\n      lessons: [],\n      instructorDay: [],\n      currentPage: 1,\n      lessonsPerPage: 5,\n      searchedLesson: '',\n      sortToggle: false,\n      showForm: false,\n      lessonIndex: '',\n      instrIndex: '',\n      editedLesson: ''\n    }; // this.getFieldColor = this.getFieldColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.findAllInstructorsAndSchedules(this.state.date);\n  }\n\n  findAllInstructorsAndSchedules(date) {\n    var instructors = [];\n    axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=firstName&sortDir=desc\").then(response => response.data).then(data => {\n      instructors = data.content;\n      this.findAllInstructorDay(instructors, date);\n    });\n  }\n\n  findAllInstructorDay(instructors, date) {\n    let allInstrDayTable = [];\n    let tabLength = instructors.length;\n\n    for (let i = 0; i < tabLength; ++i) {\n      let instructor = instructors[i];\n      axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + date).then(response => {\n        if (response.data != null) {\n          let tempInstrDay = {\n            instructor: '',\n            lessonsThisDay: []\n          };\n          tempInstrDay.instructor = instructor; //save when the lessons start \n\n          let tab = response.data.content; //save lessons at specific indexes in array - representing gour of the lesson\n\n          tab.forEach(function (element) {\n            //get hour and create index\n            let time = element.time;\n            time = time.split(\":\")[0]; //first lesson starts at 9 so minus 9 to get index in the array\n\n            let index = time - 9; //if lesson is 1 hour long -add it to array once; if longer than 1 hour - duplicate it in array\n\n            for (let j = 0; j < element.howLong; ++j) {\n              tempInstrDay.lessonsThisDay[index + j] = element;\n            }\n          });\n          allInstrDayTable[i] = tempInstrDay;\n        }\n      });\n    }\n\n    this.setState({\n      instructorDay: allInstrDayTable\n    });\n    setTimeout(() => this.forceUpdate(), 500);\n  } //change status of lessons that have their date in the past and were not given into not given\n\n\n  checkIfLessonInThePast() {\n    let today = new Date();\n\n    for (let i = 0; i < this.state.lessons.length; ++i) {\n      let temp = new Date(this.state.lessons[i].date);\n\n      if (this.state.lessons[i].status === \"To_Give\" && temp < today) {\n        console.log(\"asd\");\n        this.lessonStatusChange(this.state.lessons[i], 3);\n      }\n    }\n  }\n\n  render() {\n    const {\n      instructorDay,\n      instructors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LessonForm, {\n      instructor: this.state.instructor,\n      lessonHour: this.state.lessonHour,\n      date: this.state.date,\n      instrIndex: this.state.instrIndex,\n      lessonIndex: this.state.lessonIndex,\n      editedLesson: this.state.editedLesson,\n      showForm: this.state.showForm,\n      handleClose: (instructor, instrIndex, lessonIndex, refresh, lesson) => this.changeShowForm(instructor, instrIndex, lessonIndex, refresh, lesson),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"float\": \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalendarAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 29\n      }\n    }), \"  \", this.state.date)), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 37\n      }\n    }, \"Instructor\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 37\n      }\n    }, \"9:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 37\n      }\n    }, \"10:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 37\n      }\n    }, \"11:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 37\n      }\n    }, \"12:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 37\n      }\n    }, \"13:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 37\n      }\n    }, \"14:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 37\n      }\n    }, \"15:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 37\n      }\n    }, \"16:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 37\n      }\n    }, \"17:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 37\n      }\n    }, \"18:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 37\n      }\n    }, \"19:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 37\n      }\n    }, \"20:00\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(InstructorDay, {\n      instructorDay: instructorDay,\n      lessonStatusChange: (lesson, newStatus) => this.lessonStatusChange(lesson, newStatus),\n      deleteLesson: (lesson, index) => this.deleteLesson(lesson, index),\n      changeShowForm: (instructor, instrIndex, lessonIndex) => this.changeShowForm(instructor, instrIndex, lessonIndex),\n      editLesson: editedLesson => this.editLesson(editedLesson),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Card.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    //savedStudentObject: state.student,\n    //      studentObject: state.student,\n    //  updatedStudent: state.student.student\n    lesson: state.lesson\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLesson: lesson => dispatch(updateLesson(lesson)),\n    deleteLesson: lesson => dispatch(deleteLesson(lesson))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Schedule);","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Schedule.js"],"names":["React","axios","Card","Table","ButtonGroup","Button","InputGroup","FormControl","FontAwesomeIcon","faCalendarAlt","faTimes","SuccessToast","Popover","InstructorDay","LessonForm","connect","updateLesson","deleteLesson","Schedule","Component","constructor","props","changePage","event","target","parseInt","value","state","searchedLesson","searchLesson","findAllLessons","setState","name","prevPage","currentPage","nextPage","Math","ceil","totalElements","lessonsPerPage","lessonStatusChange","lesson","newStatus","status","console","log","index","i","instructorDay","lessonsThisDay","indexOf","id","tempTab","j","howLong","changeShowForm","instructor","instrIndex","lessonIndex","refresh","showForm","get","date","then","response","data","content","catch","error","editLesson","editedLesson","setTimeout","today","Date","getMonth","getDate","getFullYear","lessonHour","instructors","lessons","sortToggle","componentDidMount","findAllInstructorsAndSchedules","findAllInstructorDay","allInstrDayTable","tabLength","length","tempInstrDay","tab","forEach","element","time","split","forceUpdate","checkIfLessonInThePast","temp","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport axios from 'axios';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport Popover from '../Popover';\nimport InstructorDay from './InstructorDay';\nimport LessonForm from './LessonForm';\n\nimport './../../style/Style.css';\n\nimport { connect } from 'react-redux';\nimport { updateLesson, deleteLesson } from '../../services/index';\n\n\n\nclass Schedule extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let today = new Date();\n        this.state = {\n            date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear(),\n            instructor: 'khjghgxchgvjh',\n            lessonHour: '',\n            instructors: [],\n            lessons: [],\n            instructorDay: [],\n            currentPage: 1,\n            lessonsPerPage: 5,\n            searchedLesson: '',\n            sortToggle: false,\n            showForm: false,\n            lessonIndex: '',\n            instrIndex: '',\n            editedLesson: ''\n        };\n        // this.getFieldColor = this.getFieldColor.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.findAllInstructorsAndSchedules(this.state.date);\n    }\n\n\n    findAllInstructorsAndSchedules(date) {\n        var instructors = [];\n\n        axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=firstName&sortDir=desc\")\n            .then(response => response.data)\n            .then((data) => {\n                instructors = data.content;\n                this.findAllInstructorDay(instructors, date);\n            });\n\n    }\n\n    findAllInstructorDay(instructors, date) {\n        let allInstrDayTable = [];\n        let tabLength = instructors.length;\n        for (let i = 0; i < tabLength; ++i) {\n            let instructor = instructors[i]\n            axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + date)\n                .then(response => {\n                    if (response.data != null) {\n                        let tempInstrDay = {\n                            instructor: '',\n                            lessonsThisDay: []\n                        };\n\n                        tempInstrDay.instructor = instructor;\n                        //save when the lessons start \n                        let tab = response.data.content;\n                        //save lessons at specific indexes in array - representing gour of the lesson\n\n                        tab.forEach(function (element) {\n                            //get hour and create index\n                            let time = element.time;\n                            time = time.split(\":\")[0];\n                            //first lesson starts at 9 so minus 9 to get index in the array\n                            let index = time - 9;\n\n                            //if lesson is 1 hour long -add it to array once; if longer than 1 hour - duplicate it in array\n                            for (let j = 0; j < element.howLong; ++j) {\n                                tempInstrDay.lessonsThisDay[index + j] = element;\n                            }\n                        });\n                        allInstrDayTable[i] = tempInstrDay;\n                    }\n                })\n        }\n        this.setState({\n            instructorDay: allInstrDayTable\n        });\n        setTimeout(() => this.forceUpdate(), 500);\n    }\n\n    //change status of lessons that have their date in the past and were not given into not given\n    checkIfLessonInThePast() {\n        let today = new Date();\n\n        for (let i = 0; i < this.state.lessons.length; ++i) {\n            let temp = new Date(this.state.lessons[i].date);\n            if (this.state.lessons[i].status === \"To_Give\" && temp < today) {\n                console.log(\"asd\");\n                this.lessonStatusChange(this.state.lessons[i], 3)\n            }\n        }\n    };\n\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.state.searchedLesson) {\n            this.searchLesson(target)\n        } else {\n            this.findAllLessons(target);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    prevPage = () => {\n        let prevPage = this.state.currentPage - 1;\n        if (this.state.currentPage > 1) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(prevPage)\n            } else {\n                this.findAllLessons(prevPage);\n            }\n        }\n    };\n\n    nextPage = () => {\n        let nextPage = this.state.currentPage + 1;\n        if (this.state.currentPage < Math.ceil(this.state.totalElements / this.state.lessonsPerPage)) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(nextPage)\n            } else {\n                this.findAllLessons(nextPage);\n            }\n        }\n    };\n\n    lessonStatusChange = (lesson, newStatus) => {\n        if (!lesson)\n            return;\n        lesson.status = newStatus;\n\n        console.log(lesson);\n        this.props.updateLesson(lesson);\n    };\n\n    deleteLesson = (lesson, index) => {\n        if (!lesson)\n            return;\n        let i = this.state.instructorDay[index].lessonsThisDay.indexOf(lesson);\n        console.log(this.props);\n        this.props.deleteLesson(lesson.id);\n\n        console.log(this.props);\n\n        let tempTab = this.state.instructorDay;\n        for (let j = 0; j < lesson.howLong; ++j)\n            tempTab[index].lessonsThisDay[i + j] = null;\n        this.setState({\n            instructorDay: tempTab\n        });\n\n    };\n\n\n    //if close form => change showForm to hide it and update lesson list\n    //if open form => get instructor and hour to pre-fill the form\n    changeShowForm = (instructor, instrIndex, lessonIndex, refresh, lesson) => {\n        if (this.state.showForm) {\n            this.setState({\n                \"showForm\": !this.state.showForm,\n            });\n            if (refresh) {\n                //added lesson doesn't have id so i need to get it from data base\n                axios.get(\"http://localhost:8080/lesson-api/\" + lesson.instructor.id + \"/\" + lesson.date + \"?page=0&size=1&sortBy=id&sortDir=desc\")\n                    .then(response => {\n                        lesson.id = response.data.content[0].id;\n                    })\n                    .catch(error => {\n                        console.error(\"error: \" + error)\n                    });\n                    \n                let tempTab = this.state.instructorDay;\n                for (let j = 0; j < lesson.howLong; ++j)\n                    tempTab[instrIndex].lessonsThisDay[lessonIndex + j] = lesson;\n                this.setState({\n                    instructorDay: tempTab\n                });\n                //this.findAllInstructorsAndSchedules(this.state.date);\n            }\n            return;\n        }\n        else {\n            this.setState({\n                \"showForm\": !this.state.showForm,\n                \"instructor\": instructor,\n                \"lessonHour\": lessonIndex + 9 + \":00\",\n                \"lessonIndex\": lessonIndex,\n                \"instrIndex\": instrIndex\n            });\n        }\n    }\n\n\n    editLesson = (editedLesson) => {\n        if(editedLesson) {\n            this.setState({\n                \"editLesson\": editedLesson,\n                // \"showForm\": true\n            });\n            setTimeout(()=>{\n                this.setState({\n                    //\"editLesson\": editedLesson,\n                     \"showForm\": true\n                });\n            }, 1000)\n        }\n\n\n    }\n\n    render() {\n        const { instructorDay, instructors } = this.state;\n        return (\n            <div>\n                <LessonForm instructor={this.state.instructor} lessonHour={this.state.lessonHour} date={this.state.date}\n                    instrIndex={this.state.instrIndex} lessonIndex={this.state.lessonIndex}\n                    editedLesson = {this.state.editedLesson}\n                    showForm={this.state.showForm} handleClose={(instructor, instrIndex, lessonIndex, refresh, lesson) =>\n                        this.changeShowForm(instructor, instrIndex, lessonIndex, refresh, lesson)} ></LessonForm>\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faCalendarAlt} />  {this.state.date}\n                        </div>\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Instructor</th>\n                                    <th>9:00</th>\n                                    <th>10:00</th>\n                                    <th>11:00</th>\n                                    <th>12:00</th>\n                                    <th>13:00</th>\n                                    <th>14:00</th>\n                                    <th>15:00</th>\n                                    <th>16:00</th>\n                                    <th>17:00</th>\n                                    <th>18:00</th>\n                                    <th>19:00</th>\n                                    <th>20:00</th>\n\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                                <InstructorDay instructorDay={instructorDay}\n                                    lessonStatusChange={(lesson, newStatus) => this.lessonStatusChange(lesson, newStatus)}\n                                    deleteLesson={(lesson, index) => this.deleteLesson(lesson, index)}\n                                    changeShowForm={(instructor, instrIndex, lessonIndex) => this.changeShowForm(instructor, instrIndex, lessonIndex)}\n                                    editLesson={(editedLesson) => this.editLesson(editedLesson)} />\n                            </tbody>\n\n\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n\n\n\n                    </Card.Footer>\n                </Card>\n            </div>\n\n        );\n    }\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateLesson: (lesson) => dispatch(updateLesson(lesson)),\n        deleteLesson: (lesson) => dispatch(deleteLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Schedule);"]},"metadata":{},"sourceType":"module"}