{"ast":null,"code":"import { SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST, DELETE_INSTRUCTOR_REQUEST, INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE, FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS } from \"./instructorTypes\";\nimport axios from 'axios';\nexport const fetchAllInstructors = (currentPage, size, sortDir) => {\n  --currentPage;\n  return dispatch => {\n    // dispatch(fetchAllInstructorsRequest());???????????????????????????\n    axios.get(\"http://localhost:8080/instructor-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir).then(response => {\n      dispatch(fetchAllInstructorsSuccess(response.data.content, response.data.totalPages, response.data.totalElements));\n      console.log(response.data.content);\n    }).catch(error => {\n      dispatch(instructorFailure(error.message));\n    });\n  };\n};\n\nconst fetchAllInstructorsRequest = () => {\n  return {\n    type: FETCH_ALL_INSTRUCTORS_REQUEST\n  };\n};\n\nexport const saveInstructor = instructor => {\n  return dispatch => {\n    axios.post(\"http://localhost:8080/instructor-api/list\", instructor).then(response => {\n      //  dispatch(instructorSuccess(response.data));\n      dispatch(saveInstructorRequest(instructor));\n    }).catch(error => {\n      console.log(error);\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst saveInstructorRequest = instructor => {\n  return {\n    type: SAVE_INSTRUCTOR_REQUEST,\n    newItem: instructor\n  };\n};\n\nconst fetchInstructorRequest = updatedInstructor => {\n  return {\n    type: FETCH_INSTRUCTOR_REQUEST,\n    updatedInstructor: updatedInstructor\n  };\n};\n\nexport const fetchInstructor = instructorId => {\n  return dispatch => {\n    axios.get(\"http://localhost:8080/instructor-api/\" + instructorId).then(response => {\n      dispatch(fetchInstructorRequest(response.data)); //dispatch(instructorSuccess(response.data.content));\n    }).catch(error => {\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst updateInstructorRequest = instructor => {\n  return {\n    type: UPDATE_INSTRUCTOR_REQUEST,\n    updatedInstructor: instructor\n  };\n};\n\nexport const updateInstructor = instructor => {\n  //console.log(instructor);\n  instructor.NrHoursWeek = 0;\n  instructor.NrHoursFull = 0;\n  instructor.WeekWage = 0; //console.log(instructor);\n\n  return dispatch => {\n    axios.put(\"http://localhost:8080/instructor-api/\" + instructor.id, instructor).then(response => {\n      dispatch(updateInstructorRequest(instructor)); // dispatch(instructorSuccess(response.data));\n    }).catch(error => {\n      console.log(error);\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst deleteInstructorRequest = instructorId => {\n  return {\n    type: DELETE_INSTRUCTOR_REQUEST,\n    instructorId: instructorId\n  };\n};\n\nexport const deleteInstructor = instructorId => {\n  return dispatch => {\n    axios.delete(\"http://localhost:8080/instructor-api/list/\" + instructorId).then(response => {\n      dispatch(deleteInstructorRequest(instructorId)); //console.log(response);\n\n      dispatch(instructorSuccess(response.data));\n    }).catch(error => {\n      dispatch(instructorFailure(error));\n    });\n  };\n};\n\nconst instructorSuccess = instructor => {\n  return {\n    type: INSTRUCTOR_SUCCESS,\n    payload: instructor\n  };\n};\n\nconst instructorFailure = error => {\n  return {\n    type: INSTRUCTOR_FAILURE,\n    payload: error\n  };\n};\n\nconst fetchAllInstructorsSuccess = (instructors, totalPages, totalElements) => {\n  return {\n    type: FETCH_ALL_INSTRUCTORS_SUCCESS,\n    payload: instructors,\n    totalPages: totalPages,\n    totalElements: totalElements\n  };\n};","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/services/instructor/instructorActions.js"],"names":["SAVE_INSTRUCTOR_REQUEST","FETCH_INSTRUCTOR_REQUEST","UPDATE_INSTRUCTOR_REQUEST","DELETE_INSTRUCTOR_REQUEST","INSTRUCTOR_SUCCESS","INSTRUCTOR_FAILURE","FETCH_ALL_INSTRUCTORS_REQUEST","FETCH_ALL_INSTRUCTORS_SUCCESS","axios","fetchAllInstructors","currentPage","size","sortDir","dispatch","get","then","response","fetchAllInstructorsSuccess","data","content","totalPages","totalElements","console","log","catch","error","instructorFailure","message","fetchAllInstructorsRequest","type","saveInstructor","instructor","post","saveInstructorRequest","newItem","fetchInstructorRequest","updatedInstructor","fetchInstructor","instructorId","updateInstructorRequest","updateInstructor","NrHoursWeek","NrHoursFull","WeekWage","put","id","deleteInstructorRequest","deleteInstructor","delete","instructorSuccess","payload","instructors"],"mappings":"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","sourcesContent":["\nimport {\n    SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST,\n    DELETE_INSTRUCTOR_REQUEST, INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE,\n    FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS\n} from \"./instructorTypes\";\nimport axios from 'axios';\n\nexport const fetchAllInstructors = (currentPage, size, sortDir) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllInstructorsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/instructor-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir)\n            .then(response => {\n                dispatch(fetchAllInstructorsSuccess(response.data.content, response.data.totalPages, response.data.totalElements));\n                console.log(response.data.content);\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllInstructorsRequest = () => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_REQUEST\n    };\n};\n\nexport const saveInstructor = instructor => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/instructor-api/list\", instructor)\n            .then(response => {\n                //  dispatch(instructorSuccess(response.data));\n                dispatch(saveInstructorRequest(instructor));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst saveInstructorRequest = instructor => {\n    return {\n        type: SAVE_INSTRUCTOR_REQUEST,\n        newItem: instructor\n    };\n};\n\nconst fetchInstructorRequest = updatedInstructor => {\n    return {\n        type: FETCH_INSTRUCTOR_REQUEST,\n        updatedInstructor: updatedInstructor\n    };\n};\n\nexport const fetchInstructor = instructorId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/instructor-api/\" + instructorId)\n            .then(response => {\n                dispatch(fetchInstructorRequest(response.data));\n                //dispatch(instructorSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst updateInstructorRequest = instructor => {\n    return {\n        type: UPDATE_INSTRUCTOR_REQUEST,\n        updatedInstructor: instructor\n    };\n};\n\nexport const updateInstructor = instructor => {\n    //console.log(instructor);\n    instructor.NrHoursWeek = 0;\n    instructor.NrHoursFull = 0;\n    instructor.WeekWage = 0;\n    //console.log(instructor);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/instructor-api/\" + instructor.id, instructor)\n            .then(response => {\n                dispatch(updateInstructorRequest(instructor));\n\n                // dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst deleteInstructorRequest = instructorId => {\n    return {\n        type: DELETE_INSTRUCTOR_REQUEST,\n        instructorId: instructorId\n    };\n};\n\nexport const deleteInstructor = instructorId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/instructor-api/list/\" + instructorId)\n            .then(response => {\n                dispatch(deleteInstructorRequest(instructorId));\n                //console.log(response);\n                dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\n\nconst instructorSuccess = instructor => {\n    return {\n        type: INSTRUCTOR_SUCCESS,\n        payload: instructor\n    };\n};\n\nconst instructorFailure = error => {\n    return {\n        type: INSTRUCTOR_FAILURE,\n        payload: error\n    };\n};\n\nconst fetchAllInstructorsSuccess = (instructors, totalPages, totalElements) => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_SUCCESS,\n        payload: instructors,\n        totalPages: totalPages,\n        totalElements: totalElements,\n    };\n};\n\n\n"]},"metadata":{},"sourceType":"module"}