{"ast":null,"code":"var _jsxFileName = \"/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Schedule.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport Popover from '../Popover';\nimport InstructorDay from './InstructorDay';\nimport './../../style/Style.css';\n\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.deleteLesson = idLesson => {\n      axios.delete(\"http://localhost:8080/lesson-api/list/\" + idLesson).then(response => {\n        if (response.data != null) {\n          this.setState({\n            \"show\": true\n          });\n          setTimeout(() => this.setState({\n            \"show\": false\n          }), 3000);\n          this.setState({\n            lessons: this.state.lessons.filter(lesson => lesson.id !== idLesson)\n          });\n        } else {\n          this.setState({\n            \"show\": false\n          });\n        }\n      });\n    };\n\n    this.changePage = event => {\n      let target = parseInt(event.target.value);\n\n      if (this.state.searchedLesson) {\n        this.searchLesson(target);\n      } else {\n        this.findAllLessons(target);\n      }\n\n      this.setState({\n        [event.target.name]: target\n      });\n    };\n\n    this.prevPage = () => {\n      let prevPage = this.state.currentPage - 1;\n\n      if (this.state.currentPage > 1) {\n        if (this.state.searchedLesson) {\n          this.searchLesson(prevPage);\n        } else {\n          this.findAllLessons(prevPage);\n        }\n      }\n    };\n\n    this.nextPage = () => {\n      let nextPage = this.state.currentPage + 1;\n\n      if (this.state.currentPage < Math.ceil(this.state.totalElements / this.state.lessonsPerPage)) {\n        if (this.state.searchedLesson) {\n          this.searchLesson(nextPage);\n        } else {\n          this.findAllLessons(nextPage);\n        }\n      }\n    };\n\n    this.lessonStatusChange = (instrDay, index, newStatus) => {\n      // lesson.status = newStatus;\n      console.log(instrDay); //this.props.updateLesson(lesson);\n      //this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n    };\n\n    let today = new Date();\n    this.state = {\n      date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear(),\n      instructors: [],\n      lessons: [],\n      instructorDay: [],\n      currentPage: 1,\n      lessonsPerPage: 5,\n      searchedLesson: '',\n      sortToggle: false,\n      show: true\n    }; // this.getFieldColor = this.getFieldColor.bind(this);\n  }\n\n  componentDidMount() {\n    this.findAllInstructorsAndSchedules(this.state.date);\n  }\n\n  findAllInstructorsAndSchedules(date) {\n    var instructors = [];\n    axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=paymentStatus&sortDir=desc\").then(response => response.data).then(data => {\n      instructors = data.content;\n      this.findAllInstructorDay(instructors, date);\n    });\n  }\n\n  findAllInstructorDay(instructors, date) {\n    let allInstrDayTable = [];\n    instructors.forEach(function (instructor) {\n      axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + date).then(response => {\n        if (response.data != null) {\n          let tempInstrDay = {\n            instructor: '',\n            lessonsThisDay: []\n          };\n          tempInstrDay.instructor = instructor.firstName + \" \" + instructor.lastName; //save when the lessons start \n\n          let tab = response.data.content; //save lessons at specific indexes in array - representing gour of the lesson\n\n          tab.forEach(function (element) {\n            //get hour and create index\n            let time = element.time;\n            time = time.split(\":\")[0]; //first lesson starts at 9 so minus 9 to get index in the array\n\n            let index = time - 9; //if lesson is 1 hour long -add it to array once; if longer than 1 hour - duplicate it in array\n\n            for (let j = 0; j < element.howLong; ++j) {\n              tempInstrDay.lessonsThisDay[index + j] = element;\n            }\n          });\n          allInstrDayTable.push(tempInstrDay);\n        }\n      });\n    });\n    this.setState({\n      instructorDay: allInstrDayTable\n    });\n    setTimeout(() => this.forceUpdate(), 500);\n  } //change status of lessons that have their date in the past and were not given into not given\n\n\n  checkIfLessonInThePast() {\n    let today = new Date();\n\n    for (let i = 0; i < this.state.lessons.length; ++i) {\n      let temp = new Date(this.state.lessons[i].date);\n\n      if (this.state.lessons[i].status === \"To_Give\" && temp < today) {\n        console.log(\"asd\");\n        this.lessonStatusChange(this.state.lessons[i], 3);\n      }\n    }\n  }\n\n  render() {\n    const {\n      instructorDay,\n      instructors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border border-dark bg-dark text-white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        \"float\": \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalendarAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 29\n      }\n    }), \"  \", this.state.date)), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 37\n      }\n    }, \"Instructor\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 37\n      }\n    }, \"9:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 37\n      }\n    }, \"10:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 37\n      }\n    }, \"11:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 37\n      }\n    }, \"12:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 37\n      }\n    }, \"13:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 37\n      }\n    }, \"14:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 37\n      }\n    }, \"15:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 37\n      }\n    }, \"16:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 37\n      }\n    }, \"17:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 37\n      }\n    }, \"18:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 37\n      }\n    }, \"19:00\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 37\n      }\n    }, \"20:00\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 29\n      }\n    }, instructorDay.length === 0 ? /*#__PURE__*/React.createElement(\"tr\", {\n      align: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      colSpan: \"13\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 41\n      }\n    }, \" No Lessons for the given date in the Data Base\")) : /*#__PURE__*/React.createElement(InstructorDay, {\n      instructorDay: instructorDay,\n      lessonStatusChange: (instrDay, index, newStatus) => this.lessonStatusChange(instrDay, index, newStatus),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Card.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default Schedule;","map":{"version":3,"sources":["/home/michal/Desktop/projekty/java/SurfSchoolSchedule/SurfSchoolSchedule/surf-school-schedule/src/components/Lesson/Schedule.js"],"names":["React","axios","Card","Table","ButtonGroup","Button","InputGroup","FormControl","FontAwesomeIcon","faCalendarAlt","faTimes","SuccessToast","Popover","InstructorDay","Schedule","Component","constructor","props","deleteLesson","idLesson","delete","then","response","data","setState","setTimeout","lessons","state","filter","lesson","id","changePage","event","target","parseInt","value","searchedLesson","searchLesson","findAllLessons","name","prevPage","currentPage","nextPage","Math","ceil","totalElements","lessonsPerPage","lessonStatusChange","instrDay","index","newStatus","console","log","today","Date","date","getMonth","getDate","getFullYear","instructors","instructorDay","sortToggle","show","componentDidMount","findAllInstructorsAndSchedules","get","content","findAllInstructorDay","allInstrDayTable","forEach","instructor","tempInstrDay","lessonsThisDay","firstName","lastName","tab","element","time","split","j","howLong","push","forceUpdate","checkIfLessonInThePast","i","length","temp","status","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport axios from 'axios';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport Popover from '../Popover';\nimport InstructorDay from './InstructorDay';\n\nimport './../../style/Style.css';\n\n\nclass Schedule extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let today = new Date();\n        this.state = {\n            date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear(),\n            instructors: [],\n            lessons: [],\n            instructorDay: [],\n            currentPage: 1,\n            lessonsPerPage: 5,\n            searchedLesson: '',\n            sortToggle: false,\n            show: true\n        };\n        // this.getFieldColor = this.getFieldColor.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.findAllInstructorsAndSchedules(this.state.date);\n    }\n\n\n    findAllInstructorsAndSchedules(date) {\n        var instructors = [];\n\n        axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=paymentStatus&sortDir=desc\")\n            .then(response => response.data)\n            .then((data) => {\n                instructors = data.content;\n                this.findAllInstructorDay(instructors, date);\n            });\n\n    }\n\n    findAllInstructorDay(instructors, date) {\n        let allInstrDayTable = [];\n        instructors.forEach(function (instructor) {\n            axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + date)\n                .then(response => {\n                    if (response.data != null) {\n\n                        let tempInstrDay = {\n                            instructor: '',\n                            lessonsThisDay: []\n                        };\n\n                        tempInstrDay.instructor = instructor.firstName + \" \" + instructor.lastName;\n                        //save when the lessons start \n                        let tab = response.data.content;\n                        //save lessons at specific indexes in array - representing gour of the lesson\n\n                        tab.forEach(function (element) {\n                            //get hour and create index\n                            let time = element.time;\n                            time = time.split(\":\")[0];\n                            //first lesson starts at 9 so minus 9 to get index in the array\n                            let index = time - 9;\n\n                            //if lesson is 1 hour long -add it to array once; if longer than 1 hour - duplicate it in array\n                            for (let j = 0; j < element.howLong; ++j) {\n                                tempInstrDay.lessonsThisDay[index + j] = element;\n                            }\n                        });\n                        allInstrDayTable.push(tempInstrDay);\n                    }\n                })\n        });\n        this.setState({\n            instructorDay: allInstrDayTable\n        });\n        setTimeout(() => this.forceUpdate(), 500);\n    }\n\n    //change status of lessons that have their date in the past and were not given into not given\n    checkIfLessonInThePast() {\n        let today = new Date();\n\n        for (let i = 0; i < this.state.lessons.length; ++i) {\n            let temp = new Date(this.state.lessons[i].date);\n            if (this.state.lessons[i].status === \"To_Give\" && temp < today) {\n                console.log(\"asd\");\n                this.lessonStatusChange(this.state.lessons[i], 3)\n            }\n        }\n    };\n\n\n    deleteLesson = (idLesson) => {\n        axios.delete(\"http://localhost:8080/lesson-api/list/\" + idLesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({ \"show\": true });\n                    setTimeout(() => this.setState({ \"show\": false }), 3000);\n                    this.setState({\n                        lessons: this.state.lessons.filter(lesson => lesson.id !== idLesson)\n                    });\n                } else {\n                    this.setState({ \"show\": false });\n                }\n            });\n    }\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.state.searchedLesson) {\n            this.searchLesson(target)\n        } else {\n            this.findAllLessons(target);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    // firstPage = () => {\n    //     let firstPage = 1;\n    //     if (this.state.currentPage > firstPage) {\n    //         if (this.state.searchedLesson) {\n    //             this.searchLesson(firstPage)\n    //         } else {\n    //             this.findAllLessons(firstPage);\n    //         }\n    //     }\n    // };\n\n    prevPage = () => {\n        let prevPage = this.state.currentPage - 1;\n        if (this.state.currentPage > 1) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(prevPage)\n            } else {\n                this.findAllLessons(prevPage);\n            }\n        }\n    };\n\n    // lastPage = () => {\n    //     // let lessonsLength = this.props.lessonData.lessons.length;\n    //     let lessonsLength = this.state.lessons.length;\n    //     let lastPage = Math.ceil(this.state.totalElements / this.state.lessonsPerPage);\n    //     if (this.state.currentPage < lastPage) {\n    //         if (this.state.searchedLesson) {\n    //             this.searchLesson(lastPage)\n    //         } else {\n    //             this.findAllLessons(lastPage);\n    //         }\n    //     }\n    // };\n\n    nextPage = () => {\n        let nextPage = this.state.currentPage + 1;\n        if (this.state.currentPage < Math.ceil(this.state.totalElements / this.state.lessonsPerPage)) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(nextPage)\n            } else {\n                this.findAllLessons(nextPage);\n            }\n        }\n    };\n\n    // searchChange = event => {\n    //     this.setState({\n    //         [event.target.name]: event.target.value\n    //     });\n    // };\n\n    // cancelSearch = () => {\n    //     this.setState({ \"searchedLesson\": '' })\n    // };\n\n    // sortData = () => {\n    //     this.setState(state => ({\n    //         sortToggle: !state.sortToggle\n    //     }));\n\n    //     this.findAllLessons(this.state.currentPage);\n    // }\n\n    // searchLesson = (currentPage) => {\n    //     currentPage -= 1;\n    //     axios.get(\"http://localhost:8080/lesson-api/search/\" + this.state.searchedLesson + \"?page=\" + currentPage + \"&size=\" + this.state.lessonsPerPage)\n    //         .then(response => response.data)\n    //         .then((data) => {\n    //             this.setState({\n    //                 lessons: data.content,\n    //                 totalPages: data.totalPages,\n    //                 totalElements: data.totalElements,\n    //                 currentPage: data.number + 1\n    //             });\n    //         });\n    // }\n\n    // lessonStatusChange = (lesson, newStatus) => {\n    //     lesson.status = newStatus;\n    //     axios.put(\"http://localhost:8080/lesson-api/\" + lesson.id, lesson)\n    //         .then(response => {\n    //             if (response.data != null) {\n    //                 // this.setState({ \"show\": true, \"method\": \"put\" });\n    //                 // setTimeout(() => this.setState({ \"show\": false }), 3000);\n    //                 // setTimeout(() => this.returnToList(), 1000);\n    //                 console.log(\"success\");\n    //             } else {\n    //                 console.log(\":(\");\n    //                 // this.setState({ \"show\": false });\n    //             }\n    //         });\n    //     console.log(this);\n    //     this.findAllLessons(this.state.currentPage);\n    //     this.findAllLessons(this.state.currentPage);\n\n    // }\n\n\n    // returnRow = (instructor) => {\n    //     axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + this.state.date)\n    //         .then(response => {\n    //             if (response.data != null) {\n    //                 //save when the lessons start \n    //                 let timesTab = response.data.content;\n    //                 timesTab = timesTab.map(t => t.time);\n\n    //                 //save how long they take\n    //                 let howLongTab = response.data.content;\n    //                 howLongTab = howLongTab.map(h => h.howLong);\n\n    //                 //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n    //                 for (let i = 0; i < howLongTab.length; ++i) {\n    //                     if (howLongTab[i] > 1) {\n    //                         var pieces = timesTab[i].split(':');\n\n    //                         for (var j = 1; j < howLongTab[i]; ++j) {\n    //                             ++pieces[0];\n    //                             var tempHour = pieces[0] + \":00\";\n    //                             timesTab = timesTab.concat(tempHour)\n    //                         }\n    //                     }\n    //                 }\n\n    //                 return (\n    //                     <tr>\n\n    //                         <td>{instructor.firstName + \" \" + instructor.lastName}</td>\n    //                         <td>{this.returnLesson(\"9:00\")}</td>\n    //                         <td>{this.returnLesson(\"10:00\")}</td>\n    //                         <td>{this.returnLesson(\"11:00\")}</td>\n    //                         <td>{this.returnLesson(\"12:00\")}</td>\n    //                         <td>{this.returnLesson(\"13:00\")}</td>\n    //                         <td>{this.returnLesson(\"14:00\")}</td>\n    //                         <td>{this.returnLesson(\"15:00\")}</td>\n    //                         <td>{this.returnLesson(\"16:00\")}</td>\n    //                         <td>{this.returnLesson(\"17:00\")}</td>\n    //                         <td>{this.returnLesson(\"18:00\")}</td>\n    //                         <td>{this.returnLesson(\"19:00\")}</td>\n    //                         <td>{this.returnLesson(\"20:00\")}</td>\n    //                     </tr>\n\n    //                 );\n    //             }\n    //         })\n    // };\n\n\n    // findLessonByIdAndUpdate = () => {\n\n    //     this.props.fetchStudent(idStudent);\n    //     setTimeout(() => {\n\n    //         let student = this.props.student.student;\n    //         if (student != null) {\n    //             this.setState({\n    //                 id: student.id,\n    //                 lastName: student.lastName,\n    //                 firstName: student.firstName,\n    //                 idCardNr: student.idCardNr,\n    //                 telNr: student.telNr,\n    //                 paymentStatus: student.paymentStatus,\n    //                 lessonHours: student.lessonHours,\n    //                 unpaidLessons: student.unpaidLessons,\n    //                 moneyOwing: student.moneyOwing,\n    //                 moneyInAdvance: student.moneyInAdvance\n    //             });\n    //         }\n    //     }, 1000);\n    // };\n\n\n    lessonStatusChange = (instrDay, index, newStatus) => {\n       // lesson.status = newStatus;\n\n       console.log(instrDay);\n        //this.props.updateLesson(lesson);\n        //this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n    };\n\n    render() {\n        const { instructorDay, instructors } = this.state;\n\n        return (\n            <div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faCalendarAlt} />  {this.state.date}\n                        </div>\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Instructor</th>\n                                    <th>9:00</th>\n                                    <th>10:00</th>\n                                    <th>11:00</th>\n                                    <th>12:00</th>\n                                    <th>13:00</th>\n                                    <th>14:00</th>\n                                    <th>15:00</th>\n                                    <th>16:00</th>\n                                    <th>17:00</th>\n                                    <th>18:00</th>\n                                    <th>19:00</th>\n                                    <th>20:00</th>\n\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {instructorDay.length === 0 ?\n                                    <tr align=\"center\">\n                                        <td colSpan=\"13\"> No Lessons for the given date in the Data Base</td>\n                                    </tr> :\n                                    <InstructorDay instructorDay={instructorDay}\n                                        lessonStatusChange={(instrDay, index, newStatus) => this.lessonStatusChange(instrDay, index, newStatus)} />\n\n                                }\n                            </tbody>\n\n\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n\n\n\n                    </Card.Footer>\n                </Card>\n            </div>\n\n        );\n    }\n\n\n}\n\nexport default Schedule;\n"]},"metadata":{},"sourceType":"module"}