{"version":3,"sources":["components/NavigationBar.js","components/Footer.js","components/Welcome.js","components/SuccessToast.js","services/instructor/instructorActions.js","services/instructor/instructorTypes.js","services/student/studentActions.js","services/student/studentTypes.js","services/lesson/lessonActions.js","services/lesson/lessonTypes.js","services/priceTable/priceTableActions.js","services/priceTable/priceTableTypes.js","components/Student/Student.js","components/Student/StudentList.js","components/Instructor/Instructor.js","components/Instructor/InstructorList.js","components/Lesson/Lesson.js","components/Lesson/LessonList.js","components/Popover.js","components/Lesson/InstructorDay.js","components/Lesson/LessonForm.js","components/Lesson/Schedule.js","components/PriceTable/PriceTable.js","components/PriceTable/PriceTableList.js","components/Student/StudentLessonsList.js","components/Student/StudentSettle.js","components/Instructor/InstructorSettle.js","App.js","serviceWorker.js","services/instructor/instructorReducer.js","services/student/studentReducer.js","services/lesson/lessonReducer.js","services/priceTable/priceTableReducer.js","services/rootReducer.js","services/store.js","index.js","logo.svg"],"names":["NavigationBar","Navbar","bg","variant","Brand","href","Nav","className","to","Component","Welcome","props","Jumbotron","heading","footer","SuccessToast","style","this","show","position","top","right","zIndex","boxShadow","Toast","type","Header","closeButton","Body","message","React","fetchAllInstructors","currentPage","size","sortDir","addSelect","dispatch","axios","get","then","response","data","content","unshift","id","lastName","firstName","NrHoursWeek","NrHoursFull","WeekWage","fetchAllInstructorsSuccess","totalPages","totalElements","catch","error","instructorFailure","saveInstructorRequest","instructor","newItem","fetchInstructor","instructorId","updatedInstructor","updateInstructor","put","updateInstructorRequest","console","log","instructorSuccess","payload","instructors","sortDirection","searchInstructorsRequest","fetchAllStudents","addedStudent","fetchAllStudentsRequest","studentFailure","students","saveStudentRequest","student","fetchStudent","studentId","updatedStudent","updateStudent","updateStudentRequest","studentSuccess","searchStudentsRequest","fetchAllLessonsRequest","lessons","saveLesson","lesson","post","saveLessonRequest","lessonFailure","fetchLesson","lessonId","updatedLesson","updateLesson","updateLessonRequest","deleteLesson","delete","deleteLessonRequest","lessonSuccess","searchLessons","searchedValue","lessonsPerPage","searchLessonsRequest","fetchAllLessonsForStudent","fetchAllStudentLessonsRequest","fetchAllPriceTables","firstElement","filter","item","index","self","findIndex","e","fetchAllPriceTablesSuccess","priceTableFailure","savePriceTableRequest","priceTable","fetchPriceTableRequest","updatedPriceTable","priceTableSuccess","priceTables","Student","initialState","idCardNr","telNr","paymentStatus","lessonHours","unpaidLessons","moneyOwing","moneyInAdvance","findStudentById","idStudent","setTimeout","setState","returnToList","history","push","submitStudent","event","preventDefault","state","saveStudent","resetStudent","studentChange","target","name","value","method","bind","match","params","showInvalidMessage","Card","icon","faEdit","faPlusSquare","Form","onReset","onSubmit","Row","Group","as","Col","controlId","Label","Control","required","autoComplete","onChange","placeholder","Footer","Button","faSave","faUndo","onClick","faArrowLeft","connect","StudentList","deleteStudent","studentsPerPage","changePage","parseInt","searchedStudent","searchStudent","sortToggle","firstPage","prevPage","lastPage","length","Math","ceil","nextPage","searchChange","forceUpdate","cancelSearch","sortData","searchStudents","faUsers","InputGroup","FormControl","width","border","color","textAlign","fontWeight","Append","faSearch","faTimes","Table","striped","bordered","hover","align","colSpan","map","key","ButtonGroup","faWallet","faTrash","faUserPlus","Prepend","disabled","faFastBackward","faStepBackward","faStepForward","faFastForward","deleteStudentRequest","sizePage","Instructor","hourWage","findInstructorById","idInstructor","submitInstructor","saveInstructor","resetInstructor","instructorChange","InstructorList","deleteInstructor","instructorsPerPage","searchedInstructor","searchInstructor","searchInstructors","faChalkboardTeacher","nrHoursWeek","wageWeek","nrHoursFull","deleteInstructorRequest","Lesson","date","time","nrStudents","status","howLong","dates","times","nrStudTable","howLongTable","filterTimesArray","timesTab","t","howLongTab","h","i","pieces","split","j","tempHour","concat","arrayWithHours","includes","findAllStudents","findAllInstructors","findLessonById","idLesson","isValid","submitLesson","JSON","parse","stringify","resetLesson","setArrays","lessonChange","lessonChangeInstructor","arr","days","result","Date","setDate","getDate","start","end","Array","dt","dd","mm","getMonth","fullDate","getFullYear","getDateArray","addDays","getHowLongArray","getNrStudArray","LessonList","fetchAllLessons","searchedLesson","searchLesson","lessonStatusChange","newStatus","checkIfLessonInThePast","yesterday","renderFlag","temp","faCheckSquare","faCalendarPlus","isNotInFuture","OverlayTrigger","trigger","placement","overlay","Popover","Title","Content","faCheck","editLesson","buttonColor","block","changeShowForm","vertical","InstructorDay","getField","instrDay","lessonsThisDay","getFieldColor","tonight","setHours","setMinutes","setSeconds","instructorDay","lessonHour","resetForm","handleClose","instrIndex","lessonIndex","onShowHandle","editedLesson","resetAndCloseForm","showCantCreateLessonMessage","Modal","showForm","onHide","onShow","Schedule","findAllLessons","indexOf","tempTab","newLessonWasAdded","isUpdated","changeDate","addedDays","targetDay","dayName","toLocaleString","weekday","findAllInstructorsAndSchedules","today","findAllInstructorDay","allInstrDayTable","tabLength","tempInstrDay","forEach","element","LessonForm","refresh","isUdpated","faCalendarAlt","faArrowRight","updated","PriceTable","minNrHours","onePPrice","twoPPrice","threePPrice","findPriceTableById","idPriceTable","fetchPriceTable","submitPriceTable","savePriceTable","updatePriceTable","resetPriceTable","priceTableChange","priceTableId","updatePriceTableRequest","PriceTableList","deletePriceTable","faMoneyCheckAlt","deletePriceTableRequest","StudentSettle","showLessonList","onClose","faList","countTotalPrice","tempTotalPrice","priceOneH","howMany1p","howMany2p","howMany3p","discount","totalPrice","countLessons","count1p","count2p","count3p","findAllPriceTables","fullNrOfLessons","fetchPriceTableWithNrOfLessons","setPriceOneH","priceOneHTab","tempPriceTab","customPrice","settleChange","handleCheckboxCustomPriceChange","disableCustomPrice","handleCheckboxDiscountChange","disableDiscount","returnToStudentList","settleStudent","studentLessons","newMoneyInAdvance","newPaymentStatus","listButtonHandle","showSuccessMessage","payForHowMany","StudentLessonsList","Checkbox","InstructorSettle","findWeekInstructorTab","weekInstructorTab","findWeekInstructor","weekInstructor","returnToInstructorList","settleInstructor","beginningDate","endDate","fullNrOfLessonsWeek","nrOfLessons1p","nrOfLessons2p","nrOfLessons3p","weekWage","App","Container","lg","marginTop","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","scope","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reducer","action","rootReducer","combineReducers","instructorReducer","studentReducer","lessonReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.7498c62b.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport default function NavigationBar() {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"\">Surf School Schedule</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Link to={\"\"} className=\"nav-link\">Home</Link>\n                <Link to={\"/students\"} className=\"nav-link\">Students</Link>\n                <Link to={\"/instructors\"} className=\"nav-link\">Instructors</Link>\n                <Link to={\"/schedule\"} className=\"nav-link\">Schedule</Link>\n                <Link to={\"/priceTableList\"} className=\"nav-link\">PriceTable</Link>\n\n                <Link to={\"/lessons\"} className=\"nav-link\">Lessons</Link>\n\n            </Nav>\n\n        </Navbar>\n    );\n}","import React, {Component} from 'react';\n\nimport {Navbar, Container, Col} from 'react-bootstrap';\n\nexport default class Footer extends Component {\n    render() {\n        let fullYear = new Date().getFullYear();\n\n        return (\n            <Navbar fixed=\"bottom\" bg=\"dark\" variant=\"dark\">\n                <Container>\n                    <Col lg={12} className=\"text-center text-muted\">\n                        <div>Surf School Schedule {fullYear}, All Rights Reserved</div>\n                    </Col>\n                </Container>\n            </Navbar>\n        );\n    }\n}","import React from 'react';\n\nimport {Jumbotron} from 'react-bootstrap';\n\nexport default function Welcome(props) {\n    return (\n        <Jumbotron className=\"bg-dark text-white\">\n            <h1>{props.heading}</h1>\n            <blockquote className=\"blockquote mb-0\">\n                <footer className=\"blockquote-footer\">\n                    {props.footer}\n                </footer>\n            </blockquote>\n        </Jumbotron>\n    );\n}","import React, { Component } from 'react';\nimport { Toast } from 'react-bootstrap';\n\nexport default class SuccessToast extends React.Component {\n    render() {\n        const toastCss = {\n            position: 'fixed',\n            top: '10px',\n            right: '10px',\n            zIndex: '1',\n            boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\n        };\n\n        return (\n            <div style={this.props.show ? toastCss : null}>\n                <Toast className={`border text-white ${this.props.type === \"success\" ? \"border-success bg-success\" : \"border-danger bg-danger\"}`} show={this.props.show}>\n                    <Toast.Header className={`text-white ${this.props.type === \"success\" ? \"bg-success\" : \"bg-danger\"}`} closeButton={false}>\n                        <strong className=\"mr-auto\"> {this.props.type === \"dangerNoSuccess\" ? \"Sorry\" : \"Success\"}</strong> :\n                    </Toast.Header>\n                    <Toast.Body>\n                        {this.props.message}\n                    </Toast.Body>\n                </Toast>\n            </div>\n        );\n\n    };\n}","import {\n    SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST,\n    DELETE_INSTRUCTOR_REQUEST, INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE,\n    FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS,\n    FETCH_SEARCH_INSTRUCTORS_REQUEST\n} from \"./instructorTypes\";\nimport axios from 'axios';\n\nexport const fetchAllInstructors = (currentPage, size, sortDir, addSelect) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllInstructorsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/instructor-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir)\n            .then(response => {\n                if (addSelect)\n                response.data.content.unshift({\n                             id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n                         });\n                dispatch(fetchAllInstructorsSuccess(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllInstructorsRequest = () => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_REQUEST\n    };\n};\n\nexport const saveInstructor = instructor => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/instructor-api/list\", instructor)\n            .then(response => {\n                //  dispatch(instructorSuccess(response.data));\n                dispatch(saveInstructorRequest(instructor));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst saveInstructorRequest = instructor => {\n    return {\n        type: SAVE_INSTRUCTOR_REQUEST,\n        newItem: instructor\n    };\n};\n\nconst fetchInstructorRequest = updatedInstructor => {\n    return {\n        type: FETCH_INSTRUCTOR_REQUEST,\n        updatedInstructor: updatedInstructor\n    };\n};\n\nexport const fetchInstructor = instructorId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/instructor-api/\" + instructorId)\n            .then(response => {\n                dispatch(fetchInstructorRequest(response.data));\n                //dispatch(instructorSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst updateInstructorRequest = instructor => {\n    return {\n        type: UPDATE_INSTRUCTOR_REQUEST,\n        updatedInstructor: instructor\n    };\n};\n\nexport const updateInstructor = instructor => {\n    //console.log(instructor);\n    //instructor.NrHoursFull = 0;\n    //instructor.WeekWage = 0;\n    //console.log(instructor);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/instructor-api/\" + instructor.id, instructor)\n            .then(response => {\n                dispatch(updateInstructorRequest(instructor));\n\n                // dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\nconst deleteInstructorRequest = instructorId => {\n    return {\n        type: DELETE_INSTRUCTOR_REQUEST,\n        instructorId: instructorId\n    };\n};\n\nexport const deleteInstructor = instructorId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/instructor-api/list/\" + instructorId)\n            .then(response => {\n                dispatch(deleteInstructorRequest(instructorId));\n                //console.log(response);\n                dispatch(instructorSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error));\n            });\n    };\n};\n\n\nconst instructorSuccess = instructor => {\n    return {\n        type: INSTRUCTOR_SUCCESS,\n        payload: instructor\n    };\n};\n\nconst instructorFailure = error => {\n    return {\n        type: INSTRUCTOR_FAILURE,\n        payload: error\n    };\n};\n\nconst fetchAllInstructorsSuccess = (instructors, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_INSTRUCTORS_SUCCESS,\n        payload: instructors,\n        totalPages: totalPages,\n        totalElements: totalElements,\n        sortDirection: sortDirection\n    };\n};\n\nexport const searchInstructors = (searchedValue, currentPage, instructorsPerPage) => {\n    --currentPage;\n    return dispatch => {\n        axios.get(\"http://localhost:8080/instructor-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + instructorsPerPage)\n            .then(response => {\n                dispatch(searchInstructorsRequest(response.data.content));\n            })\n            .catch(error => {\n                dispatch(instructorFailure(error.message));\n            });\n    };\n};\n\n\nconst searchInstructorsRequest = instructors => {\n    return {\n        type: FETCH_SEARCH_INSTRUCTORS_REQUEST,\n        instructors: instructors\n    };\n};\n\n\n","export const SAVE_INSTRUCTOR_REQUEST = 'SAVE_INSTRUCTOR_REQUEST';\nexport const FETCH_INSTRUCTOR_REQUEST = 'FETCH_INSTRUCTOR_REQUEST';\nexport const UPDATE_INSTRUCTOR_REQUEST = 'UPDATE_INSTRUCTOR_REQUEST';\nexport const DELETE_INSTRUCTOR_REQUEST = 'DELETE_INSTRUCTOR_REQUEST';\nexport const INSTRUCTOR_SUCCESS = 'INSTRUCTOR_SUCCESS';\nexport const INSTRUCTOR_FAILURE = 'INSTRUCTOR_FAILURE';\nexport const FETCH_ALL_INSTRUCTORS_REQUEST = 'FETCH_ALL_INSTRUCTORS_REQUEST';\nexport const FETCH_ALL_INSTRUCTORS_SUCCESS = 'FETCH_ALL_INSTRUCTORS_SUCCESS';\nexport const FETCH_SEARCH_INSTRUCTORS_REQUEST = 'FETCH_SEARCH_INSTRUCTORS_REQUEST';\n","import {\n    SAVE_STUDENT_REQUEST, FETCH_STUDENT_REQUEST, UPDATE_STUDENT_REQUEST,\n    DELETE_STUDENT_REQUEST, STUDENT_SUCCESS, STUDENT_FAILURE,\n    FETCH_ALL_STUDENTS_REQUEST,\n    FETCH_SEARCH_STUDENTS_REQUEST\n} from \"./studentTypes\";\nimport axios from 'axios';\n\nexport const fetchAllStudents = (currentPage, size, sortDir, addedStudent) => {\n    --currentPage;\n    return dispatch => {\n\n        axios.get(\"http://localhost:8080/student-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=paymentStatus&sortDir=\" + sortDir)\n            .then(response => {\n                    if (addedStudent)\n                        response.data.content.unshift(\n                            //  {   id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n                            // }\n                            addedStudent);\n\n                dispatch(fetchAllStudentsRequest(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllStudentsRequest = (students, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_STUDENTS_REQUEST,\n        payload: students,\n        totalPages: totalPages,\n        totalElements: totalElements,\n        sortDirection: sortDirection\n    };\n};\n\nexport const saveStudent = student => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/student-api/list\", student)\n            .then(response => {\n                dispatch(saveStudentRequest(student));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst saveStudentRequest = student => {\n    return {\n        type: SAVE_STUDENT_REQUEST,\n        newItem: student\n    };\n};\n\nconst fetchStudentRequest = updatedStudent => {\n    return {\n        type: FETCH_STUDENT_REQUEST,\n        updatedStudent: updatedStudent\n    };\n};\n\nexport const fetchStudent = studentId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/student-api/\" + studentId)\n            .then(response => {\n                dispatch(fetchStudentRequest(response.data));\n                //dispatch(studentSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst updateStudentRequest = student => {\n    return {\n        type: UPDATE_STUDENT_REQUEST,\n        updatedStudent: student\n    };\n};\n\nexport const updateStudent = student => {\n    //console.log(student);\n    // student.NrHoursWeek = 0;\n    // student.NrHoursFull = 0;\n    // student.WeekWage = 0;\n    //console.log(student);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/student-api/\" + student.id, student)\n            .then(response => {\n                dispatch(updateStudentRequest(student));\n\n                // dispatch(studentSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\nconst deleteStudentRequest = studentId => {\n    return {\n        type: DELETE_STUDENT_REQUEST,\n        studentId: studentId\n    };\n};\n\nexport const deleteStudent = studentId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/student-api/list/\" + studentId)\n            .then(response => {\n                dispatch(deleteStudentRequest(studentId));\n                //console.log(response);\n                dispatch(studentSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error));\n            });\n    };\n};\n\n\nconst studentSuccess = student => {\n    return {\n        type: STUDENT_SUCCESS,\n        payload: student\n    };\n};\n\nconst studentFailure = error => {\n    return {\n        type: STUDENT_FAILURE,\n        payload: error\n    };\n};\n\n\nexport const searchStudents = (searchedValue, currentPage, studentsPerPage) => {\n    --currentPage;\n    return dispatch => {\n        axios.get(\"http://localhost:8080/student-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + studentsPerPage)\n            .then(response => {\n                dispatch(searchStudentsRequest(response.data.content));\n            })\n            .catch(error => {\n                dispatch(studentFailure(error.message));\n            });\n    };\n};\n\n\nconst searchStudentsRequest = students => {\n    return {\n        type: FETCH_SEARCH_STUDENTS_REQUEST,\n        students: students\n    };\n};\n\n\n","export const SAVE_STUDENT_REQUEST = 'SAVE_STUDENT_REQUEST';\nexport const FETCH_STUDENT_REQUEST = 'FETCH_STUDENT_REQUEST';\nexport const UPDATE_STUDENT_REQUEST = 'UPDATE_STUDENT_REQUEST';\nexport const DELETE_STUDENT_REQUEST = 'DELETE_STUDENT_REQUEST';\nexport const STUDENT_SUCCESS = 'STUDENT_SUCCESS';\nexport const STUDENT_FAILURE = 'STUDENT_FAILURE';\nexport const FETCH_ALL_STUDENTS_REQUEST = 'FETCH_ALL_STUDENTS_REQUEST';\nexport const FETCH_SEARCH_STUDENTS_REQUEST = 'FETCH_SEARCH_STUDENTS_REQUEST';\n","import {\n    SAVE_LESSON_REQUEST, FETCH_LESSON_REQUEST, UPDATE_LESSON_REQUEST,\n    DELETE_LESSON_REQUEST, LESSON_SUCCESS, LESSON_FAILURE,\n    FETCH_ALL_LESSONS_REQUEST,\n    FETCH_SEARCH_LESSONS_REQUEST, FETCH_ALL_STUDENT_LESSONS_REQUEST\n} from \"./lessonTypes\";\nimport axios from 'axios';\n\nexport const fetchAllLessons = (currentPage, size, sortDir) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllLessonsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/lesson-api/list?page=\" + currentPage + \"&size=\" + size + \"&sortBy=status&sortDir=\" + sortDir)\n            .then(response => {\n                dispatch(fetchAllLessonsRequest(response.data.content, response.data.totalPages, response.data.totalElements, sortDir));\n            })\n            .catch(error => {\n                dispatch(lessonFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllLessonsRequest = (lessons, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_LESSONS_REQUEST,\n        payload: lessons,\n        totalPages: totalPages,\n        totalElements: totalElements,\n        sortDirection: sortDirection\n    };\n};\n\nexport const saveLesson = lesson => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/lesson-api/list\", lesson)\n            .then(response => {\n                dispatch(saveLessonRequest(lesson));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(lessonFailure(error));\n            });\n    };\n};\n\nconst saveLessonRequest = lesson => {\n    return {\n        type: SAVE_LESSON_REQUEST,\n        newItem: lesson\n    };\n};\n\nconst fetchLessonRequest = updatedLesson => {\n    return {\n        type: FETCH_LESSON_REQUEST,\n        updatedLesson: updatedLesson\n    };\n};\n\nexport const fetchLesson = lessonId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + lessonId)\n            .then(response => {\n                dispatch(fetchLessonRequest(response.data));\n                //dispatch(lessonSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(lessonFailure(error));\n            });\n    };\n};\n\nconst updateLessonRequest = lesson => {\n    return {\n        type: UPDATE_LESSON_REQUEST,\n        updatedLesson: lesson\n    };\n};\n\nexport const updateLesson = lesson => {\n    //console.log(lesson);\n    // lesson.NrHoursWeek = 0;\n    // lesson.NrHoursFull = 0;\n    // lesson.WeekWage = 0;\n    //console.log(lesson);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/lesson-api/\" + lesson.id, lesson)\n            .then(response => {\n                dispatch(updateLessonRequest(lesson));\n\n                // dispatch(lessonSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(lessonFailure(error));\n            });\n    };\n};\n\nconst deleteLessonRequest = lessonId => {\n    return {\n        type: DELETE_LESSON_REQUEST,\n        lessonId: lessonId\n    };\n};\n\nexport const deleteLesson = lessonId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/lesson-api/list/\" + lessonId)\n            .then(response => {\n                dispatch(deleteLessonRequest(lessonId));\n                //console.log(response);\n                dispatch(lessonSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(lessonFailure(error));\n            });\n    };\n};\n\n\nconst lessonSuccess = lesson => {\n    return {\n        type: LESSON_SUCCESS,\n        payload: lesson\n    };\n};\n\nconst lessonFailure = error => {\n    return {\n        type: LESSON_FAILURE,\n        payload: error\n    };\n};\n\n\nexport const searchLessons = (searchedValue, currentPage, lessonsPerPage) => {\n    --currentPage;\n    return dispatch => {\n        axios.get(\"http://localhost:8080/lesson-api/search/\" + searchedValue + \"?page=\" + currentPage + \"&size=\" + lessonsPerPage)\n            .then(response => {\n                dispatch(searchLessonsRequest(response.data.content));\n            })\n            .catch(error => {\n                dispatch(lessonFailure(error.message));\n            });\n    };\n};\n\n\nconst searchLessonsRequest = lessons => {\n    return {\n        type: FETCH_SEARCH_LESSONS_REQUEST,\n        lessons: lessons\n    };\n};\n\nexport const fetchAllLessonsForStudent = (studentId, currentPage, size) => {\n    --currentPage;\n    return dispatch => {\n        // dispatch(fetchAllLessonsRequest());???????????????????????????\n        axios.get(\"http://localhost:8080/lesson-api/studentLessons/\" + studentId + \"?page=\" + currentPage + \"&size=\" + size + \"&sortBy=status\")\n            .then(response => {\n                dispatch(fetchAllStudentLessonsRequest(response.data.content, response.data.totalPages, response.data.totalElements));\n            })\n            .catch(error => {\n                dispatch(lessonFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllStudentLessonsRequest = (lessons, totalPages, totalElements) => {\n    return {\n        type: FETCH_ALL_STUDENT_LESSONS_REQUEST,\n        payload: lessons,\n        totalPages: totalPages,\n        totalElements: totalElements,\n    };\n};\n\n\n","export const SAVE_LESSON_REQUEST = 'SAVE_LESSON_REQUEST';\nexport const FETCH_LESSON_REQUEST = 'FETCH_LESSON_REQUEST';\nexport const UPDATE_LESSON_REQUEST = 'UPDATE_LESSON_REQUEST';\nexport const DELETE_LESSON_REQUEST = 'DELETE_LESSON_REQUEST';\nexport const LESSON_SUCCESS = 'LESSON_SUCCESS';\nexport const LESSON_FAILURE = 'LESSON_FAILURE';\nexport const FETCH_ALL_LESSONS_REQUEST = 'FETCH_ALL_LESSONS_REQUEST';\nexport const FETCH_SEARCH_LESSONS_REQUEST = 'FETCH_SEARCH_LESSONS_REQUEST';\nexport const FETCH_ALL_STUDENT_LESSONS_REQUEST = 'FETCH_ALL_STUDENT_LESSONS_REQUEST';\n\n","import {\n    SAVE_PRICE_TABLE_REQUEST, FETCH_PRICE_TABLE_REQUEST, UPDATE_PRICE_TABLE_REQUEST,\n    DELETE_PRICE_TABLE_REQUEST, PRICE_TABLE_SUCCESS, PRICE_TABLE_FAILURE,\n    FETCH_ALL_PRICE_TABLES_REQUEST, FETCH_ALL_PRICE_TABLES_SUCCESS\n} from \"./priceTableTypes\";\nimport axios from 'axios';\n\nexport const fetchAllPriceTables = (firstElement) => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/priceTable-api/list?page=0&size=9999999&sortBy=minNrHours&sortDir=asc\")\n            .then(response => {\n                if (firstElement) {\n                    response.data.content.unshift(firstElement);\n                    response.data.content = response.data.content.filter((item, index, self) =>\n                        index === self.findIndex((e) => (\n                            e.id === item.id)\n                        ));\n                }\n                dispatch(fetchAllPriceTablesSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(priceTableFailure(error.message));\n            });\n    };\n};\n\nconst fetchAllPriceTablesRequest = () => {\n    return {\n        type: FETCH_ALL_PRICE_TABLES_REQUEST\n    };\n};\n\nexport const savePriceTable = priceTable => {\n    return dispatch => {\n        axios.post(\"http://localhost:8080/priceTable-api/list\", priceTable)\n            .then(response => {\n                //  dispatch(priceTableSuccess(response.data));\n                dispatch(savePriceTableRequest(priceTable));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(priceTableFailure(error));\n            });\n    };\n};\n\nconst savePriceTableRequest = priceTable => {\n    return {\n        type: SAVE_PRICE_TABLE_REQUEST,\n        newItem: priceTable\n    };\n};\n\nconst fetchPriceTableRequest = updatedPriceTable => {\n    return {\n        type: FETCH_PRICE_TABLE_REQUEST,\n        updatedPriceTable: updatedPriceTable\n    };\n};\n\nexport const fetchPriceTable = priceTableId => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/priceTable-api/\" + priceTableId)\n            .then(response => {\n                dispatch(fetchPriceTableRequest(response.data));\n                //dispatch(priceTableSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(priceTableFailure(error));\n            });\n    };\n};\n\n\nexport const fetchPriceTableWithNrOfLessons = fullNrOfLessons => {\n    return dispatch => {\n        axios.get(\"http://localhost:8080/priceTable-api/fullNrOfLessons/\" + fullNrOfLessons)\n            .then(response => {\n\n                dispatch(fetchPriceTableRequest(response.data));\n                //dispatch(priceTableSuccess(response.data.content));\n            })\n            .catch(error => {\n                dispatch(priceTableFailure(error));\n            });\n    };\n};\n\nconst updatePriceTableRequest = priceTable => {\n    return {\n        type: UPDATE_PRICE_TABLE_REQUEST,\n        updatedPriceTable: priceTable\n    };\n};\n\nexport const updatePriceTable = priceTable => {\n    //console.log(priceTable);\n    priceTable.NrHoursWeek = 0;\n    priceTable.NrHoursFull = 0;\n    priceTable.WeekWage = 0;\n    //console.log(priceTable);\n\n    return dispatch => {\n        axios.put(\"http://localhost:8080/priceTable-api/\" + priceTable.id, priceTable)\n            .then(response => {\n                dispatch(updatePriceTableRequest(priceTable));\n\n                // dispatch(priceTableSuccess(response.data));\n            })\n            .catch(error => {\n                console.log(error);\n                dispatch(priceTableFailure(error));\n            });\n    };\n};\n\nconst deletePriceTableRequest = priceTableId => {\n    return {\n        type: DELETE_PRICE_TABLE_REQUEST,\n        priceTableId: priceTableId\n    };\n};\n\nexport const deletePriceTable = priceTableId => {\n    return dispatch => {\n        axios.delete(\"http://localhost:8080/priceTable-api/list/\" + priceTableId)\n            .then(response => {\n                dispatch(deletePriceTableRequest(priceTableId));\n                //console.log(response);\n                dispatch(priceTableSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(priceTableFailure(error));\n            });\n    };\n};\n\n\nconst priceTableSuccess = priceTable => {\n    return {\n        type: PRICE_TABLE_SUCCESS,\n        payload: priceTable\n    };\n};\n\nconst priceTableFailure = error => {\n    return {\n        type: PRICE_TABLE_FAILURE,\n        payload: error\n    };\n};\n\nconst fetchAllPriceTablesSuccess = (priceTables, totalPages, totalElements, sortDirection) => {\n    return {\n        type: FETCH_ALL_PRICE_TABLES_SUCCESS,\n        payload: priceTables,\n    };\n};\n\n\n\n\n","export const SAVE_PRICE_TABLE_REQUEST = 'SAVE_PRICE_TABLE_REQUEST';\nexport const FETCH_PRICE_TABLE_REQUEST = 'FETCH_PRICE_TABLE_REQUEST';\nexport const UPDATE_PRICE_TABLE_REQUEST = 'UPDATE_PRICE_TABLE_REQUEST';\nexport const DELETE_PRICE_TABLE_REQUEST = 'DELETE_PRICE_TABLE_REQUEST';\nexport const PRICE_TABLE_SUCCESS = 'PRICE_TABLE_SUCCESS';\nexport const PRICE_TABLE_FAILURE = 'PRICE_TABLE_FAILURE';\nexport const FETCH_ALL_PRICE_TABLES_REQUEST = 'FETCH_ALL_PRICE_TABLES_REQUEST';\nexport const FETCH_ALL_PRICE_TABLES_SUCCESS = 'FETCH_ALL_PRICE_TABLES_SUCCESS';\n","import React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SuccessToast from '../SuccessToast';\n\nimport { connect } from 'react-redux';\nimport { saveStudent, fetchStudent, updateStudent } from '../../services/index';\n\nclass Student extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.method = 'post';\n        this.studentChange = this.studentChange.bind(this);\n        this.submitStudent = this.submitStudent.bind(this);\n    }\n\n    initialState = {\n        id: '', lastName: '', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n    }\n\n    componentDidMount() {\n        const idStudent = +this.props.match.params.id;\n        if (idStudent) {\n            this.findStudentById(idStudent);\n        }\n    };\n\n\n\n    findStudentById = (idStudent) => {\n\n        this.props.fetchStudent(idStudent);\n        setTimeout(() => {\n\n            let student = this.props.student.student;\n            if (student != null) {\n                this.setState({\n                    id: student.id,\n                    lastName: student.lastName,\n                    firstName: student.firstName,\n                    idCardNr: student.idCardNr,\n                    telNr: student.telNr,\n                    paymentStatus: student.paymentStatus,\n                    lessonHours: student.lessonHours,\n                    unpaidLessons: student.unpaidLessons,\n                    moneyOwing: student.moneyOwing,\n                    moneyInAdvance: student.moneyInAdvance\n                });\n            }\n        }, 1000);\n    };\n\n    returnToList = () => {\n        return this.props.history.push(\"/students\");\n    };\n\n\n    submitStudent = event => {\n        event.preventDefault();\n\n        const student = {\n            lastName: this.state.lastName,\n            firstName: this.state.firstName,\n            idCardNr: this.state.idCardNr,\n            telNr: this.state.telNr,\n            paymentStatus: this.state.paymentStatus,\n            lessonHours: this.state.lessonHours,\n            unpaidLessons: this.state.unpaidLessons,\n            moneyOwing: this.state.moneyOwing,\n            moneyInAdvance: this.state.moneyInAdvance\n        };\n\n        this.props.saveStudent(student);\n        setTimeout(() => {\n            if (!this.props.student.error) {\n                this.setState({ \"show\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 1000);\n    };\n\n    updateStudent = event => {\n        event.preventDefault();\n\n        const student = {\n            id: this.state.id,\n            lastName: this.state.lastName,\n            firstName: this.state.firstName,\n            idCardNr: this.state.idCardNr,\n            telNr: this.state.telNr,\n            paymentStatus: this.state.paymentStatus,\n            lessonHours: this.state.lessonHours,\n            unpaidLessons: this.state.unpaidLessons,\n            moneyOwing: this.state.moneyOwing,\n            moneyInAdvance: this.state.moneyInAdvance\n        };\n\n        this.props.updateStudent(student);\n        setTimeout(() => {\n\n            if (!this.props.student.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 2000);\n    }\n\n    resetStudent = () => {\n        this.setState(() => this.initialState);\n    };\n\n    studentChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    render() {\n        const { firstName, lastName, idCardNr, telNr, paymentStatus, lessonHours, unpaidLessons, moneyOwing, moneyInAdvance } = this.state;\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Student Updated Successfully\" : \"Student Saved Successfully.\"} type=\"success\" />\n                </div>\n\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Invalid Data - might be in the data base already\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Student\" : \"Add New Student\"}\n                    </Card.Header>\n                    <Form onReset={this.resetStudent} onSubmit={this.state.id ? this.updateStudent : this.submitStudent}>\n                        <Card.Body>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridLastName\">\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"lastName\"\n                                        value={lastName}\n                                        onChange={this.studentChange}\n                                        placeholder=\"Enter Last Name\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridFirstName\">\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"firstName\"\n                                        value={firstName}\n                                        onChange={this.studentChange}\n                                        placeholder=\" Enter First Name\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n\n                                <Form.Group as={Col} controlId=\"formGridIdCardNr\">\n                                    <Form.Label>ID Card Nr</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        name=\"idCardNr\"\n                                        type=\"test\"\n                                        value={idCardNr}\n                                        onChange={this.studentChange}\n                                        placeholder=\"Enter ID Card Nr\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridPhoneNr\">\n                                    <Form.Label>Phone Nr</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        name=\"telNr\"\n                                        type=\"test\"\n                                        value={telNr}\n                                        onChange={this.studentChange}\n                                        placeholder=\"Enter Phone Nr\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row >\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridMoneyInAdvance\">\n                                    <Form.Label>Payment In Advance</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        name=\"moneyInAdvance\"\n                                        type=\"test\"\n                                        value={moneyInAdvance}\n                                        onChange={this.studentChange}\n                                        placeholder=\"$\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row>\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"primary\" type=\"submit\">\n                                    <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Submit\"}\n                                </Button>\n                                {'      '}\n\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button>\n                            </div>\n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={this.returnToList.bind()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        student: state.student\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveStudent: (student) => dispatch(saveStudent(student)),\n        fetchStudent: (studentId) => dispatch(fetchStudent(studentId)),\n        updateStudent: (student) => dispatch(updateStudent(student))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Student);","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport { Alert, Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faWallet, faEdit, faTrash, faUserPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\n\nimport './../../style/Style.css';\n\n\nimport { connect } from 'react-redux';\nimport { deleteStudent, fetchAllStudents, searchStudents } from './../../services/index';\n\nclass StudentList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            students: [],\n            currentPage: 1,\n            studentsPerPage: 5,\n            searchedStudent: '',\n            sortToggle: true\n        };\n    }\n\n\n    componentDidMount() {\n        this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n    }\n\n    deleteStudent = (idStudent) => {\n\n        this.props.deleteStudent(idStudent);\n\n        setTimeout(() => {\n            if (this.props.student != null) {\n                this.setState({ \"show\": true });\n                setTimeout(() => this.setState({ \"show\": false }), 1000);\n\n            } else {\n                this.setState({ \"show\": false });\n            }\n        }, 1000);\n        this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n\n    };\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.props.student.searchedStudent) {\n            this.searchStudent(target)\n        } else {\n            let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n            this.props.fetchAllStudents(target, this.state.studentsPerPage, this.props.student.sortDirection, null);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    firstPage = () => {\n        let firstPage = 1;\n\n        if (this.props.student.currentPage > firstPage) {\n            this.props.student.currentPage = 1;\n            if (this.props.student.searchedStudent) {\n                this.searchStudent(this.props.student.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n            }\n        }\n    };\n\n    prevPage = () => {\n        if (this.props.student.currentPage > 1) {\n            --this.props.student.currentPage;\n            if (this.props.student.searchedStudent) {\n                this.searchStudent(this.props.student.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n            }\n        }\n    };\n\n    lastPage = () => {\n        let studentsLength = this.state.students.length;\n        let lastPage = Math.ceil(this.props.totalElements / this.state.studentsPerPage);\n        if (this.props.student.currentPage < lastPage) {\n            this.props.student.currentPage = lastPage;\n            if (this.props.student.searchedStudent) {\n                this.searchStudent(this.props.student.currentPage)\n            } else {\n                this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n            }\n        }\n    };\n\n    nextPage = () => {\n        if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.studentsPerPage)) {\n            ++this.props.student.currentPage;\n\n            if (this.props.student.searchedStudent) {\n                this.searchStudent(this.props.student.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n            }\n        }\n    };\n\n    searchChange = event => {\n        this.props.student.searchedStudent = event.target.value;\n        this.forceUpdate();\n    };\n\n    cancelSearch = () => {\n        this.props.student.searchedStudent = '';\n        this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n        this.forceUpdate();\n    };\n\n    sortData = () => {\n       // console.log(this.props.student.sortDirection);\n        if (this.props.student.sortDirection === \"asc\")\n            this.props.student.sortDirection = \"desc\";\n        else\n            this.props.student.sortDirection = \"asc\";\n         //   console.log(this.props.student.sortDirection);\n\n        this.props.fetchAllStudents(this.props.student.currentPage, this.state.studentsPerPage, this.props.student.sortDirection, null);\n\n    }\n\n    searchStudent = (currentPage) => {\n        if (this.props.student.searchedStudent)\n            this.props.searchStudents(this.props.student.searchedStudent, this.props.student.currentPage, this.props.student.studentsPerPage);\n    }\n\n    render() {\n        const searchedStudent = this.props.student.searchedStudent;\n        const totalPages = this.props.student.totalPages;\n        const totalElements = this.props.student.totalElements;\n        const student = this.props.student;\n        const students = this.props.students;\n        const currentPage = this.props.student.currentPage;\n        const sortDirection = this.props.student.sortDirection;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message=\"Student Deleted Successfully.\" type=\"danger\" />\n                </div>\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faUsers} />     Students List\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <FormControl style={searchBoxCss} className={\"bg-dark\"} name=\"searchedStudent\" value={searchedStudent} placeholder = \"Search\"\n                                    onChange={this.searchChange} />\n                                <InputGroup.Append>\n                                    <Button size=\"sm\" variant=\"outline-info\" type=\"button\" onClick = {this.searchStudent}>\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-danger\" type=\"button\" onClick = {this.cancelSearch}>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Last Name</th>\n                                    <th>First Name</th>\n                                    <th>ID Card</th>\n                                    <th>Phone Nr</th>\n                                    <th onClick={this.sortData}>Payment Status<div className={sortDirection === \"asc\" ? \"arrow arrow-down\" : \"arrow arrow-up\"} /> </th>\n                                    <th>Lesson Hrs</th>\n                                    <th>Unpaid Lessons</th>\n                                    <th>Payment in Advance [zl]</th>\n                                    <th>Actions</th>\n\n                                </tr>\n                            </thead>\n\n\n                            <tbody>\n                                {students.length === 0 ?\n                                    <tr align=\"center\">\n                                        <td colSpan=\"10\"> No Students in the Data Base</td>\n                                    </tr> :\n\n                                    students.map((student, index) => (\n                                        <tr key={student.id}>\n                                            <td>{student.lastName}</td>\n                                            <td>{student.firstName}</td>\n                                            <td>{student.idCardNr}</td>\n                                            <td>{student.telNr}</td>\n                                            <td>{student.paymentStatus}</td>\n                                            <td>{student.lessonHours}</td>\n                                            <td>{student.unpaidLessons}</td>\n                                            <td>{student.moneyInAdvance}</td>\n                                            <td>\n                                                <ButtonGroup>\n                                                    <Link to={\"settleStudent/\" + student.id}> <Button size=\"sm\" variant=\"outline-success\"> <FontAwesomeIcon icon={faWallet} /> </Button> </Link>\n                                                    <Link to={\"editStudent/\" + student.id}> <Button size=\"sm\" variant=\"outline-primary\"> <FontAwesomeIcon icon={faEdit} /> </Button> </Link>\n                                                    <Button size=\"sm\" variant=\"outline-danger\" onClick={this.deleteStudent.bind(this, student.id)}> <FontAwesomeIcon icon={faTrash} /> </Button>\n                                                </ButtonGroup>\n                                            </td>\n\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n                        <div style={{ \"float\": \"left\" }}>\n                            <Link to={\"add-student\"} className=\"nav-link\">\n                                <ButtonGroup>\n                                    <Button size=\"lg\" variant=\"outline-light\"> <FontAwesomeIcon icon={faUserPlus} /> </Button>\n                                </ButtonGroup>\n                            </Link>\n                            Page {currentPage} of {totalPages}\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <InputGroup.Prepend>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.firstPage}>\n                                        <FontAwesomeIcon icon={faFastBackward} /> First\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.prevPage}>\n                                        <FontAwesomeIcon icon={faStepBackward} /> Prev\n                                            </Button>\n                                </InputGroup.Prepend>\n                                <FormControl style={pageNumCss} className={\"page-num bg-dark\"} name=\"currentPage\" value={currentPage}\n                                    onChange={this.changePage} />\n                                <InputGroup.Append>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.nextPage}>\n                                        <FontAwesomeIcon icon={faStepForward} /> Next\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.lastPage}>\n                                        <FontAwesomeIcon icon={faFastForward} /> Last\n                                            </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n                    </Card.Footer>\n                </Card>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        student: state.student,\n        students: state.student.students,\n        totalPages: state.student.totalPages,\n        totalElements: state.student.totalElements,\n        currentPage: state.student.currentPage,\n        searchedStudent: state.student.searchedStudent,\n        sortDirection: state.student.sortDirection\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllStudents: (currentPage, size, sortDir, addedStudent) => dispatch(fetchAllStudents(currentPage, size, sortDir, addedStudent)),\n        deleteStudent: (studentId) => dispatch(deleteStudent(studentId)),\n        searchStudents: (searchedStudent, currentPage, sizePage) => dispatch(searchStudents(searchedStudent, currentPage, sizePage))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentList);","import React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faList } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SuccessToast from '../SuccessToast';\n\n\nimport { connect } from 'react-redux';\nimport { saveInstructor, fetchInstructor, updateInstructor } from '../../services/index';\n\nclass Instructor extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n        this.state.method = 'post';\n        this.instructorChange = this.instructorChange.bind(this);\n        this.submitInstructor = this.submitInstructor.bind(this);\n    }\n\n    initialState = {\n        id: '', lastName: '', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0, hourWage: ''\n    }\n\n    componentDidMount() {\n        const idInstructor = +this.props.match.params.id;\n        if (idInstructor) {\n            this.findInstructorById(idInstructor);\n        }\n    };\n\n\n    findInstructorById = (idInstructor) => {\n\n        this.props.fetchInstructor(idInstructor);\n        setTimeout(() => {\n\n            let instructor = this.props.instructor.instructor;\n            if (instructor != null) {\n                this.setState({\n                    id: instructor.id,\n                    lastName: instructor.lastName,\n                    firstName: instructor.firstName,\n                    NrHoursWeek: instructor.NrHoursWeek,\n                    NrHoursFull: instructor.NrHoursFull,\n                    WeekWage: instructor.WeekWage,\n                    hourWage: instructor.hourWage\n                });\n            }\n        }, 1000);\n    };\n\n    returnToList = () => {\n        return this.props.history.push(\"/instructors\");\n    };\n\n    submitInstructor = event => {\n        event.preventDefault();\n\n        const instructor = {\n            lastName: this.state.lastName,\n            firstName: this.state.firstName,\n            NrHoursWeek: this.state.NrHoursWeek,\n            NrHoursFull: this.state.NrHoursFull,\n            WeekWage: this.state.WeekWage,\n            hourWage: this.state.hourWage\n        };\n\n        this.props.saveInstructor(instructor);\n        setTimeout(() => {\n            if (this.props.instructor) {\n                this.setState({ \"show\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 1000);\n    };\n\n    updateInstructor = event => {\n        event.preventDefault();\n\n        const instructor = {\n            id: this.state.id,\n            lastName: this.state.lastName,\n            firstName: this.state.firstName,\n            NrHoursWeek: this.state.NrHoursWeek,\n            NrHoursFull: this.state.NrHoursFull,\n            WeekWage: this.state.WeekWage,\n            hourWage: this.state.hourWage\n        };\n\n        this.props.updateInstructor(instructor);\n        setTimeout(() => {\n\n            if (!this.props.instructor.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 2000);\n    }\n\n    resetInstructor = () => {\n        this.setState(() => this.initialState);\n    };//??????????????????????????????????????????????????????????\n\n    instructorChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };//?????????????????????????????????????????????????\n\n    render() {\n        const { firstName, lastName, hourWage } = this.state;\n        const idInstructor = +this.props.match.params.id;\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Instructor Updated Successfully\" : \"Instructor Saved Successfully.\"} type=\"success\" />\n                </div>\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Invalid Data - might be in the data base already\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={idInstructor ? faEdit : faPlusSquare} /> {idInstructor ? \"Update Instructor\" : \"Add New Instructor\"}\n                    </Card.Header>\n                    <Form onReset={this.resetInstructor} onSubmit={idInstructor ? this.updateInstructor : this.submitInstructor}>\n                        <Card.Body>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridLastName\">\n                                    <Form.Label>Last Name</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"lastName\"\n                                        value={lastName}\n                                        onChange={this.instructorChange}\n                                        placeholder=\"Enter Last Name\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridFirstName\">\n                                    <Form.Label>First Name</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"firstName\"\n                                        value={firstName}\n                                        onChange={this.instructorChange}\n                                        placeholder=\" Enter First Name\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Group as={Col} controlId=\"formGridHourWage\">\n                                    <Form.Label>Hour's Wage</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"hourWage\"\n                                        value={hourWage}\n                                        onChange={this.instructorChange}\n                                        placeholder=\" Enter Week's Wage\"\n                                        className={\"bg-dark text-white\"} />\n                            </Form.Group>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"primary\" type=\"submit\">\n                                    <FontAwesomeIcon icon={faSave} /> {idInstructor ? \"Update\" : \"Submit\"}\n                                </Button>\n                                {'      '}\n\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button>\n                            </div>\n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={this.returnToList.bind()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        //savedInstructorObject: state.instructor,\n        //      instructorObject: state.instructor,\n        //  updatedInstructor: state.instructor.instructor\n        instructor: state.instructor\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveInstructor: (instructor) => dispatch(saveInstructor(instructor)),\n        fetchInstructor: (instructorId) => dispatch(fetchInstructor(instructorId)),\n        updateInstructor: (instructor) => dispatch(updateInstructor(instructor))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Instructor);\n","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Alert, Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChalkboardTeacher, faWallet, faEdit, faTrash, faUserPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\n\nimport './../../style/Style.css';\n\n\nimport { connect } from 'react-redux';\nimport { deleteInstructor, fetchAllInstructors, searchInstructors } from './../../services/index';\n\nclass InstructorList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            instructors: [],\n            currentPage: 1,\n            instructorsPerPage: 5,\n            searchedInstructor: '',\n            sortToggle: true\n        };\n    }\n\n\n    componentDidMount() {\n        this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection);\n    }\n\n    deleteInstructor = (idInstructor) => {\n\n        this.props.deleteInstructor(idInstructor);\n\n        setTimeout(() => {\n            if (this.props.instructor != null) {\n                this.setState({ \"show\": true });\n                setTimeout(() => this.setState({ \"show\": false }), 1000);\n\n            } else {\n                this.setState({ \"show\": false });\n            }\n        }, 1000);\n        this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n\n    };\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.props.instructor.searchedInstructor) {\n            this.searchInstructor(target)\n        } else {\n            let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n            this.props.fetchAllInstructors(target, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    firstPage = () => {\n        let firstPage = 1;\n\n        if (this.props.instructor.currentPage > firstPage) {\n            this.props.instructor.currentPage = 1;\n            if (this.props.instructor.searchedInstructor) {\n                this.searchInstructor(this.props.instructor.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection);\n            }\n        }\n    };\n\n    prevPage = () => {\n        if (this.props.instructor.currentPage > 1) {\n            --this.props.instructor.currentPage;\n            if (this.props.instructor.searchedInstructor) {\n                this.searchInstructor(this.props.instructor.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n            }\n        }\n    };\n\n    lastPage = () => {\n        let instructorsLength = this.state.instructors.length;\n        let lastPage = Math.ceil(this.props.totalElements / this.state.instructorsPerPage);\n        if (this.props.instructor.currentPage < lastPage) {\n            this.props.instructor.currentPage = lastPage;\n            if (this.props.instructor.searchedInstructor) {\n                this.searchInstructor(this.props.instructor.currentPage)\n            } else {\n                this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection);\n            }\n        }\n    };\n\n    nextPage = () => {\n        if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.instructorsPerPage)) {\n            ++this.props.instructor.currentPage;\n\n            if (this.props.instructor.searchedInstructor) {\n                this.searchInstructor(this.props.instructor.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n            }\n        }\n    };\n\n    searchChange = event => {\n        this.props.instructor.searchedInstructor = event.target.value;\n        this.forceUpdate();\n    };\n\n    cancelSearch = () => {\n        this.props.instructor.searchedInstructor = '';\n        this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n        this.forceUpdate();\n    };\n\n    sortData = () => {\n       // console.log(this.props.instructor.sortDirection);\n        if (this.props.instructor.sortDirection === \"asc\")\n            this.props.instructor.sortDirection = \"desc\";\n        else\n            this.props.instructor.sortDirection = \"asc\";\n         //   console.log(this.props.instructor.sortDirection);\n\n        this.props.fetchAllInstructors(this.props.instructor.currentPage, this.state.instructorsPerPage, this.props.instructor.sortDirection, false);\n\n    }\n\n    searchInstructor = (currentPage) => {\n        if (this.props.instructor.searchedInstructor)\n            this.props.searchInstructors(this.props.instructor.searchedInstructor, this.props.instructor.currentPage, this.props.instructor.instructorsPerPage);\n    }\n\n    render() {\n        const searchedInstructor = this.props.instructor.searchedInstructor;\n        const totalPages = this.props.instructor.totalPages;\n        const totalElements = this.props.instructor.totalElements;\n        const instructor = this.props.instructor;\n        const instructors = this.props.instructors;\n        const currentPage = this.props.instructor.currentPage;\n        const sortDirection = this.props.instructor.sortDirection;\n        \n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            <div>\n\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message=\"Instructor Deleted Successfully.\" type=\"danger\" />\n                </div>\n\n                {/* {instructorData.error ?\n                <Alert variant=\"danger\">\n                    {instructorData.error}\n\n                </Alert> : */}\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faChalkboardTeacher} />     Instructors List\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <FormControl style={searchBoxCss} className={\"bg-dark\"} name=\"searchedInstructor\" value={searchedInstructor} placeholder=\"Search\"\n                                    onChange={this.searchChange} />\n                                <InputGroup.Append>\n                                    <Button size=\"sm\" variant=\"outline-info\" type=\"button\" onClick={this.searchInstructor}>\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-danger\" type=\"button\" onClick={this.cancelSearch}>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th onClick={this.sortData}>Last Name<div className={sortDirection ===\"asc\" ? \"arrow arrow-down\" : \"arrow arrow-up\"} /></th>\n                                    <th>First Name</th>\n                                    <th>Hour's Wage [zl]</th>\n                                    <th>Nr Hours Week</th>\n                                    <th>Week's Wage</th>\n                                    <th>Full Nr Hours</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n\n\n                            <tbody>\n                                {instructors.length === 0 ?\n                                    <tr align=\"center\">\n                                        <td colSpan=\"10\"> No Instructors in the Data Base</td>\n                                    </tr> :\n\n                                    instructors.map((instructor, index) => (\n                                        <tr key={instructor.id}>\n                                            <td>{instructor.lastName}</td>\n                                            <td>{instructor.firstName}</td>\n                                            <td>{instructor.hourWage}</td>\n                                            <td>{instructor.nrHoursWeek}</td>\n                                            <td>{instructor.wageWeek}</td>\n                                            <td>{instructor.nrHoursFull}</td>\n                                            <td>\n                                                <ButtonGroup>\n                                                    <Link to={\"settleInstructor/\" + instructor.id}> <Button size=\"sm\" variant=\"outline-success\"> <FontAwesomeIcon icon={faWallet} /> </Button> </Link>\n                                                    <Link to={\"editInstructor/\" + instructor.id}> <Button size=\"sm\" variant=\"outline-primary\"> <FontAwesomeIcon icon={faEdit} /> </Button> </Link>\n                                                    <Button size=\"sm\" variant=\"outline-danger\" onClick={this.deleteInstructor.bind(this, instructor.id)}> <FontAwesomeIcon icon={faTrash} /> </Button>\n                                                </ButtonGroup>\n                                            </td>\n\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n                        <div style={{ \"float\": \"left\" }}>\n                            <Link to={\"add-instructor\"} className=\"nav-link\">\n                                <ButtonGroup>\n                                    <Button size=\"lg\" variant=\"outline-light\"> <FontAwesomeIcon icon={faUserPlus} /> </Button>\n                                </ButtonGroup>\n                            </Link>\n                            Page {currentPage} of {totalPages}\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <InputGroup.Prepend>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.firstPage}>\n                                        <FontAwesomeIcon icon={faFastBackward} /> First\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.prevPage}>\n                                        <FontAwesomeIcon icon={faStepBackward} /> Prev\n                                            </Button>\n                                </InputGroup.Prepend>\n                                <FormControl style={pageNumCss} className={\"page-num bg-dark\"} name=\"currentPage\" value={currentPage}\n                                    onChange={this.changePage} />\n                                <InputGroup.Append>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.nextPage}>\n                                        <FontAwesomeIcon icon={faStepForward} /> Next\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.lastPage}>\n                                        <FontAwesomeIcon icon={faFastForward} /> Last\n                                            </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n                    </Card.Footer>\n                </Card>\n\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        instructor: state.instructor,\n        instructors: state.instructor.instructors,\n        totalPages: state.instructor.totalPages,\n        totalElements: state.instructor.totalElements,\n        currentPage: state.instructor.currentPage,\n        searchedInstructor: state.instructor.searchedInstructor,\n        sortDirection: state.instructor.sortDirection\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllInstructors: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllInstructors(currentPage, size, sortDir, addSelect)),\n        deleteInstructor: (instructorId) => dispatch(deleteInstructor(instructorId)),\n        searchInstructors: (searchedInstructor, currentPage, sizePage) => dispatch(searchInstructors(searchedInstructor, currentPage, sizePage))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstructorList);","import React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\n\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n\n        this.state.method = 'post';\n        this.lessonChange = this.lessonChange.bind(this);\n        this.submitLesson = this.submitLesson.bind(this);\n\n    }\n\n    initialState = {\n        id: '', date: 'Select Date', time: 'Select Hour', nrStudents: 'Select Nr of Students', status: 0, howLong: 'Select How Long',\n        students: [], instructors: [], dates: [], times: [], nrStudTable: [], howLongTable: [],\n        instructor: {\n            id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n        },\n        student: {\n            id: '', lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        }\n    }\n\n    componentDidMount() {\n        const idLesson = +this.props.match.params.id;\n\n\n        this.findAllStudents(!idLesson);\n        this.findAllInstructors(!idLesson);\n\n        if (idLesson) {\n            this.findLessonById(idLesson);\n        }\n\n        this.setArrays();\n    };\n\n\n    arrayWithHours() {\n        var arr = [], i, j;\n        for (i = 9; i < 21; i++) {\n            arr.push(i + \":00\");\n        }\n        return arr;\n    };\n\n    addDays(date, days) {\n        var result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    getDateArray(start, end) {\n        var arr = new Array();\n        var dt = new Date(start);\n        while (dt < end) {\n            var dd = dt.getDate();\n            var mm = dt.getMonth() + 1;\n            var yyyy = dt.getFullYear();\n            if (dd < 10) {\n                dd = '0' + dd;\n            }\n            if (mm < 10) {\n                mm = '0' + mm;\n            }\n            var fullDate = mm + '-' + dd + '-' + yyyy;\n            arr.push(fullDate);\n            dt.setDate(dt.getDate() + 1);\n        }\n        return arr;\n    }\n\n    getNrStudArray() {\n        var arr = new Array();\n        for (var i = 1; i < 6; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    getHowLongArray() {\n        var arr = new Array();\n        for (var i = 1; i < 4; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    setArrays() {\n        this.state.dates.push('Select Date');\n        this.state.times.push('Select Hour');\n        this.state.howLongTable.push('Select How Long');\n        this.state.nrStudTable.push('Select Nr of Students');\n        this.setState({\n            dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 14))),\n            times: this.state.times.concat(this.arrayWithHours()),\n            howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n            nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n        });\n        if (this.state.id) {\n            this.filterTimesArray();\n        }\n    }\n\n    //leave only free hours - when instructor does not have other lessons\n    //this doesn't check if student has other lessons\n    filterTimesArray = () => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date)\n            .then(response => {\n                if (response.data != null) {\n                    //save when the lessons start \n                    let timesTab = response.data.content;\n                    timesTab = timesTab.map(t => t.time);\n\n                    //save how long they take\n                    let howLongTab = response.data.content;\n                    howLongTab = howLongTab.map(h => h.howLong);\n\n                    //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n                    for (let i = 0; i < howLongTab.length; ++i) {\n                        if (howLongTab[i] > 1) {\n                            var pieces = timesTab[i].split(':');\n\n                            for (var j = 1; j < howLongTab[i]; ++j) {\n                                ++pieces[0];\n                                var tempHour = pieces[0] + \":00\";\n                                timesTab = timesTab.concat(tempHour)\n                            }\n                        }\n                    }\n\n                    this.state.times = [];\n                    this.state.times.push('Select Hour');\n                    this.state.times = this.state.times.concat(this.arrayWithHours());\n\n                    this.setState({\n                        times: this.state.times.filter(e => !timesTab.includes(e))\n                    });\n\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n\n    }\n\n\n    findAllStudents = (addSelect) => {\n        if (addSelect) {\n            let selectStudent = {\n                id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n            };\n            this.props.fetchAllStudents(1, 999999999, \"asc\", selectStudent);\n        }\n        else\n            this.props.fetchAllStudents(1, 999999999, \"asc\", null);\n    }\n\n\n\n    findAllInstructors = (addSelect) => {\n        this.props.fetchAllInstructors(1, 999999999, \"asc\", addSelect);\n\n    };\n\n\n    findLessonById = (idLesson) => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + idLesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.props.student.students.unshift(response.data.student);\n                    this.props.instructor.instructors.unshift(response.data.instructor);\n                    this.setState({\n                        id: response.data.id,\n                        instructor: response.data.instructor,\n                        student: response.data.student,\n                        date: response.data.date,\n                        time: response.data.time,\n                        howLong: response.data.howLong,\n                        nrStudents: response.data.nrStudents,\n                        status: response.data.status,\n                    });\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n    returnToList = () => {\n        return this.props.history.push(\"/schedule\");\n    };\n\n    isValid = () => {\n        if (this.state.student.lastName === 'Select Student' ||\n            this.state.instructor.lastName === 'Select Instructor' ||\n            this.state.date === 'Select Date' ||\n            this.state.time === 'Select Hour' ||\n            this.state.nrStudents === 'Select Nr of Students' ||\n            this.state.howLong === 'Select How Long') {\n            this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n            setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            return false;\n        }\n        else\n            return true;\n    }\n\n    submitLesson = event => {\n        event.preventDefault();\n        if (!this.isValid()) {\n            return;\n        }\n\n        const lesson = {\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n        this.props.saveLesson(lesson);\n        setTimeout(() => {\n            if (!this.props.lesson.error) {\n                this.setState({ \"show\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 1000);\n    };\n\n\n    updateLesson = event => {\n        event.preventDefault();\n        if (!this.isValid()) {\n            return;\n        }\n        if (typeof (this.state.instructor) === \"object\")\n            this.state.instructor = JSON.stringify(this.state.instructor);\n\n        if (typeof (this.state.student) === \"object\")\n            this.state.student = JSON.stringify(this.state.student);\n\n        const lesson = {\n            id: this.state.id,\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        this.props.updateLesson(lesson);\n        setTimeout(() => {\n\n            if (!this.props.student.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 2000);\n    }\n\n    resetLesson = () => {\n        this.setState(() => this.initialState);\n        this.findAllInstructors();\n        this.findAllStudents();\n        this.setArrays();\n    };\n\n    lessonChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    };\n\n    lessonChangeInstructor = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n        this.state.instructor = event.target.value;\n        if (typeof (this.state.instructor) === \"string\")\n            this.state.instructor = JSON.parse(this.state.instructor);\n\n        this.filterTimesArray();\n\n    }\n\n    render() {\n        const { student, instructor, date, time, howLong, nrStudents } = this.state;\n        const instructors = this.props.instructor.instructors;\n        const students = this.props.student.students;\n\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\"} type=\"success\" />\n                </div>\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Fill out the required fields.\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={this.state.id ? faEdit : faPlusSquare} /> {this.state.id ? \"Update Lesson\" : \"Add New Lesson\"}\n                    </Card.Header>\n                    <Form onReset={this.resetLesson} onSubmit={this.state.id ? this.updateLesson : this.submitLesson}>\n                        <Card.Body>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridStudent\">\n                                    <Form.Label>Student</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        name=\"student\"\n                                        value={student}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {students.filter((item, index, self) =>\n                                            index === self.findIndex((e) => (\n                                                e.id === item.id)\n                                            ))\n                                            .map(student =>\n                                                <option key={student.id} value={JSON.stringify(student)}>\n                                                    {student.lastName + \" \" + student.firstName}\n                                                </option>\n                                            )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridInstructor\">\n                                    <Form.Label>Instructor</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"instructor\"\n                                        value={instructor}\n                                        onChange={this.lessonChangeInstructor}\n                                        className={\"bg-dark text-white\"} >\n                                        {instructors.filter((item, index, self) =>\n                                            index === self.findIndex((e) => (\n                                                e.id === item.id)\n                                            ))\n                                            .map(instructor =>\n                                                <option key={instructor.id} value={JSON.stringify(instructor)}>\n                                                    {instructor.lastName + \" \" + instructor.firstName}\n\n                                                </option>\n                                            )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridDate\">\n                                    <Form.Label>Date [dd-mm-yyyy]</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"date\"\n                                        value={date}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"}\n                                        placeholder=\"Select Date\">\n                                        {this.state.dates.map(date =>\n                                            <option key={date} value={date}>\n                                                {date}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridTime\">\n                                    <Form.Label>Time</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"time\"\n                                        value={time}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.times.map(time =>\n                                            <option key={time} value={time}>\n                                                {time}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridHowLong\">\n                                    <Form.Label>How Long [h]</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"howLong\"\n                                        value={howLong}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"}>\n                                        {this.state.howLongTable.map(howLong =>\n                                            <option key={howLong} value={howLong}>\n                                                {howLong}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridNrStudents\">\n                                    <Form.Label>Nr Of Students</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"nrStudents\"\n                                        value={nrStudents}\n                                        onChange={this.lessonChange}\n                                        className={\"bg-dark text-white\"} >\n                                        {this.state.nrStudTable.map(nrStudents =>\n                                            <option key={nrStudents} value={nrStudents}>\n                                                {nrStudents}\n                                            </option>\n                                        )}\n                                    </Form.Control>\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"primary\" type=\"submit\">\n                                    <FontAwesomeIcon icon={faSave} /> {this.state.id ? \"Update\" : \"Submit\"}\n                                </Button>\n                                {'      '}\n\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button>\n                            </div>\n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={this.returnToList.bind()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n        instructor: state.instructor,\n        student: state.student\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllStudents: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllStudents(currentPage, size, sortDir, addSelect)),\n        fetchAllInstructors: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllInstructors(currentPage, size, sortDir, addSelect)),\n        saveLesson: (lesson) => dispatch(saveLesson(lesson)),\n        fetchLesson: (lessonId) => dispatch(fetchLesson(lessonId)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUsers, faWallet, faEdit, faTrash, faCalendarPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\n\nimport { connect } from 'react-redux';\nimport { deleteLesson, fetchAllLessons, searchLessons, updateLesson } from './../../services/index';\n\nimport './../../style/Style.css';\n\n\nclass LessonList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lessons: [],\n            currentPage: 1,\n            lessonsPerPage: 5,\n            searchedLesson: '',\n            sortToggle: false\n        };\n    }\n\n    componentDidMount() {\n        this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n        setTimeout(() => {\n            this.checkIfLessonInThePast();\n        }, 1000)\n    }\n\n\n    //change status of lessons that have their date in the past (24 h back) and were not given into not given\n    checkIfLessonInThePast() {\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n\n        let length = this.props.lesson.lessons.length;\n        let renderFlag = false;\n        for (let i = 0; i < length; ++i) {\n            let temp = new Date(this.props.lesson.lessons[i].date);\n            if (this.props.lesson.lessons[i].status === \"To_Give\" && temp < yesterday) {\n                this.lessonStatusChange(this.props.lesson.lessons[i], 3)\n                //flag so that component is not unnecessarily rendered \n                if (!renderFlag)\n                    renderFlag = true;\n            }\n        }\n        if (renderFlag)\n            this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n    };\n\n    deleteLesson = (idLesson) => {\n\n        this.props.deleteLesson(idLesson);\n\n        setTimeout(() => {\n            if (this.props.lesson != null) {\n                this.setState({ \"show\": true });\n                setTimeout(() => this.setState({ \"show\": false }), 1000);\n\n            } else {\n                this.setState({ \"show\": false });\n            }\n        }, 1000);\n        this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n\n    };\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.props.lesson.searchedLesson) {\n            this.searchLesson(target)\n        } else {\n            let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n            this.props.fetchAllLessons(target, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    firstPage = () => {\n        let firstPage = 1;\n\n        if (this.props.lesson.currentPage > firstPage) {\n            this.props.lesson.currentPage = 1;\n            if (this.props.lesson.searchedLesson) {\n                this.searchLesson(this.props.lesson.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n            }\n        }\n    };\n\n    prevPage = () => {\n        if (this.props.lesson.currentPage > 1) {\n            --this.props.lesson.currentPage;\n            if (this.props.lesson.searchedLesson) {\n                this.searchLesson(this.props.lesson.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n            }\n        }\n    };\n\n    lastPage = () => {\n        let lessonsLength = this.state.lessons.length;\n        let lastPage = Math.ceil(this.props.totalElements / this.state.lessonsPerPage);\n        if (this.props.lesson.currentPage < lastPage) {\n            this.props.lesson.currentPage = lastPage;\n            if (this.props.lesson.searchedLesson) {\n                this.searchLesson(this.props.lesson.currentPage)\n            } else {\n                this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n            }\n        }\n    };\n\n    nextPage = () => {\n        if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.lessonsPerPage)) {\n            ++this.props.lesson.currentPage;\n\n            if (this.props.lesson.searchedLesson) {\n                this.searchLesson(this.props.lesson.currentPage)\n            } else {\n                let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n                this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n            }\n        }\n    };\n\n    searchChange = event => {\n        this.props.lesson.searchedLesson = event.target.value;\n        this.forceUpdate();\n    };\n\n    cancelSearch = () => {\n        this.props.lesson.searchedLesson = '';\n        this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n        this.forceUpdate();\n    };\n\n    sortData = () => {\n        if (this.props.lesson.sortDirection === \"asc\")\n            this.props.lesson.sortDirection = \"desc\";\n        else\n            this.props.lesson.sortDirection = \"asc\";\n        this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n\n    }\n\n    searchLesson = (currentPage) => {\n        if (this.props.lesson.searchedLesson)\n            this.props.searchLessons(this.props.lesson.searchedLesson, this.props.lesson.currentPage, this.props.lesson.lessonsPerPage);\n    }\n\n\n    lessonStatusChange = (lesson, newStatus) => {\n        lesson.status = newStatus;\n        this.props.updateLesson(lesson);\n        this.props.fetchAllLessons(this.props.lesson.currentPage, this.state.lessonsPerPage, this.props.lesson.sortDirection);\n    }\n\n\n\n    render() {\n        const searchedLesson = this.props.lesson.searchedLesson;\n        const totalPages = this.props.lesson.totalPages;\n        const totalElements = this.props.lesson.totalElements;\n        const lesson = this.props.lesson;\n        const lessons = this.props.lessons;\n        const currentPage = this.props.lesson.currentPage;\n        const sortDirection = this.props.lesson.sortDirection;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            <div>\n                <div style={{ \"float\": \"right\" }}>\n\n                </div>\n                <Card className={\" bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faUsers} />     Lessons List\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <FormControl style={searchBoxCss} className={\"bg-dark\"} name=\"searchedLesson\" value={searchedLesson} placeholder=\"Search\"\n                                    onChange={this.searchChange} />\n                                <InputGroup.Append>\n                                    <Button size=\"sm\" variant=\"outline-info\" type=\"button\" onClick={this.searchLesson}>\n                                        <FontAwesomeIcon icon={faSearch} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-danger\" type=\"button\" onClick={this.cancelSearch}>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Instructor</th>\n                                    <th>Student</th>\n                                    <th onClick={this.sortData}> Date <div className={this.state.sortToggle ? \"arrow arrow-down\" : \"arrow arrow-up\"} /> </th>\n                                    <th>Time</th>\n                                    <th>How Long [h]</th>\n                                    <th>Nr of Students</th>\n                                    <th>Status</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n\n\n                            <tbody>\n                                {lessons.length === 0 ?\n                                    <tr align=\"center\">\n                                        <td colSpan=\"10\"> No Lessons in the Data Base</td>\n                                    </tr> :\n\n                                    lessons.map(lesson => (\n                                        <tr key={lesson.id}>\n                                            <td>{lesson.instructor.firstName + \" \" + lesson.instructor.lastName}</td>\n                                            <td>{lesson.student.firstName + \" \" + lesson.student.lastName}</td>\n                                            <td>{lesson.date}</td>\n                                            <td>{lesson.time}</td>\n                                            <td>{lesson.howLong}</td>\n                                            <td>{lesson.nrStudents}</td>\n                                            <td>{lesson.status}</td>\n                                            <td>\n                                                <ButtonGroup>\n                                                    <Button size=\"sm\" variant=\"outline-success\" onClick={this.lessonStatusChange.bind(this, lesson, 2)}> <FontAwesomeIcon icon={faCheckSquare} /> </Button>\n                                                    <Link to={\"editLesson/\" + lesson.id}> <Button size=\"sm\" variant=\"outline-primary\"> <FontAwesomeIcon icon={faEdit} /> </Button> </Link>\n                                                    <Button size=\"sm\" variant=\"outline-danger\" onClick={this.deleteLesson.bind(this, lesson.id)}> <FontAwesomeIcon icon={faTrash} /> </Button>\n                                                </ButtonGroup>\n                                            </td>\n\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n                        <div style={{ \"float\": \"left\" }}>\n                            <Link to={\"add-lesson\"} className=\"nav-link\">\n                                <ButtonGroup>\n                                    <Button size=\"lg\" variant=\"outline-light\"> <FontAwesomeIcon icon={faCalendarPlus} /> </Button>\n                                </ButtonGroup>\n                            </Link>\n                            Page {currentPage} of {totalPages === 0 ? 1 : totalPages}\n                        </div>\n\n                        <div style={{ \"float\": \"right\" }}>\n                            <InputGroup size=\"sm\">\n                                <InputGroup.Prepend>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.firstPage}>\n                                        <FontAwesomeIcon icon={faFastBackward} /> First\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === 1 ? true : false}\n                                        onClick={this.prevPage}>\n                                        <FontAwesomeIcon icon={faStepBackward} /> Prev\n                                            </Button>\n                                </InputGroup.Prepend>\n                                <FormControl style={pageNumCss} className={\"page-num bg-dark\"} name=\"currentPage\" value={currentPage}\n                                    onChange={this.changePage} />\n                                <InputGroup.Append>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.nextPage}>\n                                        <FontAwesomeIcon icon={faStepForward} /> Next\n                                            </Button>\n                                    <Button type=\"button\" variant=\"outline-light\" disabled={currentPage === totalPages ? true : false}\n                                        onClick={this.lastPage}>\n                                        <FontAwesomeIcon icon={faFastForward} /> Last\n                                            </Button>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </div>\n\n                    </Card.Footer>\n                </Card>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        lesson: state.lesson,\n        lessons: state.lesson.lessons,\n        totalPages: state.lesson.totalPages,\n        totalElements: state.lesson.totalElements,\n        currentPage: state.lesson.currentPage,\n        searchedLesson: state.lesson.searchedLesson,\n        sortDirection: state.lesson.sortDirection\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllLessons: (currentPage, size, sortDir) => dispatch(fetchAllLessons(currentPage, size, sortDir)),\n        deleteLesson: (lessonId) => dispatch(deleteLesson(lessonId)),\n        searchLessons: (searchedLesson, currentPage, sizePage) => dispatch(searchLessons(searchedLesson, currentPage, sizePage)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LessonList);","import React, { Component } from 'react';\nimport { Popover, Button, OverlayTrigger, ButtonGroup } from 'react-bootstrap';\nimport { faCheck, faTimes, faUserPlus, faEdit} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\n\n\nexport default class SuccessToast extends React.Component {\n\n\n    render() {\n        // const toastCss = {\n        //     position: 'fixed',\n        //     top: '10px',\n        //     right: '10px',\n        //     zIndex: '1',\n        //     boxShadow: '0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19)'\n        // };\n        if (this.props.data && this.props.isNotInFuture) {\n            return (\n                <>\n\n                    <OverlayTrigger\n                    trigger = \"focus\"\n                        //showPopover={this.props.showPopover}\n                        key=\"right\"\n                        placement=\"right\"\n                        overlay={\n                            <Popover {...this.props} id={`popover-positioned-right`}>\n                                <Popover.Title className={\"border border-dark bg-dark text-white\"} as=\"h3\">Actions</Popover.Title>\n                                <Popover.Content className={\"border border-dark bg-light text-white\"}>\n                                    <Button size=\"sm\" variant=\"outline-info\" type=\"button\" onClick={() => { this.props.lessonStatusChange() }}>\n                                        <FontAwesomeIcon icon={faCheck} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-dark\" type=\"button\" onClick={() => { this.props.editLesson() }}>\n                                        <FontAwesomeIcon icon={faEdit} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-danger\" type=\"button\" onClick={() => { this.props.deleteLesson() }}>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </Button>\n\n                                </Popover.Content>\n                            </Popover>\n                        }\n                    >\n\n                        <Button size =\"sm\" variant={this.props.buttonColor} >{this.props.data}</Button>\n                    </OverlayTrigger>\n\n                </>\n            );\n        }\n        else if (this.props.data && !this.props.isNotInFuture) {\n            return (\n                <>\n\n                    <OverlayTrigger\n                    trigger = \"focus\"\n                        //showPopover={this.props.showPopover}\n                        key=\"right\"\n                        placement=\"right-start\"\n                        overlay={\n                            <Popover id={`popover-positioned-right`}>\n                                <Popover.Title className={\"border border-dark bg-dark text-white\"} as=\"h3\">Actions</Popover.Title>\n                                <Popover.Content className={\"border border-dark bg-light text-white\"}>\n                                    <Button size=\"sm\" variant=\"outline-dark\" type=\"button\" onClick={() => { this.props.editLesson() }}>\n                                        <FontAwesomeIcon icon={faEdit} />\n                                    </Button>\n                                    <Button size=\"sm\" variant=\"outline-danger\" type=\"button\" onClick={() => { this.props.deleteLesson() }}>\n                                        <FontAwesomeIcon icon={faTimes} />\n                                    </Button>\n\n                                </Popover.Content>\n                            </Popover>\n                        }\n                    >\n\n                        <Button size =\"sm\" variant={this.props.buttonColor} >{this.props.data}</Button>\n                    </OverlayTrigger>\n\n                </>\n            );\n        }\n        else {\n            return (\n                <>\n\n                    <OverlayTrigger\n                        trigger=\"focus\"\n                        key=\"right\"\n                        placement=\"right\"\n                        overlay={\n                            <Popover id={`popover-positioned-right`}>\n                                <Popover.Title className={\"border border-dark bg-dark text-white\"} as=\"h3\">Actions</Popover.Title>\n\n                                <Popover.Content className={\"border border-dark bg-light text-white\"}>\n                                    {/* <Link to={\"add-lesson\"} className=\"nav-link\"> <Button show=\"false\" size=\"lg\" variant=\"info\" block>  <FontAwesomeIcon icon={faUserPlus} /> </Button> </Link> */}\n                                    <Button show=\"false\" size=\"lg\" variant=\"info\" block onClick={() => { this.props.changeShowForm() }}>  <FontAwesomeIcon icon={faUserPlus} /> </Button>\n\n                                </Popover.Content>\n                            </Popover>\n                        }\n                    >\n                        <ButtonGroup vertical>\n                            <Button size=\"lg\" variant=\"transparent\" ></Button>\n                            <Button size=\"lg\" variant=\"transparent\" ></Button>\n                        </ButtonGroup>\n\n                    </OverlayTrigger>\n\n                </>\n            );\n        }\n\n    };\n}","import Popover from '../Popover';\nimport React from 'react';\n\nclass InstructorDay extends React.Component {\n\n    getField = (instrDay, index) => {\n        if (!instrDay.lessonsThisDay[index])\n            return;\n        else\n            return instrDay.lessonsThisDay[index].student.firstName + \" \" + instrDay.lessonsThisDay[index].student.lastName + \" \"\n                + instrDay.lessonsThisDay[index].howLong + \"h\";\n    }\n\n    getFieldColor = (instrDay, index) => {\n        if (instrDay.lessonsThisDay[index] &&\n            (instrDay.lessonsThisDay[index].status === \"Finished_Unpaid\" || instrDay.lessonsThisDay[index].status === \"Finished_Paid\"))\n            return \"info\";\n        else\n            return \"secondary\";\n    };\n\n    //if lesson is in the future - it can't be marked as finished, so no accepting button is displayed\n    isNotInFuture = (instrDay, index) => {\n        if (instrDay.lessonsThisDay[index]) {\n            let tonight = new Date();\n            tonight.setHours(23);\n            tonight.setMinutes(59);\n            tonight.setSeconds(59);\n            let temp = new Date(instrDay.lessonsThisDay[index].date);\n            return (temp < tonight)\n        }\n    }\n    render() {\n        return (\n            this.props.instructorDay.map((instrDay, index) => (\n                <tr key={instrDay.instructor.id}>\n                    <td >{instrDay.instructor.firstName + \" \" + instrDay.instructor.lastName}</td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[0], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[0], index)}\n                            data={this.getField(instrDay, 0)} buttonColor={this.getFieldColor(instrDay, 0)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 0)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 0)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[0], index, 0)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[1], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[1], index)}\n                            data={this.getField(instrDay, 1)} buttonColor={this.getFieldColor(instrDay, 1)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 1)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 1)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[1], index, 1)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[2], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[2], index)}\n                            data={this.getField(instrDay, 2)} buttonColor={this.getFieldColor(instrDay, 2)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 2)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 2)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[2], index, 2)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[3], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[3], index)}\n                            data={this.getField(instrDay, 3)} buttonColor={this.getFieldColor(instrDay, 3)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 3)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 3)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[3], index, 3)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[4], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[4], index)}\n                            data={this.getField(instrDay, 4)} buttonColor={this.getFieldColor(instrDay, 4)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 4)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 4)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[4], index, 4)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[5], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[5], index)}\n                            data={this.getField(instrDay, 5)} buttonColor={this.getFieldColor(instrDay, 5)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 5)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 5)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[5], index, 5)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[6], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[6], 6)}\n                            data={this.getField(instrDay, 6)} buttonColor={this.getFieldColor(instrDay, 6)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 6)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 6)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[6], index, 6)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[7], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[7], index)}\n                            data={this.getField(instrDay, 7)} buttonColor={this.getFieldColor(instrDay, 7)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 7)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 7)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[7], index, 7)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[8], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[8], index)}\n                            data={this.getField(instrDay, 8)} buttonColor={this.getFieldColor(instrDay, 8)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 8)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 8)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[8], index, 8)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[9], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[9], index)}\n                            data={this.getField(instrDay, 9)} buttonColor={this.getFieldColor(instrDay, 9)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 9)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 9)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[9], index, 9)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[10], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[10], index)}\n                            data={this.getField(instrDay, 10)} buttonColor={this.getFieldColor(instrDay, 10)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 10)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 10)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[10], index, 10)} />\n                    </td>\n                    <td>\n                        <Popover lessonStatusChange={() => this.props.lessonStatusChange(instrDay.lessonsThisDay[11], \"Finished_Unpaid\")}\n                            deleteLesson={() => this.props.deleteLesson(instrDay.lessonsThisDay[11], index)}\n                            data={this.getField(instrDay, 11)} buttonColor={this.getFieldColor(instrDay, 11)}\n                            isNotInFuture={this.isNotInFuture(instrDay, 11)}\n                            changeShowForm={() => this.props.changeShowForm(instrDay.instructor, index, 11)}\n                            editLesson={() => this.props.editLesson(instrDay.lessonsThisDay[11], index, 11)} />\n                    </td>\n\n                </tr>\n            ))\n        )\n    }\n}\nexport default InstructorDay;","import React from 'react';\nimport { Form, Card, Col, Button, Modal } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare, faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport moment from 'moment';\nimport SuccessToast from '../SuccessToast';\nimport Instructor from '../Instructor/Instructor';\nimport Student from '../Student/Student';\n\nimport { connect } from 'react-redux';\nimport { saveLesson, fetchLesson, updateLesson, fetchAllInstructors, fetchAllStudents } from '../../services/index';\n\nclass Lesson extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n        this.state.showCantCreateLessonMessage = false;\n        this.state.method = 'post';\n        this.lessonChange = this.lessonChange.bind(this);\n        this.submitLesson = this.submitLesson.bind(this);\n\n    }\n\n    initialState = {\n        id: '', date: 'Select Date', time: 'Select Hour', nrStudents: 'Select Nr of Students', status: 0, howLong: 'Select How Long',\n        students: [], instructors: [], dates: [], times: [], nrStudTable: [], howLongTable: [],\n        instructor: {\n            id: '', lastName: 'Select Instructor', firstName: '', NrHoursWeek: 0, NrHoursFull: 0, WeekWage: 0\n        },\n        student: {\n            id: '', lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        }\n    }\n\n    componentDidMount() {\n        let selectStudent = {\n            id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        };\n        this.findAllStudents(selectStudent);\n        this.setArrays();\n    };\n\n\n    arrayWithHours() {\n        var arr = [], i, j;\n        for (i = 9; i < 21; i++) {\n            arr.push(i + \":00\");\n        }\n        return arr;\n    };\n\n    addDays(date, days) {\n        var result = new Date(date);\n        result.setDate(result.getDate() + days);\n        return result;\n    }\n\n    getDateArray(start, end) {\n        var arr = new Array();\n        var dt = new Date(start);\n        while (dt < end) {\n            var dd = dt.getDate();\n            var mm = dt.getMonth() + 1;\n            var yyyy = dt.getFullYear();\n            if (dd < 10) {\n                dd = '0' + dd;\n            }\n            if (mm < 10) {\n                mm = '0' + mm;\n            }\n            var fullDate = mm + '-' + dd + '-' + yyyy;\n            arr.push(fullDate);\n            dt.setDate(dt.getDate() + 1);\n        }\n        return arr;\n    }\n\n    getNrStudArray() {\n        var arr = new Array();\n        for (var i = 1; i < 6; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    getHowLongArray() {\n        var arr = new Array();\n        for (var i = 1; i < 4; ++i) {\n            arr.push(i);\n        }\n        return arr;\n    }\n\n    setArrays() {\n        this.state.dates.push('Select Date');\n        this.state.times.push('Select Hour');\n        this.state.howLongTable.push('Select How Long');\n        this.state.nrStudTable.push('Select Nr of Students');\n        this.setState({\n            dates: this.state.dates.concat(this.getDateArray(new Date(), this.addDays(new Date(), 7))),\n            times: this.state.times.concat(this.arrayWithHours()),\n            howLongTable: this.state.howLongTable.concat(this.getHowLongArray()),\n            nrStudTable: this.state.nrStudTable.concat(this.getNrStudArray())\n        });\n        if (this.state.id) {\n            this.filterTimesArray();\n        }\n    }\n\n    //leave only free hours - when instructor does not have other lessons\n    //this doesn't check if student has other lessons\n    filterTimesArray = () => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + this.state.instructor.id + \"/\" + this.state.date)\n            .then(response => {\n                if (response.data != null) {\n                    //save when the lessons start \n                    let timesTab = response.data.content;\n                    timesTab = timesTab.map(t => t.time);\n\n                    //save how long they take\n                    let howLongTab = response.data.content;\n                    howLongTab = howLongTab.map(h => h.howLong);\n\n                    //if lesson is gonna e.g.  start at 12 and take 2h - delete not only 12 but also 1 pm \n                    for (let i = 0; i < howLongTab.length; ++i) {\n                        if (howLongTab[i] > 1) {\n                            var pieces = timesTab[i].split(':');\n\n                            for (var j = 1; j < howLongTab[i]; ++j) {\n                                ++pieces[0];\n                                var tempHour = pieces[0] + \":00\";\n                                timesTab = timesTab.concat(tempHour)\n                            }\n                        }\n                    }\n\n                    this.state.times = [];\n                    this.state.times.push('Select Hour');\n                    this.state.times = this.state.times.concat(this.arrayWithHours());\n\n                    this.setState({\n                        times: this.state.times.filter(e => !timesTab.includes(e))\n                    });\n\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n\n    }\n\n\n    findAllStudents = (addedStudent) => {\n        this.props.fetchAllStudents(1, 999999999, \"asc\", addedStudent);\n    }\n\n\n\n    findAllInstructors = (addSelect) => {\n        this.props.fetchAllInstructors(1, 999999999, \"asc\", addSelect);\n\n    };\n\n\n    findLessonById = (idLesson) => {\n        axios.get(\"http://localhost:8080/lesson-api/\" + idLesson)\n            .then(response => {\n                if (response.data != null) {\n                    this.props.student.students.unshift(response.data.student);\n                    this.props.instructor.instructors.unshift(response.data.instructor);\n                    this.setState({\n                        id: response.data.id,\n                        instructor: response.data.instructor,\n                        student: response.data.student,\n                        date: response.data.date,\n                        time: response.data.time,\n                        howLong: response.data.howLong,\n                        nrStudents: response.data.nrStudents,\n                        status: response.data.status,\n                    });\n\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n\n    isValid = () => {\n        if (this.state.student.lastName === 'Select Student' ||\n            this.state.nrStudents === 'Select Nr of Students' ||\n            this.state.howLong === 'Select How Long') {\n            this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n            setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            return false;\n        }\n        else\n            return true;\n    }\n\n    submitLesson = () => {\n        if (!this.isValid()) {\n            return;\n        }\n\n        const lesson = {\n            instructor: this.props.instructor,\n            student: JSON.parse(this.state.student),\n            date: this.props.date,\n            time: this.props.lessonHour,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        this.props.saveLesson(lesson);\n        setTimeout(() => {\n            if (!this.props.lesson.error) {\n                this.setState({\n                    \"show\": true,\n                    \"method\": \"post\"\n                });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                this.resetForm();\n                setTimeout(() => this.props.handleClose(null, this.props.instrIndex, this.props.lessonIndex, true, lesson), 1000);\n            } else {\n                this.setState({ \"showCantCreateLessonMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showCantCreateLessonMessage\": false }), 3000);\n                this.props.lesson.error = '';\n            }\n        }, 1000);\n    };\n\n\n    updateLesson = () => {\n        if (!this.isValid()) {\n            return;\n        }\n        if (typeof (this.state.instructor) === \"object\")\n            this.state.instructor = JSON.stringify(this.state.instructor);\n\n        if (typeof (this.state.student) === \"object\")\n            this.state.student = JSON.stringify(this.state.student);\n\n        const lesson = {\n            id: this.state.id,\n            instructor: JSON.parse(this.state.instructor),\n            student: JSON.parse(this.state.student),\n            date: this.state.date,\n            time: this.state.time,\n            howLong: this.state.howLong,\n            nrStudents: this.state.nrStudents,\n            status: this.state.status\n        };\n\n        this.props.updateLesson(lesson);\n//        this.forceUpdate();//?????????????????????????\n        setTimeout(() => {\n\n            if (!this.props.lesson.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                this.resetForm();\n                setTimeout(() => this.props.handleClose(null, this.props.instrIndex, this.props.lessonIndex, null, lesson, true), 1000);\n            } else {\n                this.setState({ \"showCantCreateLessonMessage\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"showCantCreateLessonMessage\": false }), 3000);\n                this.props.lesson.error = '';\n            }\n        }, 2000);\n    }\n\n    resetForm = () => {\n        let selectStudent = {\n            id: -1, lastName: 'Select Student', firstName: '', idCardNr: '', telNr: '', paymentStatus: 0, lessonHours: 0, unpaidLessons: 0, moneyOwing: 0, moneyInAdvance: ''\n        };\n        this.findAllStudents(selectStudent);\n        this.setState({\n            \"student\": this.initialState.student,\n            \"howLong\": this.initialState.howLong,\n            \"nrStudents\": this.initialState.nrStudents\n        });\n    };\n\n    lessonChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n\n    };\n\n    lessonChangeInstructor = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n        this.state.instructor = event.target.value;\n        if (typeof (this.state.instructor) === \"string\")\n            this.state.instructor = JSON.parse(this.state.instructor);\n\n        this.filterTimesArray();\n\n    }\n\n    onShowHandle = () => {\n\n        if (this.props.editedLesson) {\n            this.setState({\n                id: this.props.editedLesson.id,\n                student: this.props.editedLesson.student,\n                howLong: this.props.editedLesson.howLong,\n                nrStudents: this.props.editedLesson.nrStudents,\n                instructor: this.props.editedLesson.instructor,\n                date: this.props.editedLesson.date,\n                time: this.props.editedLesson.time,\n                status: this.props.editedLesson.status,\n            });\n            this.findAllStudents(this.props.editedLesson.student);//musze dac booleana\n            this.props.student.students[0] = this.props.editedLesson.student;\n\n        }\n    }\n\n    resetAndCloseForm = () => {\n        this.resetForm();\n        this.props.handleClose(false/*, null, null, null, null, true*/);\n    }\n\n    render() {\n        const { student, time, howLong, nrStudents } = this.state;\n        const instructors = this.props.instructor.instructors;\n        const students = this.props.student.students;\n\n        return (\n            <>\n                <Modal show={this.props.showForm}\n                    onHide={() => this.resetAndCloseForm()}\n                    onShow={() => this.onShowHandle()}\n                >\n                    <Modal.Header className={\"border border-light bg-dark text-white\"} closeButton>\n                        <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"Lesson Updated Successfully\" : \"Lesson Saved Successfully.\"} type=\"success\" />\n                        </div>\n                        <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.showInvalidMessage} message={\"Fill out the required fields.\"} type=\"dangerNoSuccess\" />\n                        </div>\n                        <div style={{ \"display\": this.state.showCantCreateLessonMessage ? \"block\" : \"none\" }}>\n                            <SuccessToast show={this.state.showCantCreateLessonMessage} message={\"Can't create such lesson - conflict with other lesson\"} type=\"dangerNoSuccess\" />\n                        </div>\n                        <Modal.Title>\n                            <FontAwesomeIcon icon={this.props.editedLesson ? faEdit : faPlusSquare} /> {this.props.editedLesson ? \"Update Lesson\" : \"Add New Lesson\"}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className={\"border border-light bg-dark text-white\"}>\n                        <Card className={\"border border-dark bg-dark text-white\"}>\n                            <Form onReset={this.resetLesson} onSubmit={this.props.editedLesson ? this.updateLesson : this.submitLesson}>\n                                <Card.Body>\n                                    <h6>Instructor</h6>\n                                    <h5>{this.props.instructor.firstName + \" \" + this.props.instructor.lastName}</h5>\n\n                                    <h6>Date</h6>\n                                    <h5>{this.props.date}</h5>\n\n                                    <h6>Time</h6>\n                                    <h5>{this.props.lessonHour}</h5>\n\n\n\n                                    <Form.Group as={Col} controlId=\"formGridStudent\">\n                                        <Form.Label>Student</Form.Label>\n                                        <Form.Control required as=\"select\"\n                                            name=\"student\"\n                                            value={student}\n                                            onChange={this.lessonChange}\n                                            className={\"bg-dark text-white\"} >\n                                            {students.filter((item, index, self) =>\n                                                index === self.findIndex((e) => (\n                                                    e.id === item.id)\n                                                ))\n                                                .map(student =>\n                                                    <option key={student.id} value={JSON.stringify(student)}>\n                                                        {student.lastName + \" \" + student.firstName}\n                                                    </option>\n                                                )}\n                                        </Form.Control>\n                                    </Form.Group>\n\n\n\n                                    <Form.Row>\n                                        <Form.Group as={Col} controlId=\"formGridHowLong\">\n                                            <Form.Label>How Long [h]</Form.Label>\n                                            <Form.Control required as=\"select\"\n                                                autoComplete=\"off\"\n                                                name=\"howLong\"\n                                                value={howLong}\n                                                onChange={this.lessonChange}\n                                                className={\"bg-dark text-white\"}>\n                                                {this.state.howLongTable.map(howLong =>\n                                                    <option key={howLong} value={howLong}>\n                                                        {howLong}\n                                                    </option>\n                                                )}\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group as={Col} controlId=\"formGridNrStudents\">\n                                            <Form.Label>Nr Of Students</Form.Label>\n                                            <Form.Control required as=\"select\"\n                                                autoComplete=\"off\"\n                                                name=\"nrStudents\"\n                                                value={nrStudents}\n                                                onChange={this.lessonChange}\n                                                className={\"bg-dark text-white\"} >\n                                                {this.state.nrStudTable.map(nrStudents =>\n                                                    <option key={nrStudents} value={nrStudents}>\n                                                        {nrStudents}\n                                                    </option>\n                                                )}\n                                            </Form.Control>\n                                        </Form.Group>\n                                    </Form.Row>\n\n                                </Card.Body>\n\n\n                            </Form >\n                        </Card >\n                    </Modal.Body>\n                    <Modal.Footer className={\"border border-light bg-light text-white\"}>\n                        <div>\n                            <Button size=\"sm\" variant=\"info\" type=\"submit\" onClick={this.props.editedLesson ? () => this.updateLesson() : () => this.submitLesson()}>\n                                <FontAwesomeIcon icon={faSave} /> {this.props.editedLesson ? \"Update\" : \"Submit\"}\n                            </Button>\n                            {'      '}\n                            {!this.props.editedLesson ?\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\" onClick={() => this.resetForm()}>\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button> : \" \"\n                            }\n                        </div>\n                        {'      '}\n                        <div>\n                            <Button size=\"sm\" variant=\"border border-dark bg-light\" type=\"button\" onClick={() => this.resetAndCloseForm()}>\n                                <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                        </div>\n\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n\n}\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n        student: state.student\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllStudents: (currentPage, size, sortDir, addedStudent) => dispatch(fetchAllStudents(currentPage, size, sortDir, addedStudent)),\n        fetchAllInstructors: (currentPage, size, sortDir, addSelect) => dispatch(fetchAllInstructors(currentPage, size, sortDir, addSelect)),\n        saveLesson: (lesson) => dispatch(saveLesson(lesson)),\n        fetchLesson: (lessonId) => dispatch(fetchLesson(lessonId)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Lesson);","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt, faTimes , faArrowLeft, faArrowRight, faCalendarPlus} from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport Popover from '../Popover';\nimport InstructorDay from './InstructorDay';\nimport LessonForm from './LessonForm';\n\nimport './../../style/Style.css';\n\nimport { connect } from 'react-redux';\nimport { updateLesson, deleteLesson } from '../../services/index';\n\n\n\nclass Schedule extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let today = new Date();\n        this.state = {\n            date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear(),\n            dayName: today.toLocaleString('en-us', {weekday: 'long'}),\n            instructor: 'khjghgxchgvjh',\n            lessonHour: '',\n            instructors: [],\n            lessons: [],\n            instructorDay: [],\n            currentPage: 1,\n            lessonsPerPage: 5,\n            searchedLesson: '',\n            sortToggle: false,\n            showForm: false,\n            lessonIndex: '',\n            instrIndex: '',\n            editedLesson: ''\n        };\n        // this.getFieldColor = this.getFieldColor.bind(this);\n\n    }\n\n    componentDidMount() {\n        this.findAllInstructorsAndSchedules(this.state.date);\n    }\n\n\n    findAllInstructorsAndSchedules(date) {\n        var instructors = [];\n\n        axios.get(\"http://localhost:8080/instructor-api/list?page=0&size=999999999&sortBy=firstName&sortDir=desc\")\n            .then(response => response.data)\n            .then((data) => {\n                instructors = data.content;\n                this.findAllInstructorDay(instructors, date);\n            });\n\n    }\n\n    findAllInstructorDay(instructors, date) {\n        let allInstrDayTable = [];\n        let tabLength = instructors.length;\n        for (let i = 0; i < tabLength; ++i) {\n            let instructor = instructors[i]\n            axios.get(\"http://localhost:8080/lesson-api/\" + instructor.id + \"/\" + date)\n                .then(response => {\n                    if (response.data != null) {\n                        let tempInstrDay = {\n                            instructor: '',\n                            lessonsThisDay: []\n                        };\n\n                        tempInstrDay.instructor = instructor;\n                        //save when the lessons start \n                        let tab = response.data.content;\n                        //save lessons at specific indexes in array - representing gour of the lesson\n\n                        tab.forEach(function (element) {\n                            //get hour and create index\n                            let time = element.time;\n                            time = time.split(\":\")[0];\n                            //first lesson starts at 9 so minus 9 to get index in the array\n                            let index = time - 9;\n\n                            //if lesson is 1 hour long -add it to array once; if longer than 1 hour - duplicate it in array\n                            for (let j = 0; j < element.howLong; ++j) {\n                                tempInstrDay.lessonsThisDay[index + j] = element;\n                            }\n                        });\n                        allInstrDayTable[i] = tempInstrDay;\n                    }\n                })\n        }\n        this.setState({\n            instructorDay: allInstrDayTable\n        });\n        setTimeout(() => this.forceUpdate(), 500);\n    }\n\n    //change status of lessons that have their date in the past and were not given into not given\n    checkIfLessonInThePast() {\n        let today = new Date();\n\n        for (let i = 0; i < this.state.lessons.length; ++i) {\n            let temp = new Date(this.state.lessons[i].date);\n            if (this.state.lessons[i].status === \"To_Give\" && temp < today) {\n                this.lessonStatusChange(this.state.lessons[i], 3)\n            }\n        }\n    };\n\n\n    changePage = event => {\n        let target = parseInt(event.target.value);\n        if (this.state.searchedLesson) {\n            this.searchLesson(target)\n        } else {\n            this.findAllLessons(target);\n        }\n        this.setState({\n            [event.target.name]: target\n        });\n\n    };\n\n    prevPage = () => {\n        let prevPage = this.state.currentPage - 1;\n        if (this.state.currentPage > 1) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(prevPage)\n            } else {\n                this.findAllLessons(prevPage);\n            }\n        }\n    };\n\n    nextPage = () => {\n        let nextPage = this.state.currentPage + 1;\n        if (this.state.currentPage < Math.ceil(this.state.totalElements / this.state.lessonsPerPage)) {\n            if (this.state.searchedLesson) {\n                this.searchLesson(nextPage)\n            } else {\n                this.findAllLessons(nextPage);\n            }\n        }\n    };\n\n    lessonStatusChange = (lesson, newStatus) => {\n        if (!lesson)\n            return;\n        lesson.status = newStatus;\n\n        this.props.updateLesson(lesson);\n    };\n\n    deleteLesson = (lesson, index) => {\n        if (!lesson)\n            return;\n        let i = this.state.instructorDay[index].lessonsThisDay.indexOf(lesson);\n        console.log(this.props);\n        this.props.deleteLesson(lesson.id);\n\n        console.log(this.props);\n\n        let tempTab = this.state.instructorDay;\n        for (let j = 0; j < lesson.howLong; ++j)\n            tempTab[index].lessonsThisDay[i + j] = null;\n        this.setState({\n            instructorDay: tempTab\n        });\n\n    };\n\n\n    //if close form => change showForm to hide it and update lesson list\n    //if open form => get instructor and hour to pre-fill the form\n    changeShowForm = (instructor, instrIndex, lessonIndex, newLessonWasAdded, lesson, isUpdated) => {\n        if (this.state.showForm) {\n            this.setState({\n                \"showForm\": !this.state.showForm,\n                editedLesson: null\n\n            });\n            //if time of the lesson was changed - update schedule fields\n            if (isUpdated) {\n                let tempTab = this.state.instructorDay;\n                for (let j = 0; j < 3; ++j) {\n                    if (lesson.howLong > j)\n                        tempTab[instrIndex].lessonsThisDay[lessonIndex + j] = lesson;\n                    else\n                        tempTab[instrIndex].lessonsThisDay[lessonIndex + j] = null;\n                }\n                this.setState({\n                    instructorDay: tempTab\n                });\n\n                //this.findAllInstructorsAndSchedules(this.state.date);\n                return;\n            }\n            if (newLessonWasAdded) {\n                //added lesson doesn't have id so i need to get it from data base\n                axios.get(\"http://localhost:8080/lesson-api/\" + lesson.instructor.id + \"/\" + lesson.date + \"?page=0&size=1&sortBy=id&sortDir=desc\")\n                    .then(response => {\n                        lesson.id = response.data.content[0].id;\n                    })\n                    .catch(error => {\n                        console.error(\"error: \" + error)\n                    });\n\n                let tempTab = this.state.instructorDay;\n                for (let j = 0; j < lesson.howLong; ++j)\n                    tempTab[instrIndex].lessonsThisDay[lessonIndex + j] = lesson;\n                this.setState({\n                    instructorDay: tempTab\n                });\n                //this.findAllInstructorsAndSchedules(this.state.date);\n            }\n            return;\n        }\n        else {\n            this.setState({\n                \"showForm\": !this.state.showForm,\n                \"instructor\": instructor,\n                \"lessonHour\": lessonIndex + 9 + \":00\",\n                \"lessonIndex\": lessonIndex,\n                \"instrIndex\": instrIndex\n            });\n        }\n    }\n\n\n    editLesson = (editedLesson, instrIndex, lessonIndex) => {\n        this.setState({\n            \"editedLesson\": editedLesson,\n            \"showForm\": true,\n            \"instructor\": editedLesson.instructor,\n            \"lessonHour\": editedLesson.time,\n            \"lessonIndex\": lessonIndex,\n            \"instrIndex\": instrIndex\n        });\n\n\n    }\n\n    changeDate = (addedDays) => { \n        let targetDay = new Date(this.state.date);\n        targetDay.setDate(targetDay.getDate() + addedDays);\n\n        this.setState({\n            date: targetDay.getMonth() + 1 + '-' + targetDay.getDate() + '-' + targetDay.getFullYear(),\n            dayName: targetDay.toLocaleString('en-us', {weekday: 'long'})\n        });\n        setTimeout(() =>         this.findAllInstructorsAndSchedules(this.state.date)\n        , 10);\n\n    }\n\n    render() {\n        const { instructorDay, instructors } = this.state;\n        return (\n            <div>\n                <LessonForm instructor={this.state.instructor} lessonHour={this.state.lessonHour} date={this.state.date}\n                    instrIndex={this.state.instrIndex} lessonIndex={this.state.lessonIndex}\n                    editedLesson={this.state.editedLesson}\n                    showForm={this.state.showForm} handleClose={(instructor, instrIndex, lessonIndex, refresh, lesson, isUdpated) =>\n                        this.changeShowForm(instructor, instrIndex, lessonIndex, refresh, lesson, isUdpated)} ></LessonForm>\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div id=\"container\" style={{\"clear\":\"both\", \"display\": \"flex\", \"justifyContent\":\"space-between\"}}>\n                        <div style={{ \"textAlign\": \"center\"}} >\n                        <Button variant=\"outline-light\" onClick={(addedDays)=>this.changeDate(-1)} > <FontAwesomeIcon icon={faArrowLeft} /> </Button>{'  '}\n                            <FontAwesomeIcon icon={faCalendarAlt} />   {this.state.dayName} {this.state.date}{' '}\n                            <Button variant=\"outline-light\" onClick={(addedDays)=>this.changeDate(1)}  > <FontAwesomeIcon icon={faArrowRight} /> </Button>\n                        </div>\n                        <div style={{ \"textAlign\": \"right\"}}>\n                        <Link to={\"add-lesson\"} className=\"nav-link\">\n                                <ButtonGroup>\n                                    <Button size=\"lg\" variant=\"outline-light\"> <FontAwesomeIcon icon={faCalendarPlus} /> </Button>\n                                </ButtonGroup>\n                            </Link>\n                        </div>\n                        </div>\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Instructor</th>\n                                    <th>9:00</th>\n                                    <th>10:00</th>\n                                    <th>11:00</th>\n                                    <th>12:00</th>\n                                    <th>13:00</th>\n                                    <th>14:00</th>\n                                    <th>15:00</th>\n                                    <th>16:00</th>\n                                    <th>17:00</th>\n                                    <th>18:00</th>\n                                    <th>19:00</th>\n                                    <th>20:00</th>\n\n                                </tr>\n                            </thead>\n\n                            <tbody>\n\n                                <InstructorDay instructorDay={instructorDay}\n                                    lessonStatusChange={(lesson, newStatus) => this.lessonStatusChange(lesson, newStatus)}\n                                    deleteLesson={(lesson, index) => this.deleteLesson(lesson, index)}\n                                    changeShowForm={(instructor, instrIndex, lessonIndex, refresh, lesson, updated) => this.changeShowForm(instructor, instrIndex, lessonIndex, refresh, lesson, updated)}\n                                    editLesson={(editedLesson, instrIndex, lessonIndex) => this.editLesson(editedLesson, instrIndex, lessonIndex)} />\n                            </tbody>\n\n\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n\n\n\n                    </Card.Footer>\n                </Card>\n            </div>\n\n        );\n    }\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        //savedStudentObject: state.student,\n        //      studentObject: state.student,\n        //  updatedStudent: state.student.student\n        lesson: state.lesson,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateLesson: (lesson) => dispatch(updateLesson(lesson)),\n        deleteLesson: (lesson) => dispatch(deleteLesson(lesson))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Schedule);","import React from 'react';\nimport { Form, Card, Col, Button } from 'react-bootstrap';\nimport { faSave, faUndo, faArrowLeft, faEdit, faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SuccessToast from '../SuccessToast';\n\n\nimport { connect } from 'react-redux';\nimport { savePriceTable, fetchPriceTable, updatePriceTable } from '../../services/index';\n\nclass PriceTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n        this.state.show = false;\n        this.state.showInvalidMessage = false;\n        this.state.method = 'post';\n        this.priceTableChange = this.priceTableChange.bind(this);\n        this.submitPriceTable = this.submitPriceTable.bind(this);\n    }\n\n    initialState = {\n        id: '', name: '', minNrHours: '', onePPrice: '', twoPPrice: '', threePPrice: ''\n    }\n\n    componentDidMount() {\n        const idPriceTable = +this.props.match.params.id;\n        if (idPriceTable) {\n            this.findPriceTableById(idPriceTable);\n        }\n    };\n\n\n    findPriceTableById = (idPriceTable) => {\n\n        this.props.fetchPriceTable(idPriceTable);\n        setTimeout(() => {\n\n            let priceTable = this.props.priceTable.priceTable;\n            if (priceTable != null) {\n                this.setState({\n                    id: priceTable.id,\n                    name: priceTable.name,\n                    minNrHours: priceTable.minNrHours,\n                    onePPrice: priceTable.onePPrice,\n                    twoPPrice: priceTable.twoPPrice,\n                    threePPrice: priceTable.threePPrice\n                });\n            }\n        }, 1000);\n    };\n\n    returnToList = () => {\n        return this.props.history.push(\"/priceTableList\");\n    };\n\n    submitPriceTable = event => {\n        event.preventDefault();\n\n        const priceTable = {\n            name: this.state.name,\n            minNrHours: this.state.minNrHours,\n            onePPrice: this.state.onePPrice,\n            twoPPrice: this.state.twoPPrice,\n            threePPrice: this.state.threePPrice,\n        };\n\n        this.props.savePriceTable(priceTable);\n        setTimeout(() => {\n            if (this.props.priceTable) {\n                this.setState({ \"show\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 1000);\n    };\n\n    updatePriceTable = event => {\n        event.preventDefault();\n\n        const priceTable = {\n            id: this.state.id,\n            name: this.state.name,\n            minNrHours: this.state.minNrHours,\n            onePPrice: this.state.onePPrice,\n            twoPPrice: this.state.twoPPrice,\n            threePPrice: this.state.threePPrice,\n        };\n\n        this.props.updatePriceTable(priceTable);\n        setTimeout(() => {\n\n            if (!this.props.priceTable.error) {\n                this.setState({ \"show\": true, \"method\": \"put\" });\n                setTimeout(() => this.setState({ \"show\": false }), 3000);\n                setTimeout(() => this.returnToList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 2000);\n    }\n\n    resetPriceTable = () => {\n        this.setState(() => this.initialState);\n    };//??????????????????????????????????????????????????????????\n\n    priceTableChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };//?????????????????????????????????????????????????\n\n    render() {\n        const { name, minNrHours, onePPrice, twoPPrice, threePPrice } = this.state;\n        const idPriceTable = +this.props.match.params.id;\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={this.state.method === \"put\" ? \"PriceTable Updated Successfully\" : \"PriceTable Saved Successfully.\"} type=\"success\" />\n                </div>\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Invalid Data - might be in the data base already\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={idPriceTable ? faEdit : faPlusSquare} /> {idPriceTable ? \"Update PriceTable\" : \"Add New PriceTable\"}\n                    </Card.Header>\n                    <Form onReset={this.resetPriceTable} onSubmit={idPriceTable ? this.updatePriceTable : this.submitPriceTable}>\n                        <Card.Body>\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridName\">\n                                    <Form.Label>Offer Name</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"name\"\n                                        value={name}\n                                        onChange={this.priceTableChange}\n                                        placeholder=\"Enter Offer Name\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridMinNrHours\">\n                                    <Form.Label>Min Nr of Hours</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"minNrHours\"\n                                        value={minNrHours}\n                                        onChange={this.priceTableChange}\n                                        placeholder=\" Enter Min Nr of Hours\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row>\n\n                            <Form.Row>\n                                <Form.Group as={Col} controlId=\"formGridOnePPrice\">\n                                    <Form.Label>Price for 1 Person</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"onePPrice\"\n                                        value={onePPrice}\n                                        onChange={this.priceTableChange}\n                                        placeholder=\"Enter Price\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridTwoPPrice\">\n                                    <Form.Label>Price for 1 P in group of 2</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"twoPPrice\"\n                                        value={twoPPrice}\n                                        onChange={this.priceTableChange}\n                                        placeholder=\" Enter price\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n\n                                <Form.Group as={Col} controlId=\"formGridThreePPrice\">\n                                    <Form.Label>Price for 1 P in group of 3</Form.Label>\n                                    <Form.Control required\n                                        autoComplete=\"off\"\n                                        type=\"test\"\n                                        name=\"threePPrice\"\n                                        value={threePPrice}\n                                        onChange={this.priceTableChange}\n                                        placeholder=\" Enter price\"\n                                        className={\"bg-dark text-white\"} />\n                                </Form.Group>\n                            </Form.Row>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"primary\" type=\"submit\">\n                                    <FontAwesomeIcon icon={faSave} /> {idPriceTable ? \"Update\" : \"Submit\"}\n                                </Button>\n                                {'      '}\n\n                                <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                    <FontAwesomeIcon icon={faUndo} />  Reset\n                    </Button>\n                            </div>\n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={this.returnToList.bind()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                    </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        //savedPriceTableObject: state.priceTable,\n        //      priceTableObject: state.priceTable,\n        //  updatedPriceTable: state.priceTable.priceTable\n        priceTable: state.priceTable\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        savePriceTable: (priceTable) => dispatch(savePriceTable(priceTable)),\n        fetchPriceTable: (priceTableId) => dispatch(fetchPriceTable(priceTableId)),\n        updatePriceTable: (priceTable) => dispatch(updatePriceTable(priceTable))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PriceTable);\n","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Alert, Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoneyCheckAlt, faEdit, faTrash, faPlusSquare} from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\n\nimport './../../style/Style.css';\n\n\nimport { connect } from 'react-redux';\nimport { deletePriceTable, fetchAllPriceTables } from './../../services/index';\n\nclass PriceTableList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            priceTables: []//,\n            // currentPage: 1,\n            //   priceTablesPerPage: 5,\n            //  searchedPriceTable: '',\n            //sortToggle: true\n        };\n    }\n\n\n    componentDidMount() {\n        this.props.fetchAllPriceTables(/*this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection*/);\n    }\n\n    deletePriceTable = (idPriceTable) => {\n\n        this.props.deletePriceTable(idPriceTable);\n\n        setTimeout(() => {\n            if (this.props.priceTable != null) {\n                this.setState({ \"show\": true });\n                setTimeout(() => this.setState({ \"show\": false }), 1000);\n\n            } else {\n                this.setState({ \"show\": false });\n            }\n        }, 1000);\n        this.props.fetchAllPriceTables(/*this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false*/);\n\n    };\n\n    // changePage = event => {\n    //     let target = parseInt(event.target.value);\n    //     if (this.props.priceTable.searchedPriceTable) {\n    //         this.searchPriceTable(target)\n    //     } else {\n    //         let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //         this.props.fetchAllPriceTables(target, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false);\n    //     }\n    //     this.setState({\n    //         [event.target.name]: target\n    //     });\n\n    // };\n\n    // firstPage = () => {\n    //     let firstPage = 1;\n\n    //     if (this.props.priceTable.currentPage > firstPage) {\n    //         this.props.priceTable.currentPage = 1;\n    //         if (this.props.priceTable.searchedPriceTable) {\n    //             this.searchPriceTable(this.props.priceTable.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection);\n    //         }\n    //     }\n    // };\n\n    // prevPage = () => {\n    //     if (this.props.priceTable.currentPage > 1) {\n    //         --this.props.priceTable.currentPage;\n    //         if (this.props.priceTable.searchedPriceTable) {\n    //             this.searchPriceTable(this.props.priceTable.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false);\n    //         }\n    //     }\n    // };\n\n    // lastPage = () => {\n    //     let priceTablesLength = this.state.priceTables.length;\n    //     let lastPage = Math.ceil(this.props.totalElements / this.state.priceTablesPerPage);\n    //     if (this.props.priceTable.currentPage < lastPage) {\n    //         this.props.priceTable.currentPage = lastPage;\n    //         if (this.props.priceTable.searchedPriceTable) {\n    //             this.searchPriceTable(this.props.priceTable.currentPage)\n    //         } else {\n    //             this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection);\n    //         }\n    //     }\n    // };\n\n    // nextPage = () => {\n    //     if (this.state.currentPage < Math.ceil(this.props.totalElements / this.state.priceTablesPerPage)) {\n    //         ++this.props.priceTable.currentPage;\n\n    //         if (this.props.priceTable.searchedPriceTable) {\n    //             this.searchPriceTable(this.props.priceTable.currentPage)\n    //         } else {\n    //             let sortDirection = this.state.sortToggle ? \"asc\" : \"desc\";\n    //             this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false);\n    //         }\n    //     }\n    // };\n\n    // searchChange = event => {\n    //     this.props.priceTable.searchedPriceTable = event.target.value;\n    //     this.forceUpdate();\n    // };\n\n    // cancelSearch = () => {\n    //     this.props.priceTable.searchedPriceTable = '';\n    //     this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false);\n    //     this.forceUpdate();\n    // };\n\n    // sortData = () => {\n    //    // console.log(this.props.priceTable.sortDirection);\n    //     if (this.props.priceTable.sortDirection === \"asc\")\n    //         this.props.priceTable.sortDirection = \"desc\";\n    //     else\n    //         this.props.priceTable.sortDirection = \"asc\";\n    //      //   console.log(this.props.priceTable.sortDirection);\n\n    //     this.props.fetchAllPriceTables(this.props.priceTable.currentPage, this.state.priceTablesPerPage, this.props.priceTable.sortDirection, false);\n\n    // }\n\n    // searchPriceTable = (currentPage) => {\n    //     if (this.props.priceTable.searchedPriceTable)\n    //         this.props.searchPriceTables(this.props.priceTable.searchedPriceTable, this.props.priceTable.currentPage, this.props.priceTable.priceTablesPerPage);\n    // }\n\n    render() {\n        // const searchedPriceTable = this.props.priceTable.searchedPriceTable;\n        //const totalPages = this.props.priceTable.totalPages;\n        //const totalElements = this.props.priceTable.totalElements;\n        const priceTable = this.props.priceTable;\n        const priceTables = this.props.priceTables;\n        //const currentPage = this.props.priceTable.currentPage;\n        //const sortDirection = this.props.priceTable.sortDirection;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            <div>\n\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message=\"PriceTable Deleted Successfully.\" type=\"danger\" />\n                </div>\n\n                {/* {priceTableData.error ?\n                <Alert variant=\"danger\">\n                    {priceTableData.error}\n\n                </Alert> : */}\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faMoneyCheckAlt} />     PriceTables List\n                        </div>\n\n\n                    </Card.Header>\n                    <Card.Body>\n                        <Table striped bordered hover variant=\"dark\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Min nr hours</th>\n                                    <th>1 Person [zl]</th>\n                                    <th>2 People [zl/1 Person]</th>\n                                    <th>3+ People [zl/1 Person]</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n\n\n                            <tbody>\n                                {priceTables.length === 0 ?\n                                    <tr align=\"center\">\n                                        <td colSpan=\"10\"> No PriceTables in the Data Base</td>\n                                    </tr> :\n\n                                    priceTables.map((priceTable, index) => (\n                                        <tr key={priceTable.id}>\n                                            <td>{priceTable.name}</td>\n                                            <td>{priceTable.minNrHours}</td>\n                                            <td>{priceTable.onePPrice}</td>\n                                            <td>{priceTable.twoPPrice}</td>\n                                            <td>{priceTable.threePPrice}</td>\n                                            <td>\n                                                <ButtonGroup>\n                                                    <Link to={\"editPriceTable/\" + priceTable.id}> <Button size=\"sm\" variant=\"outline-primary\"> <FontAwesomeIcon icon={faEdit} /> </Button> </Link>\n                                                    <Button size=\"sm\" variant=\"outline-danger\" onClick={this.deletePriceTable.bind(this, priceTable.id)}> <FontAwesomeIcon icon={faTrash} /> </Button>\n                                                </ButtonGroup>\n                                            </td>\n\n                                        </tr>\n                                    ))\n                                }\n                            </tbody>\n                        </Table>\n                    </Card.Body>\n                    <Card.Footer>\n                        <div style={{ \"float\": \"left\" }}>\n                            <Link to={\"add-priceTable\"} className=\"nav-link\">\n                                <ButtonGroup>\n                                    <Button size=\"lg\" variant=\"outline-light\"> <FontAwesomeIcon icon={faPlusSquare} /> </Button>\n                                </ButtonGroup>\n                            </Link>\n                        </div>\n\n\n                    </Card.Footer>\n                </Card>\n\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        priceTable: state.priceTable,\n        priceTables: state.priceTable.priceTables,\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllPriceTables: () => dispatch(fetchAllPriceTables() ),\n        deletePriceTable: (priceTableId) => dispatch(deletePriceTable(priceTableId)),\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PriceTableList);","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Modal, Card, Table, ButtonGroup, Button, InputGroup, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faList, faWallet, faEdit, faTrash, faCalendarPlus, faStepBackward, faFastBackward, faStepForward, faFastForward, faSearch, faTimes, faCheckSquare } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\n\nimport { connect } from 'react-redux';\nimport { deleteLesson, fetchAllLessonsForStudent, searchLessons, updateLesson } from './../../services/index';\n\nimport './../../style/Style.css';\n\n\nclass StudentSettle extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        //  const idStudent = this.props.studentId;\n\n        //this.props.fetchAllLessonsForStudent(this.props.studentId, 0, 999999);\n        setTimeout(() => {\n            this.checkIfLessonInThePast();\n        }, 99999900)\n    }\n\n\n    //change status of lessons that have their date in the past (24 h back) and were not given into not given\n    checkIfLessonInThePast() {\n        let yesterday = new Date(new Date().setDate(new Date().getDate() - 1));\n\n        let length = this.props.lessons.length;\n        let renderFlag = false;\n        for (let i = 0; i < length; ++i) {\n            let temp = new Date(this.props.lessons[i].date);\n            if (this.props.lessons[i].status === \"To_Give\" && temp < yesterday) {\n                this.lessonStatusChange(this.props.lessons[i], 3)\n                //flag so that component is not unnecessarily rendered \n                if (!renderFlag)\n                    renderFlag = true;\n            }\n        }\n        if (renderFlag)\n            this.props.fetchAllLessonsForStudent(this.props.studentId, 0, 999999);\n    };\n\n\n    lessonStatusChange = (lesson, newStatus) => {\n        lesson.status = newStatus;\n        this.props.updateLesson(lesson);\n        this.props.fetchAllLessonsForStudent(this.props.studentId, 0, 999999);\n    }\n\n\n\n    render() {\n        const searchedLesson = this.props.lesson.searchedLesson;\n        const totalPages = this.props.lesson.totalPages;\n        const totalElements = this.props.lesson.totalElements;\n        const lesson = this.props.lesson;\n        const lessons = this.props.lessons;\n        const currentPage = 0;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"9999990px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n\n        return (\n            <div>\n                <Modal show={this.props.showLessonList} onHide={() => this.props.onClose()}\n                //</div> onHide={() => this.resetAndCloseForm()}\n                // onShow={() => this.onShowHandle()}\n                >\n                    <Modal.Header className={\"border border-light bg-dark text-white\"} closeButton>\n\n                        <div style={{ \"float\": \"left\" }}>\n                            <FontAwesomeIcon icon={faList} />  {this.props.student.firstName} {this.props.student.lastName}'s lessons list\n                        </div>\n\n\n                    </Modal.Header>\n                    <Card className={\" bg-dark text-white\"}>\n\n                        <Card.Body>\n                            <Table striped bordered hover variant=\"dark\">\n                                <thead>\n                                    <tr>\n                                        <th> Date <div /> </th>\n                                        <th>Time</th>\n                                        <th>How Long [h]</th>\n                                        <th>Nr of Students</th>\n                                        <th>Instructor</th>\n                                    </tr>\n                                </thead>\n\n\n                                <tbody>\n                                    {lessons.length === 0 ?\n                                        <tr align=\"center\">\n                                            <td colSpan=\"999999\"> No Lessons in the Data Base</td>\n                                        </tr> :\n\n                                        lessons.filter(lesson =>\n                                            lesson.status == \"Finished_Unpaid\")\n                                            .map(lesson => (\n                                                <tr key={lesson.id}>\n                                                    <td>{lesson.date}</td>\n                                                    <td>{lesson.time}</td>\n                                                    <td>{lesson.howLong}</td>\n                                                    <td>{lesson.nrStudents}</td>\n                                                    <td>{lesson.instructor.firstName} {lesson.instructor.lastName}</td>\n\n                                                </tr>\n                                            ))\n                                    }\n                                </tbody>\n                            </Table>\n                        </Card.Body>\n                        \n                    </Card>\n                </Modal>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        lesson: state.lesson,\n        lessons: state.lesson.lessons,\n        totalPages: state.lesson.totalPages,\n        totalElements: state.lesson.totalElements,\n        currentPage: state.lesson.currentPage,\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllLessonsForStudent: (studentId, currentPage, size) => dispatch(fetchAllLessonsForStudent(studentId, currentPage, size)),\n        deleteLesson: (lessonId) => dispatch(deleteLesson(lessonId)),\n        searchLessons: (searchedLesson, currentPage, sizePage) => dispatch(searchLessons(searchedLesson, currentPage, sizePage)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentSettle);","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl, Form, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWallet, faMoneyCheckAlt, faUndo, faArrowLeft, faList } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport StudentLessonsList from './StudentLessonsList';\nimport { connect } from 'react-redux';\nimport {\n    deleteLesson, fetchAllLessonsForStudent, searchLessons, updateLesson,\n    fetchStudent, fetchAllPriceTables, fetchPriceTableWithNrOfLessons, updateStudent\n} from './../../services/index';\n\nimport './../../style/Style.css';\n\n\nclass StudentSettle extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            idStudent: +this.props.match.params.id,\n            student: '',\n            lessons: [],\n            priceTable: '',\n            priceOneH: [],\n            customPrice: '',\n            discount: '',\n            totalPrice: '',\n            howMany1p: '',\n            howMany2p: '',\n            howMany3p: '',\n            currentPage: 1,\n            lessonsPerPage: 20,\n            searchedLesson: '',\n            sortToggle: false,\n            disableCustomPrice: true,\n            disableDiscount: true,\n            showSuccessMessage: false,\n            showLessonList: false\n        };\n    }\n\n    componentDidMount() {\n        this.findStudentById(this.state.idStudent);\n        this.props.fetchAllLessonsForStudent(+this.props.match.params.id, 1, this.state.lessonsPerPage);\n        setTimeout(() => {\n            this.findAllPriceTables();\n            this.countLessons();\n            setTimeout(() => { this.countTotalPrice() }, 100);\n        }, 1000);\n\n    }\n\n    countTotalPrice = () => {\n        let tempTotalPrice = this.state.priceOneH[0] * this.state.howMany1p;\n        tempTotalPrice += this.state.priceOneH[1] * this.state.howMany2p;\n        tempTotalPrice += this.state.priceOneH[2] * this.state.howMany3p;\n        tempTotalPrice = tempTotalPrice * (100 - this.state.discount) / 100\n        if (this.props.student.student.moneyInAdvance)\n            tempTotalPrice -= this.props.student.student.moneyInAdvance;\n        this.setState({\n            totalPrice: tempTotalPrice\n        });\n\n    }\n\n    countLessons = () => {\n        let lessons = this.props.lessons;\n\n        lessons = lessons.filter(lesson => lesson.status === \"Finished_Unpaid\");\n        let count1p = 0;\n        let count2p = 0;\n        let count3p = 0;\n        for (let i = 0; i < lessons.length; ++i) {\n            switch (lessons[i].nrStudents) {\n                case 1:\n                    count1p += lessons[i].howLong;\n                    break;\n                case 2:\n                    count2p += lessons[i].howLong;\n                    break;\n                default:\n                    count3p += lessons[i].howLong;\n                    break;\n            }\n            this.setState({\n                howMany1p: count1p,\n                howMany2p: count2p,\n                howMany3p: count3p\n            });\n        }\n    }\n\n\n    findAllPriceTables = () => {\n        let fullNrOfLessons = this.props.student.student.lessonHours;\n        this.props.fetchPriceTableWithNrOfLessons(fullNrOfLessons);\n        setTimeout(() => {\n            this.props.fetchAllPriceTables(this.props.priceTable.priceTable);\n        }, 100);\n        setTimeout(() => {\n            this.setState({\n                priceTable: this.props.priceTable.priceTable\n            });\n            this.setPriceOneH();\n        }, 100);\n\n    }\n\n    setPriceOneH = () => {\n        // let priceOneHTab = [this.props.priceTable.priceTable.onePPrice, this.props.priceTable.priceTable.twoPPrice, this.props.priceTable.priceTable.threePPrice]\n        let priceOneHTab;\n        if (this.state.customPrice) {\n            priceOneHTab = [this.state.customPrice, this.state.customPrice, this.state.customPrice]\n        }\n        else {\n            let tempPriceTab;\n            if (typeof (this.state.priceTable) !== 'object')\n                tempPriceTab = JSON.parse(this.state.priceTable);\n            else\n                tempPriceTab = this.state.priceTable;\n            priceOneHTab = [tempPriceTab.onePPrice, tempPriceTab.twoPPrice, tempPriceTab.threePPrice]\n        }\n        this.setState({ priceOneH: priceOneHTab })\n    }\n\n    findStudentById = (idStudent) => {\n\n        this.props.fetchStudent(idStudent);\n        setTimeout(() => {\n\n            let student = this.props.student.student;\n            if (student != null) {\n                this.setState({\n                    student: student\n                    // id: student.id,\n                    // lastName: student.lastName,\n                    // firstName: student.firstName,\n                    // idCardNr: student.idCardNr,\n                    // telNr: student.telNr,\n                    // paymentStatus: student.paymentStatus,\n                    // lessonHours: student.lessonHours,\n                    // unpaidLessons: student.unpaidLessons,\n                    // moneyOwing: student.moneyOwing,\n                    // moneyInAdvance: student.moneyInAdvance\n                });\n            }\n        }, 1000);\n    };\n\n\n    // lessonStatusChange = (lesson, newStatus) => {\n    //     lesson.status = newStatus;\n    //     this.props.updateLesson(lesson);\n    //     this.props.fetchAllLessonsForStudent(+this.props.match.params.id, this.props.lesson.currentPage, this.state.lessonsPerPage);\n    // }\n\n    settleChange = event => {\n\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n        this.setPriceOneH();\n        setTimeout(() => {\n            this.setPriceOneH();\n\n            this.countTotalPrice();\n        }, 100);\n\n    };\n\n    handleCheckboxCustomPriceChange = () => {\n        this.setState({\n            disableCustomPrice: !this.state.disableCustomPrice,\n            customPrice: ''\n        });\n\n        setTimeout(() => {\n            if (this.state.disableCustomPrice) {\n                this.setPriceOneH();\n                this.countTotalPrice();\n            }\n        }, 10);\n    }\n\n    handleCheckboxDiscountChange = () => {\n        this.setState({\n            disableDiscount: !this.state.disableDiscount,\n            discount: ''\n        });\n\n        setTimeout(() => {\n            if (this.state.disableDiscount) {\n                this.setPriceOneH();\n                this.countTotalPrice();\n            }\n        }, 10);\n    }\n\n    returnToStudentList = () => {\n        return this.props.history.push(\"/students\");\n    };\n\n    settleStudent = () => {\n        const studentLessons = this.props.lessons\n        for (let i = 0; i < studentLessons.length; ++i) {\n            if (studentLessons[i].status === 'Finished_Unpaid') {\n                const lesson = {\n                    id: studentLessons[i].id,\n                    instructor: studentLessons[i].instructor,\n                    student: studentLessons[i].student,\n                    date: studentLessons[i].date,\n                    time: studentLessons[i].time,\n                    howLong: studentLessons[i].howLong,\n                    nrStudents: studentLessons[i].nrStudents,\n                    status: \"Finished_Paid\"\n                };\n                //  console.log(lesson);\n                this.props.updateLesson(lesson);\n            }\n        }\n\n        if (this.state.totalPrice < 0) {\n            var newMoneyInAdvance = -this.state.totalPrice;\n            var newPaymentStatus = \"We_Owe\";\n        }\n        //let newStudentStatus = \"We_Owe\"\n        // Owes_Us\n        else {\n            var newMoneyInAdvance = 0;\n            var newPaymentStatus = \"Settled\"\n        }\n\n\n        const student = {\n            id: this.props.student.student.id,\n            lastName: this.props.student.student.lastName,\n            firstName: this.props.student.student.firstName,\n            idCardNr: this.props.student.student.idCardNr,\n            telNr: this.props.student.student.telNr,\n            paymentStatus: newPaymentStatus,\n            lessonHours: this.props.student.student.lessonHours,\n            unpaidLessons: this.props.student.student.unpaidLessons,\n            moneyOwing: this.props.student.student.moneyOwing,\n            moneyInAdvance: newMoneyInAdvance\n        };\n        // console.log(student);\n\n\n        this.props.updateStudent(student);\n\n        setTimeout(() => {\n\n            if (!this.props.student.error && !this.props.lesson.error) {\n                this.setState({ \"showSuccesMessage\": true });\n                setTimeout(() => this.setState({ \"showSuccessMessage\": false }), 3000);\n                setTimeout(() => this.returnToStudentList(), 1000);\n            } else {\n                this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n            }\n        }, 2000);\n    }\n\n    listButtonHandle = () => {\n        this.setState({\n            showLessonList: !this.state.showLessonList\n        });\n    }\n\n    render() {\n        const searchedLesson = this.props.lesson.searchedLesson;\n        const totalPages = this.props.lesson.totalPages;\n        const totalElements = this.props.lesson.totalElements;\n        const lesson = this.props.lesson;\n        const lessons = this.props.lessons;\n        const currentPage = this.props.lesson.currentPage;\n        const student = this.props.student.student;\n        const { moneyInAdvance, unpaidLessons, paymentStatus, lessonHours } = this.props.student.student;\n        const priceTables = this.props.priceTable.priceTables;\n        const { priceTable, priceOneH, discount, totalPrice, payForHowMany, howMany1p, howMany2p, howMany3p, customPrice } = this.state;\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        return (\n            <div>\n                <div style={{ \"display\": this.state.show ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.show} message={\"Student Settled Successfully\"} type=\"success\" />\n                </div>\n\n                <StudentLessonsList showLessonList={this.state.showLessonList} student={student} lessons={lessons}\n                    onClose={this.listButtonHandle} />\n                {/* <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                <SuccessToast show={this.state.showInvalidMessage} message={\"Invalid Data - might be in the data base already\"} type=\"dangerNoSuccess\" />\n            </div> */}\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={faWallet} /> Settle Student\n                </Card.Header>\n                    <Form >\n                        <Card.Body>\n                            <div id=\"container\" style={{ \"clear\": \"both\", \"display\": \"flex\", \"justifyContent\": \"space-between\" }}>\n\n                                <div>\n                                    <h5>Student</h5>\n                                    <h4>{student.firstName + \" \" + student.lastName}</h4>\n\n                                    <h6>Full Nr of Lessons [h]</h6>\n                                    <h5>{lessonHours}</h5>\n\n                                    <h6>Nr of Unpaid Lessons [h] (1p/2p/+3p)</h6>\n                                    <h5>{unpaidLessons} ({howMany1p ? howMany1p : 0}/{howMany2p ? howMany2p : 0}/{howMany3p ? howMany3p : 0})</h5>\n\n                                    <h6>Money in advance [zl]</h6>\n                                    <h5>{moneyInAdvance}</h5>\n\n                                    <h5>Total price</h5>\n                                    <h4>{totalPrice ? totalPrice : 0} zl</h4>\n\n                                </div>\n                                <div>\n                                    <Form.Group as={Col} controlId=\"formGridPriceTables\">\n                                        <Form.Label>Offer</Form.Label>\n                                        <Form.Control\n                                            disabled={!this.state.disableCustomPrice}\n                                            required as=\"select\"\n                                            autoComplete=\"off\"\n                                            name=\"priceTable\"\n                                            value={priceTable}\n                                            onChange={this.settleChange}\n                                            className={\"bg-dark text-white\"} >\n                                            {this.state.disableCustomPrice ? priceTables.map(priceTable =>\n                                                <option key={priceTable.id} value={JSON.stringify(priceTable)}>\n                                                    {priceTable.name + \" \" + priceTable.minNrHours + \"h\"\n                                                    }\n                                                </option>\n                                            ) : \"\"}\n                                        </Form.Control>\n                                    </Form.Group>\n\n                                    <InputGroup className=\"mb-3\">\n                                        <InputGroup.Prepend >\n                                            <InputGroup.Checkbox onChange={() => this.handleCheckboxCustomPriceChange()} />\n                                        </InputGroup.Prepend>\n                                        <Form.Group as={Col} controlId=\"formGridCustomPrice\" name=\"customPrice\">\n                                            <Form.Label>Custom Price</Form.Label>\n                                            <Form.Control\n                                                disabled={this.state.disableCustomPrice}\n                                                autoComplete=\"off\"\n                                                type=\"test\"\n                                                name=\"customPrice\"\n                                                value={customPrice}\n                                                onChange={this.settleChange}\n                                                placeholder={this.state.disableCustomPrice ? \"\" : \"Enter Price [zl]\"}\n                                                className={\"bg-dark text-white\"} />\n                                        </Form.Group>\n                                    </InputGroup>\n\n                                    <InputGroup className=\"mb-3\">\n                                        <InputGroup.Prepend >\n                                            <InputGroup.Checkbox onChange={() => this.handleCheckboxDiscountChange()} />\n                                        </InputGroup.Prepend>\n                                        <Form.Group as={Col} controlId=\"formGridDiscount\" name=\"discount\">\n                                            <Form.Label>Discount [%]</Form.Label>\n                                            <Form.Control\n                                                disabled={this.state.disableDiscount}\n                                                autoComplete=\"off\"\n                                                type=\"test\"\n                                                name=\"discount\"\n                                                value={discount}\n                                                onChange={this.settleChange}\n                                                placeholder={this.state.disableDiscount ? \"\" : \"Enter Discount [%]\"}\n                                                className={\"bg-dark text-white\"} />\n                                        </Form.Group>\n                                    </InputGroup>\n\n\n                                </div>\n\n                            </div>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div id=\"container\" style={{ \"clear\": \"both\", \"display\": \"flex\", \"justifyContent\": \"space-between\" }}>\n                                <div>\n                                    <Button size=\"sm\" variant=\"info\" onClick={() => this.settleStudent()}>\n                                        <FontAwesomeIcon icon={faMoneyCheckAlt} />  Settle\n                                </Button>\n                                    {'      '}\n\n\n\n                                    <Button size=\"sm\" variant=\"secondary\" type=\"reset\">\n                                        <FontAwesomeIcon icon={faUndo} />  Reset\n                                </Button>\n                                </div>\n                                <Button size=\"bg\" variant=\"light\" disabled={lessons.filter(lesson => lesson.status == \"Finished_Unpaid\").length ? false : true}\n                                    onClick={() => this.listButtonHandle()}>\n                                    <FontAwesomeIcon icon={faList} />  Unpaid Lessons\n                                </Button>\n                            </div>\n                                \n                            {'      '}\n                            <div>\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={() => this.returnToStudentList()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        lessons: state.lesson.lessons,\n        lesson: state.lesson.lesson,\n        student: state.student,\n        priceTable: state.priceTable\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchAllLessonsForStudent: (studentId, currentPage, size) => dispatch(fetchAllLessonsForStudent(studentId, currentPage, size)),\n        deleteLesson: (lessonId) => dispatch(deleteLesson(lessonId)),\n        searchLessons: (searchedLesson, currentPage, sizePage) => dispatch(searchLessons(searchedLesson, currentPage, sizePage)),\n        updateLesson: (lesson) => dispatch(updateLesson(lesson)),\n        fetchStudent: (studentId) => dispatch(fetchStudent(studentId)),\n        fetchAllPriceTables: (firstElement) => dispatch(fetchAllPriceTables(firstElement)),\n        fetchPriceTableWithNrOfLessons: (fullNrOfLessons) => dispatch(fetchPriceTableWithNrOfLessons(fullNrOfLessons)),\n        updateStudent: (student) => dispatch(updateStudent(student))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StudentSettle);","import React from 'react';\n\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Table, ButtonGroup, Button, InputGroup, FormControl, Form, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faWallet, faMoneyCheckAlt, faUndo, faArrowLeft, faList } from '@fortawesome/free-solid-svg-icons';\nimport SuccessToast from '../SuccessToast';\nimport { connect } from 'react-redux';\nimport { fetchInstructor, updateInstructor } from './../../services/index';\n\nimport './../../style/Style.css';\n\n\nclass InstructorSettle extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let today = new Date();\n        this.state = {\n            idInstructor: +this.props.match.params.id,\n            instructor: '',\n            weekInstructorTab: [],\n            weekInstructor: '',\n            showSuccessMessage: false,\n            showInvalidMessage: false,\n            date: today.getMonth() + 1 + '-' + today.getDate() + '-' + today.getFullYear()\n\n        };\n    }\n\n    componentDidMount() {\n        this.findInstructorById(this.state.idInstructor);\n        this.findWeekInstructorTab(this.state.idInstructor)\n        this.findWeekInstructor(this.state.idInstructor, this.state.date)\n    }\n\n    findWeekInstructorTab = (idInstructor) => {\n        axios.get(\"http://localhost:8080/weekInstructor-api/studentWeekInstructors/\" + idInstructor)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({\n                        weekInstructorTab: response.data.content\n                    });\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n    findWeekInstructor = (idInstructor, date) => {\n        axios.get(\"http://localhost:8080/weekInstructor-api/\" + idInstructor + \"/\" + date)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({\n                        weekInstructor: response.data\n                    });\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    };\n\n\n\n    findInstructorById = (idInstructor) => {\n\n        this.props.fetchInstructor(idInstructor);\n        setTimeout(() => {\n\n            let instructor = this.props.instructor.instructor;\n            if (instructor != null) {\n                this.setState({\n                    instructor: instructor\n                });\n            }\n        }, 1000);\n    };\n\n\n    settleChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    returnToInstructorList = () => {\n        return this.props.history.push(\"/instructors\");\n    };\n\n    settleInstructor = () => {\n        const weekInstructor = {\n            id: this.state.weekInstructor.id,\n            instructor: this.state.instructor,\n            beginningDate: this.state.weekInstructor.beginningDate,\n            endDate: this.state.weekInstructor.endDate,\n            fullNrOfLessonsWeek: this.state.weekInstructor.fullNrOfLessonsWeek,\n            nrOfLessons1p: this.state.weekInstructor.nrOfLessons1p,\n            nrOfLessons2p: this.state.weekInstructor.nrOfLessons2p,\n            nrOfLessons3p: this.state.weekInstructor.nrOfLessons3p,\n            weekWage: this.state.weekInstructor.weekWage,\n            status: 1\n        };\n\n        axios.put(\"http://localhost:8080/weekInstructor-api/\" + weekInstructor.id, weekInstructor)\n            .then(response => {\n                if (response.data != null) {\n                    this.setState({ \"showSuccesMessage\": true });\n                    setTimeout(() => this.setState({ \"showSuccessMessage\": false }), 3000);\n                    setTimeout(() => this.returnToInstructorList(), 2000);\n                }\n                else {\n                    this.setState({ \"showInvalidMessage\": true, \"method\": \"post\" });\n                    setTimeout(() => this.setState({ \"showInvalidMessage\": false }), 3000);\n                }\n            }).catch((error) => {\n                console.error(\"Error: \" + error);\n            });\n    }\n\n    // listButtonHandle = () => {\n    //     this.setState({\n    //         showLessonList: !this.state.showLessonList\n    //     });\n    // }\n\n    render() {\n        const instructor = this.state.instructor;\n        const { weekInstructorTab, weekInstructor } = this.state\n\n        const pageNumCss = {\n            width: \"45px\",\n            border: \"1px solid #F8F8FF\",\n            color: \"#F8F8FF\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        const searchBoxCss = {\n            width: \"100px\",\n            border: \"1px solid #17A2B8\",\n            color: \"#17A2B8\",\n            textAlign: \"center\",\n            fontWeight: \"bold\"\n        };\n\n        return (\n            <div>\n                <div style={{ \"display\": this.state.showSuccessMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showSuccessMessage} message={\"Instructor Settled Successfully\"} type=\"success\" />\n                </div>\n                <div style={{ \"display\": this.state.showInvalidMessage ? \"block\" : \"none\" }}>\n                    <SuccessToast show={this.state.showInvalidMessage} message={\"Couldn't settle instructor\"} type=\"dangerNoSuccess\" />\n                </div>\n\n                <Card className={\"border border-dark bg-dark text-white\"}>\n                    <Card.Header>\n                        <FontAwesomeIcon icon={faWallet} /> Settle Instructor\n                </Card.Header>\n                    <Form >\n                        <Card.Body>\n                            <div id=\"container\" style={{ \"clear\": \"both\", \"display\": \"flex\", \"justifyContent\": \"space-between\" }}>\n\n                                <div>\n                                    <h5>Instructor</h5>\n                                    <h4>{instructor.firstName + \" \" + instructor.lastName}</h4>\n\n                                    <h6>Date (Monday - Sunday)</h6>\n                                    <h5>{weekInstructor.beginningDate} - {weekInstructor.endDate}</h5>\n\n                                    <h6>Nr of Lessons This Week[h]</h6>\n                                    <h5>{weekInstructor.fullNrOfLessonsWeek}</h5>\n\n                                    <h6>(1p/2p/+3p)</h6>\n                                    <h5>{weekInstructor.nrOfLessons1p ? weekInstructor.nrOfLessons1p : 0} /\n                                    {weekInstructor.nrOfLessons2p ? weekInstructor.nrOfLessons2p : 0} /\n                                    {weekInstructor.nrOfLessons3p ? weekInstructor.nrOfLessons3p : 0} </h5>\n\n                                    <h5> Week's Wage [zl]</h5>\n                                    <h4>{weekInstructor.weekWage ? weekInstructor.weekWage : 0}</h4>\n\n                                </div>\n                                <Form.Group as={Col} controlId=\"formGridWhichWeek\">\n                                    <Form.Label>Choose Week</Form.Label>\n                                    <Form.Control required as=\"select\"\n                                        autoComplete=\"off\"\n                                        name=\"weekInstructor\"\n                                        value={weekInstructor}\n                                        onChange={this.settleChange}\n                                        className={\"bg-dark text-white\"}>\n                                        {weekInstructorTab.filter(weekInstructor =>\n                                            weekInstructor.status === \"Not_Settled\").length ? weekInstructorTab.filter(weekInstructor =>\n                                            weekInstructor.status === \"Not_Settled\")\n                                            .map(weekInstructor =>\n                                                <option key={weekInstructor.id} value={weekInstructor}>\n                                                    {weekInstructor.beginningDate} - {weekInstructor.endDate}\n                                                </option>\n                                            ) : <option>All weeks are settled</option>}\n                                    </Form.Control>\n                                </Form.Group>\n\n\n                            </div>\n\n                        </Card.Body>\n\n                        <Card.Footer>\n                            <div>\n                                <Button size=\"sm\" variant=\"info\" onClick={() => this.settleInstructor()}>\n                                    <FontAwesomeIcon icon={faMoneyCheckAlt} />  Settle\n                                    </Button>\n                                {\"     \"}\n                                <Button size=\"sm\" variant=\"light\" type=\"button\" onClick={() => this.returnToInstructorList()}>\n                                    <FontAwesomeIcon icon={faArrowLeft} />  Return\n                                     </Button>\n                            </div>\n                        </Card.Footer>\n                    </Form >\n\n\n                </Card >\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        instructor: state.instructor,\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchInstructor: (instructorId) => dispatch(fetchInstructor(instructorId)),\n        updateInstructor: (instructor) => dispatch(updateInstructor(instructor))\n    }\n\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InstructorSettle);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport NavigationBar from './components/NavigationBar';\nimport Footer from './components/Footer';\nimport Welcome from './components/Welcome';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n\n\nimport Student from './components/Student/Student';\nimport StudentList from './components/Student/StudentList';\nimport Instructor from './components/Instructor/Instructor';\nimport InstructorList from './components/Instructor/InstructorList';\nimport Lesson from './components/Lesson/Lesson';\nimport LessonList from './components/Lesson/LessonList';\nimport Schedule from './components/Lesson/Schedule';\nimport PriceTable from './components/PriceTable/PriceTable';\nimport PriceTableList from './components/PriceTable/PriceTableList';\nimport StudentSettle from './components/Student/StudentSettle';\nimport InstructorSettle from './components/Instructor/InstructorSettle';\n\n\n\n\nexport default function App() {\n\n  const marginTop = {\n    marginTop: \"20px\"\n  };\n\n  const heading = \"Surf School App\";\n  const footer = \"In progress\";\n\n  return (\n    <Router>\n      <NavigationBar />\n      <Container>\n        <Row>\n          <Col lg={12} style={marginTop}>\n            <Switch>\n  <Route path=\"/\" exact component={() => <Welcome heading ={heading} footer={footer}/>} />\n              <Route path=\"/students\" exact component={StudentList} />\n              <Route path=\"/add-student\" exact component={Student} />\n              <Route path=\"/add-instructor\" exact component={Instructor} />\n              <Route path=\"/editStudent/:id\" exact component={Student} />\n              <Route path=\"/settleStudent/:id\" exact component={StudentSettle} />\n              <Route path=\"/editInstructor/:id\" exact component={Instructor} />\n              <Route path=\"/settleInstructor/:id\" exact component={InstructorSettle} />\n              <Route path=\"/lessons\" exact component={LessonList} />\n              <Route path=\"/add-lesson\" exact component={Lesson} />\n              <Route path=\"/editLesson/:id\" exact component={Lesson} />\n              <Route path=\"/schedule\" exact component={Schedule} />\n              <Route path=\"/instructors\" exact component={InstructorList} />\n              <Route path=\"/priceTableList\" exact component={PriceTableList} />\n              <Route path=\"/add-priceTable\" exact component={PriceTable} />\n              <Route path=\"/editPriceTable/:id\" exact component={PriceTable} />\n\n\n\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n      {/*<Footer />*/}\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl, {scope: \"/\"})\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    SAVE_INSTRUCTOR_REQUEST, FETCH_INSTRUCTOR_REQUEST, UPDATE_INSTRUCTOR_REQUEST, DELETE_INSTRUCTOR_REQUEST, \n    FETCH_ALL_INSTRUCTORS_REQUEST, FETCH_ALL_INSTRUCTORS_SUCCESS, FETCH_SEARCH_INSTRUCTORS_REQUEST,\n    INSTRUCTOR_SUCCESS, INSTRUCTOR_FAILURE\n} from \"./instructorTypes\";\n\nconst initialState = {\n    instructor: '',\n    error: '',\n    instructors: [],\n    currentPage: 1,\n    searchedInstructor: '',\n    sortDirection: \"asc\",\n    instructorsPerPage: 5\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_ALL_INSTRUCTORS_REQUEST:\n            return {\n                ...state\n            };\n        case UPDATE_INSTRUCTOR_REQUEST:\n            console.log(action);\n            return {\n                ...state,\n                instructor: action.updatedInstructor,\n                //update specific instructor\n                instructors: state.instructors.map((item, index) => {\n                    // Replace the item at index = updatedInstructor\n                    if (index === action.updatedInstructor.id) {\n                        return action.updatedInstructor;\n                    }\n                    // Leave every other item unchanged\n                    return item;\n                })\n            };\n        case FETCH_INSTRUCTOR_REQUEST:\n            return {\n                ...state,\n                instructor: action.updatedInstructor\n            };\n        case SAVE_INSTRUCTOR_REQUEST:\n            return {\n                ...state,\n                instructors: state.instructors.concat(action.newItem),\n                instructor: action.newItem\n            };\n        case DELETE_INSTRUCTOR_REQUEST:\n            return {\n                ...state,\n                instructors: state.instructors.filter(item => item.id !== action.instructorId),\n            };\n        case INSTRUCTOR_SUCCESS:\n            return {\n                ...state,\n                instructor: action.payload,\n                error: ''\n            };\n        case INSTRUCTOR_FAILURE:\n            return {\n                ...state,\n                //instructor: '',\n                error: action.payload\n            };\n        case FETCH_ALL_INSTRUCTORS_SUCCESS:\n            return {\n                ...state,\n                instructors: action.payload,\n                totalElements: action.totalElements,\n                totalPages: action.totalPages,\n                sortDirection: action.sortDirection,\n                error: ''\n            };\n        case FETCH_SEARCH_INSTRUCTORS_REQUEST:\n            return {\n                ...state,\n                instructors: action.instructors,\n                error: ''\n            };\n        default: return state;\n    }\n};\n\nexport default reducer;","import {\n    SAVE_STUDENT_REQUEST, FETCH_STUDENT_REQUEST, UPDATE_STUDENT_REQUEST, DELETE_STUDENT_REQUEST,\n    FETCH_ALL_STUDENTS_REQUEST, FETCH_SEARCH_STUDENTS_REQUEST,\n    STUDENT_SUCCESS, STUDENT_FAILURE\n} from \"./studentTypes\";\n\nconst initialState = {\n    student: '',\n    error: '',\n    students: [],\n    currentPage: 1,\n    searchedStudent: '',\n    sortDirection: \"asc\",\n    studentsPerPage: 5\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_ALL_STUDENTS_REQUEST:\n            return {\n                ...state,\n                students: action.payload,\n                totalElements: action.totalElements,\n                totalPages: action.totalPages,\n                sortDirection: action.sortDirection,\n                error: ''\n            };\n        case UPDATE_STUDENT_REQUEST:\n            return {\n                ...state,\n                student: action.updatedStudent,\n                //update specific student\n                students: state.students.map((item, index) => {\n                    // Replace the item at index = updatedStudent\n                    if (index === action.updatedStudent.id) {\n                        return action.updatedStudent;\n                    }\n                    // Leave every other item unchanged\n                    return item;\n                })\n            };\n        case FETCH_STUDENT_REQUEST:\n            return {\n                ...state,\n                student: action.updatedStudent\n            };\n        case SAVE_STUDENT_REQUEST:\n            return {\n                ...state,\n                students: state.students.concat(action.newItem),\n                student: action.newItem\n            };\n        case DELETE_STUDENT_REQUEST:\n            return {\n                ...state,\n                students: state.students.filter(item => item.id !== action.studentId),\n            };\n        case STUDENT_SUCCESS:\n            return {\n                ...state,\n                student: action.payload,\n                error: ''\n            };\n        case STUDENT_FAILURE:\n            return {\n                ...state,\n                //student: '',\n                error: action.payload\n            };\n        case FETCH_SEARCH_STUDENTS_REQUEST:\n            return {\n                ...state,\n                students: action.students,\n                error: ''\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import {\n    SAVE_LESSON_REQUEST, FETCH_LESSON_REQUEST, UPDATE_LESSON_REQUEST, DELETE_LESSON_REQUEST,\n    FETCH_ALL_LESSONS_REQUEST, FETCH_SEARCH_LESSONS_REQUEST,\n    LESSON_SUCCESS, LESSON_FAILURE, FETCH_ALL_STUDENT_LESSONS_REQUEST \n} from \"./lessonTypes\";\n\nconst initialState = {\n    lesson: '',\n    error: '',\n    lessons: [],\n    currentPage: 1,\n    searchedLesson: '',\n    sortDirection: \"asc\",\n    lessonsPerPage: 5\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_ALL_LESSONS_REQUEST:\n            return {\n                ...state,\n                lessons: action.payload,\n                totalElements: action.totalElements,\n                totalPages: action.totalPages,\n                sortDirection: action.sortDirection,\n                error: ''\n            };\n        case UPDATE_LESSON_REQUEST:\n            return {\n                ...state,\n                lesson: action.updatedLesson,\n                //update specific lesson\n                lessons: state.lessons.map((item, index) => {\n                    // Replace the item at index = updatedLesson\n                    if (index === action.updatedLesson.id) {\n                        return action.updatedLesson;\n                    }\n                    // Leave every other item unchanged\n                    return item;\n                })\n            };\n        case FETCH_LESSON_REQUEST:\n            return {\n                ...state,\n                lesson: action.updatedLesson\n            };\n        case SAVE_LESSON_REQUEST:\n            return {\n                ...state,\n                lessons: state.lessons.concat(action.newItem),\n                lesson: action.newItem\n            };\n        case DELETE_LESSON_REQUEST:\n            return {\n                ...state,\n                lessons: state.lessons.filter(item => item.id !== action.lessonId),\n            };\n        case LESSON_SUCCESS:\n            return {\n                ...state,\n                lesson: action.payload,\n                error: ''\n            };\n        case LESSON_FAILURE:\n            return {\n                ...state,\n                //lesson: '',\n                error: action.payload\n            };\n        case FETCH_SEARCH_LESSONS_REQUEST:\n            return {\n                ...state,\n                lessons: action.lessons,\n                error: ''\n            };\n        case FETCH_ALL_STUDENT_LESSONS_REQUEST:\n            return {\n                ...state,\n                lessons: action.payload,\n                totalElements: action.totalElements,\n                totalPages: action.totalPages,\n                error: ''\n            };\n        default: \n        return state;\n    }\n};\n\nexport default reducer;","import {\n    SAVE_PRICE_TABLE_REQUEST, FETCH_PRICE_TABLE_REQUEST, UPDATE_PRICE_TABLE_REQUEST, DELETE_PRICE_TABLE_REQUEST, \n    FETCH_ALL_PRICE_TABLES_REQUEST, FETCH_ALL_PRICE_TABLES_SUCCESS,\n    PRICE_TABLE_SUCCESS, PRICE_TABLE_FAILURE\n} from \"./priceTableTypes\";\n\nconst initialState = {\n    priceTable: '',\n    error: '',\n    priceTables: [],\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case FETCH_ALL_PRICE_TABLES_REQUEST:\n            return {\n                ...state\n            };\n        case UPDATE_PRICE_TABLE_REQUEST:\n            console.log(action);\n            return {\n                ...state,\n                priceTable: action.updatedPriceTable,\n                //update specific priceTable\n                priceTables: state.priceTables.map((item, index) => {\n                    // Replace the item at index = updatedPriceTable\n                    if (index === action.updatedPriceTable.id) {\n                        return action.updatedPriceTable;\n                    }\n                    // Leave every other item unchanged\n                    return item;\n                })\n            };\n        case FETCH_PRICE_TABLE_REQUEST:\n            return {\n                ...state,\n                priceTable: action.updatedPriceTable\n            };\n        case SAVE_PRICE_TABLE_REQUEST:\n            return {\n                ...state,\n                priceTables: state.priceTables.concat(action.newItem),\n                priceTable: action.newItem\n            };\n        case DELETE_PRICE_TABLE_REQUEST:\n            return {\n                ...state,\n                priceTables: state.priceTables.filter(item => item.id !== action.priceTableId),\n            };\n        case PRICE_TABLE_SUCCESS:\n            return {\n                ...state,\n                priceTable: action.payload,\n                error: ''\n            };\n        case PRICE_TABLE_FAILURE:\n            return {\n                ...state,\n                //priceTable: '',\n                error: action.payload\n            };\n        case FETCH_ALL_PRICE_TABLES_SUCCESS:\n            return {\n                ...state,\n                priceTables: action.payload,\n                error: ''\n            };\n        default: return state;\n    }\n};\n\nexport default reducer;","import {combineReducers} from 'redux';\nimport instructorReducer from './instructor/instructorReducer';\nimport studentReducer from './student/studentReducer';\nimport lessonReducer from './lesson/lessonReducer';\nimport priceTable from './priceTable/priceTableReducer';\n\n//import authReducer from './instructor/auth/authReducer';\n\nconst rootReducer = combineReducers({\n    instructor: instructorReducer,\n    student: studentReducer,\n    lesson: lessonReducer,\n    priceTable: priceTable\n});\n\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport {Provider} from 'react-redux';\nimport store from './services/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store = {store}>     <App />\n</Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}